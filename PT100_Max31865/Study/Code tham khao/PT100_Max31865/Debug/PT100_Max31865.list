
PT100_Max31865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003068  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003178  08003178  00013178  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080031ac  080031ac  000131ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080031b0  080031b0  000131b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  080031b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c0  20000074  08003228  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000134  08003228  00020134  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ffa3  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002561  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000489b  00000000  00000000  000325a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000758  00000000  00000000  00036e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009e0  00000000  00000000  00037598  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000047c1  00000000  00000000  00037f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000028bc  00000000  00000000  0003c739  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003eff5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000186c  00000000  00000000  0003f074  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08003160 	.word	0x08003160

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08003160 	.word	0x08003160

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpun>:
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d102      	bne.n	8000a04 <__aeabi_dcmpun+0x10>
 80009fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a02:	d10a      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x20>
 8000a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a12:	d102      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	f04f 0001 	mov.w	r0, #1
 8000a1e:	4770      	bx	lr

08000a20 <__aeabi_d2iz>:
 8000a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a28:	d215      	bcs.n	8000a56 <__aeabi_d2iz+0x36>
 8000a2a:	d511      	bpl.n	8000a50 <__aeabi_d2iz+0x30>
 8000a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a34:	d912      	bls.n	8000a5c <__aeabi_d2iz+0x3c>
 8000a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	bf18      	it	ne
 8000a4c:	4240      	negne	r0, r0
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_d2iz+0x48>
 8000a5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	bf08      	it	eq
 8000a62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_d2f>:
 8000a70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a78:	bf24      	itt	cs
 8000a7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a82:	d90d      	bls.n	8000aa0 <__aeabi_d2f+0x30>
 8000a84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a98:	bf08      	it	eq
 8000a9a:	f020 0001 	biceq.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa4:	d121      	bne.n	8000aea <__aeabi_d2f+0x7a>
 8000aa6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aaa:	bfbc      	itt	lt
 8000aac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	4770      	bxlt	lr
 8000ab2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aba:	f1c2 0218 	rsb	r2, r2, #24
 8000abe:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aca:	bf18      	it	ne
 8000acc:	f040 0001 	orrne.w	r0, r0, #1
 8000ad0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000adc:	ea40 000c 	orr.w	r0, r0, ip
 8000ae0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae8:	e7cc      	b.n	8000a84 <__aeabi_d2f+0x14>
 8000aea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aee:	d107      	bne.n	8000b00 <__aeabi_d2f+0x90>
 8000af0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af4:	bf1e      	ittt	ne
 8000af6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afe:	4770      	bxne	lr
 8000b00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_frsub>:
 8000b10:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b14:	e002      	b.n	8000b1c <__addsf3>
 8000b16:	bf00      	nop

08000b18 <__aeabi_fsub>:
 8000b18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b1c <__addsf3>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	bf1f      	itttt	ne
 8000b20:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b24:	ea92 0f03 	teqne	r2, r3
 8000b28:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b2c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b30:	d06a      	beq.n	8000c08 <__addsf3+0xec>
 8000b32:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b36:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3a:	bfc1      	itttt	gt
 8000b3c:	18d2      	addgt	r2, r2, r3
 8000b3e:	4041      	eorgt	r1, r0
 8000b40:	4048      	eorgt	r0, r1
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	bfb8      	it	lt
 8000b46:	425b      	neglt	r3, r3
 8000b48:	2b19      	cmp	r3, #25
 8000b4a:	bf88      	it	hi
 8000b4c:	4770      	bxhi	lr
 8000b4e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b56:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b5a:	bf18      	it	ne
 8000b5c:	4240      	negne	r0, r0
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b66:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b6a:	bf18      	it	ne
 8000b6c:	4249      	negne	r1, r1
 8000b6e:	ea92 0f03 	teq	r2, r3
 8000b72:	d03f      	beq.n	8000bf4 <__addsf3+0xd8>
 8000b74:	f1a2 0201 	sub.w	r2, r2, #1
 8000b78:	fa41 fc03 	asr.w	ip, r1, r3
 8000b7c:	eb10 000c 	adds.w	r0, r0, ip
 8000b80:	f1c3 0320 	rsb	r3, r3, #32
 8000b84:	fa01 f103 	lsl.w	r1, r1, r3
 8000b88:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b8c:	d502      	bpl.n	8000b94 <__addsf3+0x78>
 8000b8e:	4249      	negs	r1, r1
 8000b90:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b94:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b98:	d313      	bcc.n	8000bc2 <__addsf3+0xa6>
 8000b9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b9e:	d306      	bcc.n	8000bae <__addsf3+0x92>
 8000ba0:	0840      	lsrs	r0, r0, #1
 8000ba2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ba6:	f102 0201 	add.w	r2, r2, #1
 8000baa:	2afe      	cmp	r2, #254	; 0xfe
 8000bac:	d251      	bcs.n	8000c52 <__addsf3+0x136>
 8000bae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bb6:	bf08      	it	eq
 8000bb8:	f020 0001 	biceq.w	r0, r0, #1
 8000bbc:	ea40 0003 	orr.w	r0, r0, r3
 8000bc0:	4770      	bx	lr
 8000bc2:	0049      	lsls	r1, r1, #1
 8000bc4:	eb40 0000 	adc.w	r0, r0, r0
 8000bc8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	d1ed      	bne.n	8000bae <__addsf3+0x92>
 8000bd2:	fab0 fc80 	clz	ip, r0
 8000bd6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bda:	ebb2 020c 	subs.w	r2, r2, ip
 8000bde:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be2:	bfaa      	itet	ge
 8000be4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be8:	4252      	neglt	r2, r2
 8000bea:	4318      	orrge	r0, r3
 8000bec:	bfbc      	itt	lt
 8000bee:	40d0      	lsrlt	r0, r2
 8000bf0:	4318      	orrlt	r0, r3
 8000bf2:	4770      	bx	lr
 8000bf4:	f092 0f00 	teq	r2, #0
 8000bf8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bfc:	bf06      	itte	eq
 8000bfe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c02:	3201      	addeq	r2, #1
 8000c04:	3b01      	subne	r3, #1
 8000c06:	e7b5      	b.n	8000b74 <__addsf3+0x58>
 8000c08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c10:	bf18      	it	ne
 8000c12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c16:	d021      	beq.n	8000c5c <__addsf3+0x140>
 8000c18:	ea92 0f03 	teq	r2, r3
 8000c1c:	d004      	beq.n	8000c28 <__addsf3+0x10c>
 8000c1e:	f092 0f00 	teq	r2, #0
 8000c22:	bf08      	it	eq
 8000c24:	4608      	moveq	r0, r1
 8000c26:	4770      	bx	lr
 8000c28:	ea90 0f01 	teq	r0, r1
 8000c2c:	bf1c      	itt	ne
 8000c2e:	2000      	movne	r0, #0
 8000c30:	4770      	bxne	lr
 8000c32:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c36:	d104      	bne.n	8000c42 <__addsf3+0x126>
 8000c38:	0040      	lsls	r0, r0, #1
 8000c3a:	bf28      	it	cs
 8000c3c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c40:	4770      	bx	lr
 8000c42:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c46:	bf3c      	itt	cc
 8000c48:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c4c:	4770      	bxcc	lr
 8000c4e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c52:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5a:	4770      	bx	lr
 8000c5c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c60:	bf16      	itet	ne
 8000c62:	4608      	movne	r0, r1
 8000c64:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c68:	4601      	movne	r1, r0
 8000c6a:	0242      	lsls	r2, r0, #9
 8000c6c:	bf06      	itte	eq
 8000c6e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c72:	ea90 0f01 	teqeq	r0, r1
 8000c76:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_ui2f>:
 8000c7c:	f04f 0300 	mov.w	r3, #0
 8000c80:	e004      	b.n	8000c8c <__aeabi_i2f+0x8>
 8000c82:	bf00      	nop

08000c84 <__aeabi_i2f>:
 8000c84:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c88:	bf48      	it	mi
 8000c8a:	4240      	negmi	r0, r0
 8000c8c:	ea5f 0c00 	movs.w	ip, r0
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c98:	4601      	mov	r1, r0
 8000c9a:	f04f 0000 	mov.w	r0, #0
 8000c9e:	e01c      	b.n	8000cda <__aeabi_l2f+0x2a>

08000ca0 <__aeabi_ul2f>:
 8000ca0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e00a      	b.n	8000cc4 <__aeabi_l2f+0x14>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_l2f>:
 8000cb0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__aeabi_l2f+0x14>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	ea5f 0c01 	movs.w	ip, r1
 8000cc8:	bf02      	ittt	eq
 8000cca:	4684      	moveq	ip, r0
 8000ccc:	4601      	moveq	r1, r0
 8000cce:	2000      	moveq	r0, #0
 8000cd0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cd4:	bf08      	it	eq
 8000cd6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cda:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cde:	fabc f28c 	clz	r2, ip
 8000ce2:	3a08      	subs	r2, #8
 8000ce4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce8:	db10      	blt.n	8000d0c <__aeabi_l2f+0x5c>
 8000cea:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cee:	4463      	add	r3, ip
 8000cf0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf4:	f1c2 0220 	rsb	r2, r2, #32
 8000cf8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cfc:	fa20 f202 	lsr.w	r2, r0, r2
 8000d00:	eb43 0002 	adc.w	r0, r3, r2
 8000d04:	bf08      	it	eq
 8000d06:	f020 0001 	biceq.w	r0, r0, #1
 8000d0a:	4770      	bx	lr
 8000d0c:	f102 0220 	add.w	r2, r2, #32
 8000d10:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d14:	f1c2 0220 	rsb	r2, r2, #32
 8000d18:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d1c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d20:	eb43 0002 	adc.w	r0, r3, r2
 8000d24:	bf08      	it	eq
 8000d26:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2a:	4770      	bx	lr

08000d2c <__aeabi_fmul>:
 8000d2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d34:	bf1e      	ittt	ne
 8000d36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3a:	ea92 0f0c 	teqne	r2, ip
 8000d3e:	ea93 0f0c 	teqne	r3, ip
 8000d42:	d06f      	beq.n	8000e24 <__aeabi_fmul+0xf8>
 8000d44:	441a      	add	r2, r3
 8000d46:	ea80 0c01 	eor.w	ip, r0, r1
 8000d4a:	0240      	lsls	r0, r0, #9
 8000d4c:	bf18      	it	ne
 8000d4e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d52:	d01e      	beq.n	8000d92 <__aeabi_fmul+0x66>
 8000d54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d58:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d5c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d60:	fba0 3101 	umull	r3, r1, r0, r1
 8000d64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d68:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d6c:	bf3e      	ittt	cc
 8000d6e:	0049      	lslcc	r1, r1, #1
 8000d70:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d74:	005b      	lslcc	r3, r3, #1
 8000d76:	ea40 0001 	orr.w	r0, r0, r1
 8000d7a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d7e:	2afd      	cmp	r2, #253	; 0xfd
 8000d80:	d81d      	bhi.n	8000dbe <__aeabi_fmul+0x92>
 8000d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8a:	bf08      	it	eq
 8000d8c:	f020 0001 	biceq.w	r0, r0, #1
 8000d90:	4770      	bx	lr
 8000d92:	f090 0f00 	teq	r0, #0
 8000d96:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d9a:	bf08      	it	eq
 8000d9c:	0249      	lsleq	r1, r1, #9
 8000d9e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000da6:	3a7f      	subs	r2, #127	; 0x7f
 8000da8:	bfc2      	ittt	gt
 8000daa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dae:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db2:	4770      	bxgt	lr
 8000db4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	3a01      	subs	r2, #1
 8000dbe:	dc5d      	bgt.n	8000e7c <__aeabi_fmul+0x150>
 8000dc0:	f112 0f19 	cmn.w	r2, #25
 8000dc4:	bfdc      	itt	le
 8000dc6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dca:	4770      	bxle	lr
 8000dcc:	f1c2 0200 	rsb	r2, r2, #0
 8000dd0:	0041      	lsls	r1, r0, #1
 8000dd2:	fa21 f102 	lsr.w	r1, r1, r2
 8000dd6:	f1c2 0220 	rsb	r2, r2, #32
 8000dda:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dde:	ea5f 0031 	movs.w	r0, r1, rrx
 8000de2:	f140 0000 	adc.w	r0, r0, #0
 8000de6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dea:	bf08      	it	eq
 8000dec:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df0:	4770      	bx	lr
 8000df2:	f092 0f00 	teq	r2, #0
 8000df6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0040      	lsleq	r0, r0, #1
 8000dfe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e02:	3a01      	subeq	r2, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fmul+0xce>
 8000e06:	ea40 000c 	orr.w	r0, r0, ip
 8000e0a:	f093 0f00 	teq	r3, #0
 8000e0e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0049      	lsleq	r1, r1, #1
 8000e16:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e1a:	3b01      	subeq	r3, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xe6>
 8000e1e:	ea41 010c 	orr.w	r1, r1, ip
 8000e22:	e78f      	b.n	8000d44 <__aeabi_fmul+0x18>
 8000e24:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	bf18      	it	ne
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d00a      	beq.n	8000e4a <__aeabi_fmul+0x11e>
 8000e34:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e38:	bf18      	it	ne
 8000e3a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	d1d8      	bne.n	8000df2 <__aeabi_fmul+0xc6>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e48:	4770      	bx	lr
 8000e4a:	f090 0f00 	teq	r0, #0
 8000e4e:	bf17      	itett	ne
 8000e50:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e54:	4608      	moveq	r0, r1
 8000e56:	f091 0f00 	teqne	r1, #0
 8000e5a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e5e:	d014      	beq.n	8000e8a <__aeabi_fmul+0x15e>
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	d101      	bne.n	8000e6a <__aeabi_fmul+0x13e>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	d10f      	bne.n	8000e8a <__aeabi_fmul+0x15e>
 8000e6a:	ea93 0f0c 	teq	r3, ip
 8000e6e:	d103      	bne.n	8000e78 <__aeabi_fmul+0x14c>
 8000e70:	024b      	lsls	r3, r1, #9
 8000e72:	bf18      	it	ne
 8000e74:	4608      	movne	r0, r1
 8000e76:	d108      	bne.n	8000e8a <__aeabi_fmul+0x15e>
 8000e78:	ea80 0001 	eor.w	r0, r0, r1
 8000e7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e88:	4770      	bx	lr
 8000e8a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e92:	4770      	bx	lr

08000e94 <__aeabi_fdiv>:
 8000e94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e9c:	bf1e      	ittt	ne
 8000e9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ea2:	ea92 0f0c 	teqne	r2, ip
 8000ea6:	ea93 0f0c 	teqne	r3, ip
 8000eaa:	d069      	beq.n	8000f80 <__aeabi_fdiv+0xec>
 8000eac:	eba2 0203 	sub.w	r2, r2, r3
 8000eb0:	ea80 0c01 	eor.w	ip, r0, r1
 8000eb4:	0249      	lsls	r1, r1, #9
 8000eb6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eba:	d037      	beq.n	8000f2c <__aeabi_fdiv+0x98>
 8000ebc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ec4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	bf38      	it	cc
 8000ed0:	005b      	lslcc	r3, r3, #1
 8000ed2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ed6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eda:	428b      	cmp	r3, r1
 8000edc:	bf24      	itt	cs
 8000ede:	1a5b      	subcs	r3, r3, r1
 8000ee0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ee4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee8:	bf24      	itt	cs
 8000eea:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eee:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ef2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ef6:	bf24      	itt	cs
 8000ef8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000efc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f00:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f04:	bf24      	itt	cs
 8000f06:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f0a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f0e:	011b      	lsls	r3, r3, #4
 8000f10:	bf18      	it	ne
 8000f12:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f16:	d1e0      	bne.n	8000eda <__aeabi_fdiv+0x46>
 8000f18:	2afd      	cmp	r2, #253	; 0xfd
 8000f1a:	f63f af50 	bhi.w	8000dbe <__aeabi_fmul+0x92>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f24:	bf08      	it	eq
 8000f26:	f020 0001 	biceq.w	r0, r0, #1
 8000f2a:	4770      	bx	lr
 8000f2c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f30:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f34:	327f      	adds	r2, #127	; 0x7f
 8000f36:	bfc2      	ittt	gt
 8000f38:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f3c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f40:	4770      	bxgt	lr
 8000f42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f46:	f04f 0300 	mov.w	r3, #0
 8000f4a:	3a01      	subs	r2, #1
 8000f4c:	e737      	b.n	8000dbe <__aeabi_fmul+0x92>
 8000f4e:	f092 0f00 	teq	r2, #0
 8000f52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f56:	bf02      	ittt	eq
 8000f58:	0040      	lsleq	r0, r0, #1
 8000f5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f5e:	3a01      	subeq	r2, #1
 8000f60:	d0f9      	beq.n	8000f56 <__aeabi_fdiv+0xc2>
 8000f62:	ea40 000c 	orr.w	r0, r0, ip
 8000f66:	f093 0f00 	teq	r3, #0
 8000f6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0049      	lsleq	r1, r1, #1
 8000f72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f76:	3b01      	subeq	r3, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xda>
 8000f7a:	ea41 010c 	orr.w	r1, r1, ip
 8000f7e:	e795      	b.n	8000eac <__aeabi_fdiv+0x18>
 8000f80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f84:	ea92 0f0c 	teq	r2, ip
 8000f88:	d108      	bne.n	8000f9c <__aeabi_fdiv+0x108>
 8000f8a:	0242      	lsls	r2, r0, #9
 8000f8c:	f47f af7d 	bne.w	8000e8a <__aeabi_fmul+0x15e>
 8000f90:	ea93 0f0c 	teq	r3, ip
 8000f94:	f47f af70 	bne.w	8000e78 <__aeabi_fmul+0x14c>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e776      	b.n	8000e8a <__aeabi_fmul+0x15e>
 8000f9c:	ea93 0f0c 	teq	r3, ip
 8000fa0:	d104      	bne.n	8000fac <__aeabi_fdiv+0x118>
 8000fa2:	024b      	lsls	r3, r1, #9
 8000fa4:	f43f af4c 	beq.w	8000e40 <__aeabi_fmul+0x114>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e76e      	b.n	8000e8a <__aeabi_fmul+0x15e>
 8000fac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb0:	bf18      	it	ne
 8000fb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	d1ca      	bne.n	8000f4e <__aeabi_fdiv+0xba>
 8000fb8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fbc:	f47f af5c 	bne.w	8000e78 <__aeabi_fmul+0x14c>
 8000fc0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fc4:	f47f af3c 	bne.w	8000e40 <__aeabi_fmul+0x114>
 8000fc8:	e75f      	b.n	8000e8a <__aeabi_fmul+0x15e>
 8000fca:	bf00      	nop

08000fcc <__gesf2>:
 8000fcc:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd0:	e006      	b.n	8000fe0 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__lesf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	e002      	b.n	8000fe0 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__cmpsf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff0:	bf18      	it	ne
 8000ff2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ff6:	d011      	beq.n	800101c <__cmpsf2+0x40>
 8000ff8:	b001      	add	sp, #4
 8000ffa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ffe:	bf18      	it	ne
 8001000:	ea90 0f01 	teqne	r0, r1
 8001004:	bf58      	it	pl
 8001006:	ebb2 0003 	subspl.w	r0, r2, r3
 800100a:	bf88      	it	hi
 800100c:	17c8      	asrhi	r0, r1, #31
 800100e:	bf38      	it	cc
 8001010:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001014:	bf18      	it	ne
 8001016:	f040 0001 	orrne.w	r0, r0, #1
 800101a:	4770      	bx	lr
 800101c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001020:	d102      	bne.n	8001028 <__cmpsf2+0x4c>
 8001022:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001026:	d105      	bne.n	8001034 <__cmpsf2+0x58>
 8001028:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800102c:	d1e4      	bne.n	8000ff8 <__cmpsf2+0x1c>
 800102e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001032:	d0e1      	beq.n	8000ff8 <__cmpsf2+0x1c>
 8001034:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <__aeabi_cfrcmple>:
 800103c:	4684      	mov	ip, r0
 800103e:	4608      	mov	r0, r1
 8001040:	4661      	mov	r1, ip
 8001042:	e7ff      	b.n	8001044 <__aeabi_cfcmpeq>

08001044 <__aeabi_cfcmpeq>:
 8001044:	b50f      	push	{r0, r1, r2, r3, lr}
 8001046:	f7ff ffc9 	bl	8000fdc <__cmpsf2>
 800104a:	2800      	cmp	r0, #0
 800104c:	bf48      	it	mi
 800104e:	f110 0f00 	cmnmi.w	r0, #0
 8001052:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001054 <__aeabi_fcmpeq>:
 8001054:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001058:	f7ff fff4 	bl	8001044 <__aeabi_cfcmpeq>
 800105c:	bf0c      	ite	eq
 800105e:	2001      	moveq	r0, #1
 8001060:	2000      	movne	r0, #0
 8001062:	f85d fb08 	ldr.w	pc, [sp], #8
 8001066:	bf00      	nop

08001068 <__aeabi_fcmplt>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff ffea 	bl	8001044 <__aeabi_cfcmpeq>
 8001070:	bf34      	ite	cc
 8001072:	2001      	movcc	r0, #1
 8001074:	2000      	movcs	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_fcmple>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffe0 	bl	8001044 <__aeabi_cfcmpeq>
 8001084:	bf94      	ite	ls
 8001086:	2001      	movls	r0, #1
 8001088:	2000      	movhi	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmpge>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffd2 	bl	800103c <__aeabi_cfrcmple>
 8001098:	bf94      	ite	ls
 800109a:	2001      	movls	r0, #1
 800109c:	2000      	movhi	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmpgt>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffc8 	bl	800103c <__aeabi_cfrcmple>
 80010ac:	bf34      	ite	cc
 80010ae:	2001      	movcc	r0, #1
 80010b0:	2000      	movcs	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_InitTick+0x3c>)
{
 80010bc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010be:	7818      	ldrb	r0, [r3, #0]
 80010c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c4:	fbb3 f3f0 	udiv	r3, r3, r0
 80010c8:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <HAL_InitTick+0x40>)
 80010ca:	6810      	ldr	r0, [r2, #0]
 80010cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80010d0:	f000 f89e 	bl	8001210 <HAL_SYSTICK_Config>
 80010d4:	4604      	mov	r4, r0
 80010d6:	b958      	cbnz	r0, 80010f0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d8:	2d0f      	cmp	r5, #15
 80010da:	d809      	bhi.n	80010f0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	4602      	mov	r2, r0
 80010de:	4629      	mov	r1, r5
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 f854 	bl	8001190 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <HAL_InitTick+0x44>)
 80010ea:	4620      	mov	r0, r4
 80010ec:	601d      	str	r5, [r3, #0]
 80010ee:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80010f0:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80010f2:	bd38      	pop	{r3, r4, r5, pc}
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000004 	.word	0x20000004

08001100 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001100:	4a07      	ldr	r2, [pc, #28]	; (8001120 <HAL_Init+0x20>)
{
 8001102:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001104:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001106:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001108:	f043 0310 	orr.w	r3, r3, #16
 800110c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110e:	f000 f82d 	bl	800116c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff ffd0 	bl	80010b8 <HAL_InitTick>
  HAL_MspInit();
 8001118:	f001 fdde 	bl	8002cd8 <HAL_MspInit>
}
 800111c:	2000      	movs	r0, #0
 800111e:	bd08      	pop	{r3, pc}
 8001120:	40022000 	.word	0x40022000

08001124 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001124:	4a03      	ldr	r2, [pc, #12]	; (8001134 <HAL_IncTick+0x10>)
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <HAL_IncTick+0x14>)
 8001128:	6811      	ldr	r1, [r2, #0]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	440b      	add	r3, r1
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000098 	.word	0x20000098
 8001138:	20000000 	.word	0x20000000

0800113c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800113c:	4b01      	ldr	r3, [pc, #4]	; (8001144 <HAL_GetTick+0x8>)
 800113e:	6818      	ldr	r0, [r3, #0]
}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000098 	.word	0x20000098

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800114c:	f7ff fff6 	bl	800113c <HAL_GetTick>
 8001150:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001152:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001154:	bf1e      	ittt	ne
 8001156:	4b04      	ldrne	r3, [pc, #16]	; (8001168 <HAL_Delay+0x20>)
 8001158:	781b      	ldrbne	r3, [r3, #0]
 800115a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800115c:	f7ff ffee 	bl	800113c <HAL_GetTick>
 8001160:	1b40      	subs	r0, r0, r5
 8001162:	4284      	cmp	r4, r0
 8001164:	d8fa      	bhi.n	800115c <HAL_Delay+0x14>
  {
  }
}
 8001166:	bd38      	pop	{r3, r4, r5, pc}
 8001168:	20000000 	.word	0x20000000

0800116c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800116c:	4a07      	ldr	r2, [pc, #28]	; (800118c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800116e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001172:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800117a:	041b      	lsls	r3, r3, #16
 800117c:	0c1b      	lsrs	r3, r3, #16
 800117e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001186:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001188:	60d3      	str	r3, [r2, #12]
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001192:	b530      	push	{r4, r5, lr}
 8001194:	68dc      	ldr	r4, [r3, #12]
 8001196:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	bf28      	it	cs
 80011a4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ac:	bf98      	it	ls
 80011ae:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	fa05 f303 	lsl.w	r3, r5, r3
 80011b4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b8:	bf88      	it	hi
 80011ba:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4019      	ands	r1, r3
 80011be:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	fa05 f404 	lsl.w	r4, r5, r4
 80011c4:	3c01      	subs	r4, #1
 80011c6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80011c8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ca:	ea42 0201 	orr.w	r2, r2, r1
 80011ce:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	bfaf      	iteee	ge
 80011d4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	4b06      	ldrlt	r3, [pc, #24]	; (80011f4 <HAL_NVIC_SetPriority+0x64>)
 80011da:	f000 000f 	andlt.w	r0, r0, #15
 80011de:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	bfa5      	ittet	ge
 80011e2:	b2d2      	uxtbge	r2, r2
 80011e4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80011ee:	bd30      	pop	{r4, r5, pc}
 80011f0:	e000ed00 	.word	0xe000ed00
 80011f4:	e000ed14 	.word	0xe000ed14

080011f8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011f8:	2301      	movs	r3, #1
 80011fa:	0942      	lsrs	r2, r0, #5
 80011fc:	f000 001f 	and.w	r0, r0, #31
 8001200:	fa03 f000 	lsl.w	r0, r3, r0
 8001204:	4b01      	ldr	r3, [pc, #4]	; (800120c <HAL_NVIC_EnableIRQ+0x14>)
 8001206:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100

08001210 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001210:	3801      	subs	r0, #1
 8001212:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001216:	d20a      	bcs.n	800122e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	4a06      	ldr	r2, [pc, #24]	; (8001238 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001224:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000e010 	.word	0xe000e010
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800123e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	bf0c      	ite	eq
 8001244:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001248:	f022 0204 	bicne.w	r2, r2, #4
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	4770      	bx	lr
 8001250:	e000e010 	.word	0xe000e010

08001254 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001254:	4770      	bx	lr

08001256 <HAL_SYSTICK_IRQHandler>:
{
 8001256:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001258:	f7ff fffc 	bl	8001254 <HAL_SYSTICK_Callback>
 800125c:	bd08      	pop	{r3, pc}
	...

08001260 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001260:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001264:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001266:	2b02      	cmp	r3, #2
 8001268:	d003      	beq.n	8001272 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800126a:	2304      	movs	r3, #4
 800126c:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800126e:	2001      	movs	r0, #1
 8001270:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001272:	6803      	ldr	r3, [r0, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	f022 020e 	bic.w	r2, r2, #14
 800127a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	f022 0201 	bic.w	r2, r2, #1
 8001282:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001284:	4a18      	ldr	r2, [pc, #96]	; (80012e8 <HAL_DMA_Abort_IT+0x88>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d01f      	beq.n	80012ca <HAL_DMA_Abort_IT+0x6a>
 800128a:	3214      	adds	r2, #20
 800128c:	4293      	cmp	r3, r2
 800128e:	d01e      	beq.n	80012ce <HAL_DMA_Abort_IT+0x6e>
 8001290:	3214      	adds	r2, #20
 8001292:	4293      	cmp	r3, r2
 8001294:	d01d      	beq.n	80012d2 <HAL_DMA_Abort_IT+0x72>
 8001296:	3214      	adds	r2, #20
 8001298:	4293      	cmp	r3, r2
 800129a:	d01d      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x78>
 800129c:	3214      	adds	r2, #20
 800129e:	4293      	cmp	r3, r2
 80012a0:	d01d      	beq.n	80012de <HAL_DMA_Abort_IT+0x7e>
 80012a2:	3214      	adds	r2, #20
 80012a4:	4293      	cmp	r3, r2
 80012a6:	bf0c      	ite	eq
 80012a8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80012ac:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80012b0:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b2:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012b4:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80012b6:	2301      	movs	r3, #1
 80012b8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80012be:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80012c2:	b17b      	cbz	r3, 80012e4 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 80012c4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80012c6:	4620      	mov	r0, r4
 80012c8:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012ca:	2301      	movs	r3, #1
 80012cc:	e7f0      	b.n	80012b0 <HAL_DMA_Abort_IT+0x50>
 80012ce:	2310      	movs	r3, #16
 80012d0:	e7ee      	b.n	80012b0 <HAL_DMA_Abort_IT+0x50>
 80012d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d6:	e7eb      	b.n	80012b0 <HAL_DMA_Abort_IT+0x50>
 80012d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012dc:	e7e8      	b.n	80012b0 <HAL_DMA_Abort_IT+0x50>
 80012de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e2:	e7e5      	b.n	80012b0 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80012e4:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80012e6:	bd10      	pop	{r4, pc}
 80012e8:	40020008 	.word	0x40020008
 80012ec:	40020000 	.word	0x40020000

080012f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80012f4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80012f6:	4616      	mov	r6, r2
 80012f8:	4b65      	ldr	r3, [pc, #404]	; (8001490 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012fa:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80014a0 <HAL_GPIO_Init+0x1b0>
 80012fe:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80014a4 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001302:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001306:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001308:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130c:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001310:	45a0      	cmp	r8, r4
 8001312:	d17f      	bne.n	8001414 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001314:	684d      	ldr	r5, [r1, #4]
 8001316:	2d12      	cmp	r5, #18
 8001318:	f000 80af 	beq.w	800147a <HAL_GPIO_Init+0x18a>
 800131c:	f200 8088 	bhi.w	8001430 <HAL_GPIO_Init+0x140>
 8001320:	2d02      	cmp	r5, #2
 8001322:	f000 80a7 	beq.w	8001474 <HAL_GPIO_Init+0x184>
 8001326:	d87c      	bhi.n	8001422 <HAL_GPIO_Init+0x132>
 8001328:	2d00      	cmp	r5, #0
 800132a:	f000 808e 	beq.w	800144a <HAL_GPIO_Init+0x15a>
 800132e:	2d01      	cmp	r5, #1
 8001330:	f000 809e 	beq.w	8001470 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001334:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001338:	2cff      	cmp	r4, #255	; 0xff
 800133a:	bf93      	iteet	ls
 800133c:	4682      	movls	sl, r0
 800133e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001342:	3d08      	subhi	r5, #8
 8001344:	f8d0 b000 	ldrls.w	fp, [r0]
 8001348:	bf92      	itee	ls
 800134a:	00b5      	lslls	r5, r6, #2
 800134c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001350:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001352:	fa09 f805 	lsl.w	r8, r9, r5
 8001356:	ea2b 0808 	bic.w	r8, fp, r8
 800135a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800135e:	bf88      	it	hi
 8001360:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001364:	ea48 0505 	orr.w	r5, r8, r5
 8001368:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800136c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001370:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001374:	d04e      	beq.n	8001414 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001376:	4d47      	ldr	r5, [pc, #284]	; (8001494 <HAL_GPIO_Init+0x1a4>)
 8001378:	4f46      	ldr	r7, [pc, #280]	; (8001494 <HAL_GPIO_Init+0x1a4>)
 800137a:	69ad      	ldr	r5, [r5, #24]
 800137c:	f026 0803 	bic.w	r8, r6, #3
 8001380:	f045 0501 	orr.w	r5, r5, #1
 8001384:	61bd      	str	r5, [r7, #24]
 8001386:	69bd      	ldr	r5, [r7, #24]
 8001388:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800138c:	f005 0501 	and.w	r5, r5, #1
 8001390:	9501      	str	r5, [sp, #4]
 8001392:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001396:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800139a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800139c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80013a0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80013a4:	fa09 f90b 	lsl.w	r9, r9, fp
 80013a8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ac:	4d3a      	ldr	r5, [pc, #232]	; (8001498 <HAL_GPIO_Init+0x1a8>)
 80013ae:	42a8      	cmp	r0, r5
 80013b0:	d068      	beq.n	8001484 <HAL_GPIO_Init+0x194>
 80013b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013b6:	42a8      	cmp	r0, r5
 80013b8:	d066      	beq.n	8001488 <HAL_GPIO_Init+0x198>
 80013ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013be:	42a8      	cmp	r0, r5
 80013c0:	d064      	beq.n	800148c <HAL_GPIO_Init+0x19c>
 80013c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013c6:	42a8      	cmp	r0, r5
 80013c8:	bf0c      	ite	eq
 80013ca:	2503      	moveq	r5, #3
 80013cc:	2504      	movne	r5, #4
 80013ce:	fa05 f50b 	lsl.w	r5, r5, fp
 80013d2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80013d6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013da:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013dc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80013e0:	bf14      	ite	ne
 80013e2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013e4:	43a5      	biceq	r5, r4
 80013e6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013e8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ea:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80013ee:	bf14      	ite	ne
 80013f0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013f2:	43a5      	biceq	r5, r4
 80013f4:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013f6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013f8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80013fc:	bf14      	ite	ne
 80013fe:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001400:	43a5      	biceq	r5, r4
 8001402:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001404:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001406:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800140a:	bf14      	ite	ne
 800140c:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800140e:	ea25 0404 	biceq.w	r4, r5, r4
 8001412:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001414:	3601      	adds	r6, #1
 8001416:	2e10      	cmp	r6, #16
 8001418:	f47f af73 	bne.w	8001302 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 800141c:	b003      	add	sp, #12
 800141e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001422:	2d03      	cmp	r5, #3
 8001424:	d022      	beq.n	800146c <HAL_GPIO_Init+0x17c>
 8001426:	2d11      	cmp	r5, #17
 8001428:	d184      	bne.n	8001334 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800142a:	68ca      	ldr	r2, [r1, #12]
 800142c:	3204      	adds	r2, #4
          break;
 800142e:	e781      	b.n	8001334 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001430:	4f1a      	ldr	r7, [pc, #104]	; (800149c <HAL_GPIO_Init+0x1ac>)
 8001432:	42bd      	cmp	r5, r7
 8001434:	d009      	beq.n	800144a <HAL_GPIO_Init+0x15a>
 8001436:	d812      	bhi.n	800145e <HAL_GPIO_Init+0x16e>
 8001438:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80014a8 <HAL_GPIO_Init+0x1b8>
 800143c:	454d      	cmp	r5, r9
 800143e:	d004      	beq.n	800144a <HAL_GPIO_Init+0x15a>
 8001440:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001444:	454d      	cmp	r5, r9
 8001446:	f47f af75 	bne.w	8001334 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800144a:	688a      	ldr	r2, [r1, #8]
 800144c:	b1c2      	cbz	r2, 8001480 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800144e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001450:	bf0c      	ite	eq
 8001452:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001456:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800145a:	2208      	movs	r2, #8
 800145c:	e76a      	b.n	8001334 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800145e:	4575      	cmp	r5, lr
 8001460:	d0f3      	beq.n	800144a <HAL_GPIO_Init+0x15a>
 8001462:	4565      	cmp	r5, ip
 8001464:	d0f1      	beq.n	800144a <HAL_GPIO_Init+0x15a>
 8001466:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80014ac <HAL_GPIO_Init+0x1bc>
 800146a:	e7eb      	b.n	8001444 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800146c:	2200      	movs	r2, #0
 800146e:	e761      	b.n	8001334 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001470:	68ca      	ldr	r2, [r1, #12]
          break;
 8001472:	e75f      	b.n	8001334 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001474:	68ca      	ldr	r2, [r1, #12]
 8001476:	3208      	adds	r2, #8
          break;
 8001478:	e75c      	b.n	8001334 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800147a:	68ca      	ldr	r2, [r1, #12]
 800147c:	320c      	adds	r2, #12
          break;
 800147e:	e759      	b.n	8001334 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001480:	2204      	movs	r2, #4
 8001482:	e757      	b.n	8001334 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001484:	2500      	movs	r5, #0
 8001486:	e7a2      	b.n	80013ce <HAL_GPIO_Init+0xde>
 8001488:	2501      	movs	r5, #1
 800148a:	e7a0      	b.n	80013ce <HAL_GPIO_Init+0xde>
 800148c:	2502      	movs	r5, #2
 800148e:	e79e      	b.n	80013ce <HAL_GPIO_Init+0xde>
 8001490:	40010400 	.word	0x40010400
 8001494:	40021000 	.word	0x40021000
 8001498:	40010800 	.word	0x40010800
 800149c:	10210000 	.word	0x10210000
 80014a0:	10310000 	.word	0x10310000
 80014a4:	10320000 	.word	0x10320000
 80014a8:	10110000 	.word	0x10110000
 80014ac:	10220000 	.word	0x10220000

080014b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b0:	b10a      	cbz	r2, 80014b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014b2:	6101      	str	r1, [r0, #16]
 80014b4:	4770      	bx	lr
 80014b6:	0409      	lsls	r1, r1, #16
 80014b8:	e7fb      	b.n	80014b2 <HAL_GPIO_WritePin+0x2>
	...

080014bc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014bc:	6803      	ldr	r3, [r0, #0]
{
 80014be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c2:	07db      	lsls	r3, r3, #31
{
 80014c4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c6:	d410      	bmi.n	80014ea <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c8:	682b      	ldr	r3, [r5, #0]
 80014ca:	079f      	lsls	r7, r3, #30
 80014cc:	d45e      	bmi.n	800158c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ce:	682b      	ldr	r3, [r5, #0]
 80014d0:	0719      	lsls	r1, r3, #28
 80014d2:	f100 8095 	bmi.w	8001600 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d6:	682b      	ldr	r3, [r5, #0]
 80014d8:	075a      	lsls	r2, r3, #29
 80014da:	f100 80bf 	bmi.w	800165c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014de:	69ea      	ldr	r2, [r5, #28]
 80014e0:	2a00      	cmp	r2, #0
 80014e2:	f040 812d 	bne.w	8001740 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80014e6:	2000      	movs	r0, #0
 80014e8:	e014      	b.n	8001514 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014ea:	4c90      	ldr	r4, [pc, #576]	; (800172c <HAL_RCC_OscConfig+0x270>)
 80014ec:	6863      	ldr	r3, [r4, #4]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d007      	beq.n	8001506 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014f6:	6863      	ldr	r3, [r4, #4]
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d10c      	bne.n	800151a <HAL_RCC_OscConfig+0x5e>
 8001500:	6863      	ldr	r3, [r4, #4]
 8001502:	03de      	lsls	r6, r3, #15
 8001504:	d509      	bpl.n	800151a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001506:	6823      	ldr	r3, [r4, #0]
 8001508:	039c      	lsls	r4, r3, #14
 800150a:	d5dd      	bpl.n	80014c8 <HAL_RCC_OscConfig+0xc>
 800150c:	686b      	ldr	r3, [r5, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1da      	bne.n	80014c8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001512:	2001      	movs	r0, #1
}
 8001514:	b002      	add	sp, #8
 8001516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151a:	686b      	ldr	r3, [r5, #4]
 800151c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001520:	d110      	bne.n	8001544 <HAL_RCC_OscConfig+0x88>
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001528:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800152a:	f7ff fe07 	bl	800113c <HAL_GetTick>
 800152e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	0398      	lsls	r0, r3, #14
 8001534:	d4c8      	bmi.n	80014c8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001536:	f7ff fe01 	bl	800113c <HAL_GetTick>
 800153a:	1b80      	subs	r0, r0, r6
 800153c:	2864      	cmp	r0, #100	; 0x64
 800153e:	d9f7      	bls.n	8001530 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001540:	2003      	movs	r0, #3
 8001542:	e7e7      	b.n	8001514 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001544:	b99b      	cbnz	r3, 800156e <HAL_RCC_OscConfig+0xb2>
 8001546:	6823      	ldr	r3, [r4, #0]
 8001548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800154c:	6023      	str	r3, [r4, #0]
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001554:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001556:	f7ff fdf1 	bl	800113c <HAL_GetTick>
 800155a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155c:	6823      	ldr	r3, [r4, #0]
 800155e:	0399      	lsls	r1, r3, #14
 8001560:	d5b2      	bpl.n	80014c8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001562:	f7ff fdeb 	bl	800113c <HAL_GetTick>
 8001566:	1b80      	subs	r0, r0, r6
 8001568:	2864      	cmp	r0, #100	; 0x64
 800156a:	d9f7      	bls.n	800155c <HAL_RCC_OscConfig+0xa0>
 800156c:	e7e8      	b.n	8001540 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	d103      	bne.n	800157e <HAL_RCC_OscConfig+0xc2>
 8001576:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800157a:	6023      	str	r3, [r4, #0]
 800157c:	e7d1      	b.n	8001522 <HAL_RCC_OscConfig+0x66>
 800157e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001582:	6023      	str	r3, [r4, #0]
 8001584:	6823      	ldr	r3, [r4, #0]
 8001586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800158a:	e7cd      	b.n	8001528 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800158c:	4c67      	ldr	r4, [pc, #412]	; (800172c <HAL_RCC_OscConfig+0x270>)
 800158e:	6863      	ldr	r3, [r4, #4]
 8001590:	f013 0f0c 	tst.w	r3, #12
 8001594:	d007      	beq.n	80015a6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001596:	6863      	ldr	r3, [r4, #4]
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	2b08      	cmp	r3, #8
 800159e:	d110      	bne.n	80015c2 <HAL_RCC_OscConfig+0x106>
 80015a0:	6863      	ldr	r3, [r4, #4]
 80015a2:	03da      	lsls	r2, r3, #15
 80015a4:	d40d      	bmi.n	80015c2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a6:	6823      	ldr	r3, [r4, #0]
 80015a8:	079b      	lsls	r3, r3, #30
 80015aa:	d502      	bpl.n	80015b2 <HAL_RCC_OscConfig+0xf6>
 80015ac:	692b      	ldr	r3, [r5, #16]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d1af      	bne.n	8001512 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	696a      	ldr	r2, [r5, #20]
 80015b6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015ba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015be:	6023      	str	r3, [r4, #0]
 80015c0:	e785      	b.n	80014ce <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c2:	692a      	ldr	r2, [r5, #16]
 80015c4:	4b5a      	ldr	r3, [pc, #360]	; (8001730 <HAL_RCC_OscConfig+0x274>)
 80015c6:	b16a      	cbz	r2, 80015e4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80015c8:	2201      	movs	r2, #1
 80015ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015cc:	f7ff fdb6 	bl	800113c <HAL_GetTick>
 80015d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d2:	6823      	ldr	r3, [r4, #0]
 80015d4:	079f      	lsls	r7, r3, #30
 80015d6:	d4ec      	bmi.n	80015b2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d8:	f7ff fdb0 	bl	800113c <HAL_GetTick>
 80015dc:	1b80      	subs	r0, r0, r6
 80015de:	2802      	cmp	r0, #2
 80015e0:	d9f7      	bls.n	80015d2 <HAL_RCC_OscConfig+0x116>
 80015e2:	e7ad      	b.n	8001540 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80015e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015e6:	f7ff fda9 	bl	800113c <HAL_GetTick>
 80015ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ec:	6823      	ldr	r3, [r4, #0]
 80015ee:	0798      	lsls	r0, r3, #30
 80015f0:	f57f af6d 	bpl.w	80014ce <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f4:	f7ff fda2 	bl	800113c <HAL_GetTick>
 80015f8:	1b80      	subs	r0, r0, r6
 80015fa:	2802      	cmp	r0, #2
 80015fc:	d9f6      	bls.n	80015ec <HAL_RCC_OscConfig+0x130>
 80015fe:	e79f      	b.n	8001540 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001600:	69aa      	ldr	r2, [r5, #24]
 8001602:	4c4a      	ldr	r4, [pc, #296]	; (800172c <HAL_RCC_OscConfig+0x270>)
 8001604:	4b4b      	ldr	r3, [pc, #300]	; (8001734 <HAL_RCC_OscConfig+0x278>)
 8001606:	b1da      	cbz	r2, 8001640 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001608:	2201      	movs	r2, #1
 800160a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800160c:	f7ff fd96 	bl	800113c <HAL_GetTick>
 8001610:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001614:	079b      	lsls	r3, r3, #30
 8001616:	d50d      	bpl.n	8001634 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001618:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800161c:	4b46      	ldr	r3, [pc, #280]	; (8001738 <HAL_RCC_OscConfig+0x27c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	fbb3 f3f2 	udiv	r3, r3, r2
 8001624:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001626:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001628:	9b01      	ldr	r3, [sp, #4]
 800162a:	1e5a      	subs	r2, r3, #1
 800162c:	9201      	str	r2, [sp, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f9      	bne.n	8001626 <HAL_RCC_OscConfig+0x16a>
 8001632:	e750      	b.n	80014d6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001634:	f7ff fd82 	bl	800113c <HAL_GetTick>
 8001638:	1b80      	subs	r0, r0, r6
 800163a:	2802      	cmp	r0, #2
 800163c:	d9e9      	bls.n	8001612 <HAL_RCC_OscConfig+0x156>
 800163e:	e77f      	b.n	8001540 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001640:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001642:	f7ff fd7b 	bl	800113c <HAL_GetTick>
 8001646:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001648:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800164a:	079f      	lsls	r7, r3, #30
 800164c:	f57f af43 	bpl.w	80014d6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001650:	f7ff fd74 	bl	800113c <HAL_GetTick>
 8001654:	1b80      	subs	r0, r0, r6
 8001656:	2802      	cmp	r0, #2
 8001658:	d9f6      	bls.n	8001648 <HAL_RCC_OscConfig+0x18c>
 800165a:	e771      	b.n	8001540 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165c:	4c33      	ldr	r4, [pc, #204]	; (800172c <HAL_RCC_OscConfig+0x270>)
 800165e:	69e3      	ldr	r3, [r4, #28]
 8001660:	00d8      	lsls	r0, r3, #3
 8001662:	d424      	bmi.n	80016ae <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001664:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	69e3      	ldr	r3, [r4, #28]
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	61e3      	str	r3, [r4, #28]
 800166e:	69e3      	ldr	r3, [r4, #28]
 8001670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	4e30      	ldr	r6, [pc, #192]	; (800173c <HAL_RCC_OscConfig+0x280>)
 800167a:	6833      	ldr	r3, [r6, #0]
 800167c:	05d9      	lsls	r1, r3, #23
 800167e:	d518      	bpl.n	80016b2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001680:	68eb      	ldr	r3, [r5, #12]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d126      	bne.n	80016d4 <HAL_RCC_OscConfig+0x218>
 8001686:	6a23      	ldr	r3, [r4, #32]
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800168e:	f7ff fd55 	bl	800113c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001692:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001696:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001698:	6a23      	ldr	r3, [r4, #32]
 800169a:	079b      	lsls	r3, r3, #30
 800169c:	d53f      	bpl.n	800171e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800169e:	2f00      	cmp	r7, #0
 80016a0:	f43f af1d 	beq.w	80014de <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a4:	69e3      	ldr	r3, [r4, #28]
 80016a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016aa:	61e3      	str	r3, [r4, #28]
 80016ac:	e717      	b.n	80014de <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80016ae:	2700      	movs	r7, #0
 80016b0:	e7e2      	b.n	8001678 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016b2:	6833      	ldr	r3, [r6, #0]
 80016b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80016ba:	f7ff fd3f 	bl	800113c <HAL_GetTick>
 80016be:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c0:	6833      	ldr	r3, [r6, #0]
 80016c2:	05da      	lsls	r2, r3, #23
 80016c4:	d4dc      	bmi.n	8001680 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c6:	f7ff fd39 	bl	800113c <HAL_GetTick>
 80016ca:	eba0 0008 	sub.w	r0, r0, r8
 80016ce:	2864      	cmp	r0, #100	; 0x64
 80016d0:	d9f6      	bls.n	80016c0 <HAL_RCC_OscConfig+0x204>
 80016d2:	e735      	b.n	8001540 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d4:	b9ab      	cbnz	r3, 8001702 <HAL_RCC_OscConfig+0x246>
 80016d6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	6223      	str	r3, [r4, #32]
 80016e2:	6a23      	ldr	r3, [r4, #32]
 80016e4:	f023 0304 	bic.w	r3, r3, #4
 80016e8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80016ea:	f7ff fd27 	bl	800113c <HAL_GetTick>
 80016ee:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f0:	6a23      	ldr	r3, [r4, #32]
 80016f2:	0798      	lsls	r0, r3, #30
 80016f4:	d5d3      	bpl.n	800169e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f7ff fd21 	bl	800113c <HAL_GetTick>
 80016fa:	1b80      	subs	r0, r0, r6
 80016fc:	4540      	cmp	r0, r8
 80016fe:	d9f7      	bls.n	80016f0 <HAL_RCC_OscConfig+0x234>
 8001700:	e71e      	b.n	8001540 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001702:	2b05      	cmp	r3, #5
 8001704:	6a23      	ldr	r3, [r4, #32]
 8001706:	d103      	bne.n	8001710 <HAL_RCC_OscConfig+0x254>
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	6223      	str	r3, [r4, #32]
 800170e:	e7ba      	b.n	8001686 <HAL_RCC_OscConfig+0x1ca>
 8001710:	f023 0301 	bic.w	r3, r3, #1
 8001714:	6223      	str	r3, [r4, #32]
 8001716:	6a23      	ldr	r3, [r4, #32]
 8001718:	f023 0304 	bic.w	r3, r3, #4
 800171c:	e7b6      	b.n	800168c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7ff fd0d 	bl	800113c <HAL_GetTick>
 8001722:	eba0 0008 	sub.w	r0, r0, r8
 8001726:	42b0      	cmp	r0, r6
 8001728:	d9b6      	bls.n	8001698 <HAL_RCC_OscConfig+0x1dc>
 800172a:	e709      	b.n	8001540 <HAL_RCC_OscConfig+0x84>
 800172c:	40021000 	.word	0x40021000
 8001730:	42420000 	.word	0x42420000
 8001734:	42420480 	.word	0x42420480
 8001738:	20000008 	.word	0x20000008
 800173c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001740:	4c22      	ldr	r4, [pc, #136]	; (80017cc <HAL_RCC_OscConfig+0x310>)
 8001742:	6863      	ldr	r3, [r4, #4]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b08      	cmp	r3, #8
 800174a:	f43f aee2 	beq.w	8001512 <HAL_RCC_OscConfig+0x56>
 800174e:	2300      	movs	r3, #0
 8001750:	4e1f      	ldr	r6, [pc, #124]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001752:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001754:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001756:	d12b      	bne.n	80017b0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001758:	f7ff fcf0 	bl	800113c <HAL_GetTick>
 800175c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175e:	6823      	ldr	r3, [r4, #0]
 8001760:	0199      	lsls	r1, r3, #6
 8001762:	d41f      	bmi.n	80017a4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001764:	6a2b      	ldr	r3, [r5, #32]
 8001766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176a:	d105      	bne.n	8001778 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800176c:	6862      	ldr	r2, [r4, #4]
 800176e:	68a9      	ldr	r1, [r5, #8]
 8001770:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001774:	430a      	orrs	r2, r1
 8001776:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001778:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800177a:	6862      	ldr	r2, [r4, #4]
 800177c:	430b      	orrs	r3, r1
 800177e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001782:	4313      	orrs	r3, r2
 8001784:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001786:	2301      	movs	r3, #1
 8001788:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800178a:	f7ff fcd7 	bl	800113c <HAL_GetTick>
 800178e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001790:	6823      	ldr	r3, [r4, #0]
 8001792:	019a      	lsls	r2, r3, #6
 8001794:	f53f aea7 	bmi.w	80014e6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001798:	f7ff fcd0 	bl	800113c <HAL_GetTick>
 800179c:	1b40      	subs	r0, r0, r5
 800179e:	2802      	cmp	r0, #2
 80017a0:	d9f6      	bls.n	8001790 <HAL_RCC_OscConfig+0x2d4>
 80017a2:	e6cd      	b.n	8001540 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a4:	f7ff fcca 	bl	800113c <HAL_GetTick>
 80017a8:	1bc0      	subs	r0, r0, r7
 80017aa:	2802      	cmp	r0, #2
 80017ac:	d9d7      	bls.n	800175e <HAL_RCC_OscConfig+0x2a2>
 80017ae:	e6c7      	b.n	8001540 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80017b0:	f7ff fcc4 	bl	800113c <HAL_GetTick>
 80017b4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b6:	6823      	ldr	r3, [r4, #0]
 80017b8:	019b      	lsls	r3, r3, #6
 80017ba:	f57f ae94 	bpl.w	80014e6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017be:	f7ff fcbd 	bl	800113c <HAL_GetTick>
 80017c2:	1b40      	subs	r0, r0, r5
 80017c4:	2802      	cmp	r0, #2
 80017c6:	d9f6      	bls.n	80017b6 <HAL_RCC_OscConfig+0x2fa>
 80017c8:	e6ba      	b.n	8001540 <HAL_RCC_OscConfig+0x84>
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	42420060 	.word	0x42420060

080017d4 <HAL_RCC_GetSysClockFreq>:
{
 80017d4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80017d8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017da:	ac02      	add	r4, sp, #8
 80017dc:	f103 0510 	add.w	r5, r3, #16
 80017e0:	4622      	mov	r2, r4
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	6859      	ldr	r1, [r3, #4]
 80017e6:	3308      	adds	r3, #8
 80017e8:	c203      	stmia	r2!, {r0, r1}
 80017ea:	42ab      	cmp	r3, r5
 80017ec:	4614      	mov	r4, r2
 80017ee:	d1f7      	bne.n	80017e0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017f0:	2301      	movs	r3, #1
 80017f2:	f88d 3004 	strb.w	r3, [sp, #4]
 80017f6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80017f8:	4911      	ldr	r1, [pc, #68]	; (8001840 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017fa:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80017fe:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001800:	f003 020c 	and.w	r2, r3, #12
 8001804:	2a08      	cmp	r2, #8
 8001806:	d117      	bne.n	8001838 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001808:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800180c:	a806      	add	r0, sp, #24
 800180e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001810:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001812:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001816:	d50c      	bpl.n	8001832 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001818:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800181a:	480a      	ldr	r0, [pc, #40]	; (8001844 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800181c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001820:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001822:	aa06      	add	r2, sp, #24
 8001824:	4413      	add	r3, r2
 8001826:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800182a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800182e:	b007      	add	sp, #28
 8001830:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <HAL_RCC_GetSysClockFreq+0x74>)
 8001834:	4350      	muls	r0, r2
 8001836:	e7fa      	b.n	800182e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800183a:	e7f8      	b.n	800182e <HAL_RCC_GetSysClockFreq+0x5a>
 800183c:	08003178 	.word	0x08003178
 8001840:	40021000 	.word	0x40021000
 8001844:	007a1200 	.word	0x007a1200
 8001848:	003d0900 	.word	0x003d0900

0800184c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800184c:	4a4d      	ldr	r2, [pc, #308]	; (8001984 <HAL_RCC_ClockConfig+0x138>)
{
 800184e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001852:	6813      	ldr	r3, [r2, #0]
{
 8001854:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	428b      	cmp	r3, r1
{
 800185c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800185e:	d328      	bcc.n	80018b2 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001860:	682a      	ldr	r2, [r5, #0]
 8001862:	0791      	lsls	r1, r2, #30
 8001864:	d432      	bmi.n	80018cc <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001866:	07d2      	lsls	r2, r2, #31
 8001868:	d438      	bmi.n	80018dc <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800186a:	4a46      	ldr	r2, [pc, #280]	; (8001984 <HAL_RCC_ClockConfig+0x138>)
 800186c:	6813      	ldr	r3, [r2, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	429e      	cmp	r6, r3
 8001874:	d373      	bcc.n	800195e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001876:	682a      	ldr	r2, [r5, #0]
 8001878:	4c43      	ldr	r4, [pc, #268]	; (8001988 <HAL_RCC_ClockConfig+0x13c>)
 800187a:	f012 0f04 	tst.w	r2, #4
 800187e:	d179      	bne.n	8001974 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001880:	0713      	lsls	r3, r2, #28
 8001882:	d506      	bpl.n	8001892 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001884:	6863      	ldr	r3, [r4, #4]
 8001886:	692a      	ldr	r2, [r5, #16]
 8001888:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800188c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001890:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001892:	f7ff ff9f 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 8001896:	6863      	ldr	r3, [r4, #4]
 8001898:	4a3c      	ldr	r2, [pc, #240]	; (800198c <HAL_RCC_ClockConfig+0x140>)
 800189a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800189e:	5cd3      	ldrb	r3, [r2, r3]
 80018a0:	40d8      	lsrs	r0, r3
 80018a2:	4b3b      	ldr	r3, [pc, #236]	; (8001990 <HAL_RCC_ClockConfig+0x144>)
 80018a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80018a6:	2000      	movs	r0, #0
 80018a8:	f7ff fc06 	bl	80010b8 <HAL_InitTick>
  return HAL_OK;
 80018ac:	2000      	movs	r0, #0
}
 80018ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	6813      	ldr	r3, [r2, #0]
 80018b4:	f023 0307 	bic.w	r3, r3, #7
 80018b8:	430b      	orrs	r3, r1
 80018ba:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018bc:	6813      	ldr	r3, [r2, #0]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	4299      	cmp	r1, r3
 80018c4:	d0cc      	beq.n	8001860 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80018c6:	2001      	movs	r0, #1
 80018c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018cc:	492e      	ldr	r1, [pc, #184]	; (8001988 <HAL_RCC_ClockConfig+0x13c>)
 80018ce:	68a8      	ldr	r0, [r5, #8]
 80018d0:	684b      	ldr	r3, [r1, #4]
 80018d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018d6:	4303      	orrs	r3, r0
 80018d8:	604b      	str	r3, [r1, #4]
 80018da:	e7c4      	b.n	8001866 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018dc:	686a      	ldr	r2, [r5, #4]
 80018de:	4c2a      	ldr	r4, [pc, #168]	; (8001988 <HAL_RCC_ClockConfig+0x13c>)
 80018e0:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e4:	d11c      	bne.n	8001920 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ea:	d0ec      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ec:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ee:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018f2:	f023 0303 	bic.w	r3, r3, #3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80018fa:	f7ff fc1f 	bl	800113c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fe:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001900:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001902:	2b01      	cmp	r3, #1
 8001904:	d114      	bne.n	8001930 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001906:	6863      	ldr	r3, [r4, #4]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b04      	cmp	r3, #4
 800190e:	d0ac      	beq.n	800186a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001910:	f7ff fc14 	bl	800113c <HAL_GetTick>
 8001914:	1bc0      	subs	r0, r0, r7
 8001916:	4540      	cmp	r0, r8
 8001918:	d9f5      	bls.n	8001906 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800191a:	2003      	movs	r0, #3
 800191c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001920:	2a02      	cmp	r2, #2
 8001922:	d102      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001924:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001928:	e7df      	b.n	80018ea <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192a:	f013 0f02 	tst.w	r3, #2
 800192e:	e7dc      	b.n	80018ea <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001930:	2b02      	cmp	r3, #2
 8001932:	d10f      	bne.n	8001954 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001934:	6863      	ldr	r3, [r4, #4]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b08      	cmp	r3, #8
 800193c:	d095      	beq.n	800186a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193e:	f7ff fbfd 	bl	800113c <HAL_GetTick>
 8001942:	1bc0      	subs	r0, r0, r7
 8001944:	4540      	cmp	r0, r8
 8001946:	d9f5      	bls.n	8001934 <HAL_RCC_ClockConfig+0xe8>
 8001948:	e7e7      	b.n	800191a <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194a:	f7ff fbf7 	bl	800113c <HAL_GetTick>
 800194e:	1bc0      	subs	r0, r0, r7
 8001950:	4540      	cmp	r0, r8
 8001952:	d8e2      	bhi.n	800191a <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001954:	6863      	ldr	r3, [r4, #4]
 8001956:	f013 0f0c 	tst.w	r3, #12
 800195a:	d1f6      	bne.n	800194a <HAL_RCC_ClockConfig+0xfe>
 800195c:	e785      	b.n	800186a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195e:	6813      	ldr	r3, [r2, #0]
 8001960:	f023 0307 	bic.w	r3, r3, #7
 8001964:	4333      	orrs	r3, r6
 8001966:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001968:	6813      	ldr	r3, [r2, #0]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	429e      	cmp	r6, r3
 8001970:	d1a9      	bne.n	80018c6 <HAL_RCC_ClockConfig+0x7a>
 8001972:	e780      	b.n	8001876 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001974:	6863      	ldr	r3, [r4, #4]
 8001976:	68e9      	ldr	r1, [r5, #12]
 8001978:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800197c:	430b      	orrs	r3, r1
 800197e:	6063      	str	r3, [r4, #4]
 8001980:	e77e      	b.n	8001880 <HAL_RCC_ClockConfig+0x34>
 8001982:	bf00      	nop
 8001984:	40022000 	.word	0x40022000
 8001988:	40021000 	.word	0x40021000
 800198c:	0800318f 	.word	0x0800318f
 8001990:	20000008 	.word	0x20000008

08001994 <HAL_RCC_GetHCLKFreq>:
}
 8001994:	4b01      	ldr	r3, [pc, #4]	; (800199c <HAL_RCC_GetHCLKFreq+0x8>)
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000008 	.word	0x20000008

080019a0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80019a2:	4a05      	ldr	r2, [pc, #20]	; (80019b8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80019aa:	5cd3      	ldrb	r3, [r2, r3]
 80019ac:	4a03      	ldr	r2, [pc, #12]	; (80019bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80019ae:	6810      	ldr	r0, [r2, #0]
}    
 80019b0:	40d8      	lsrs	r0, r3
 80019b2:	4770      	bx	lr
 80019b4:	40021000 	.word	0x40021000
 80019b8:	0800319f 	.word	0x0800319f
 80019bc:	20000008 	.word	0x20000008

080019c0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	4a03      	ldr	r2, [pc, #12]	; (80019dc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80019ce:	6810      	ldr	r0, [r2, #0]
} 
 80019d0:	40d8      	lsrs	r0, r3
 80019d2:	4770      	bx	lr
 80019d4:	40021000 	.word	0x40021000
 80019d8:	0800319f 	.word	0x0800319f
 80019dc:	20000008 	.word	0x20000008

080019e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80019e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019e4:	4604      	mov	r4, r0
 80019e6:	4688      	mov	r8, r1
 80019e8:	4617      	mov	r7, r2
 80019ea:	461d      	mov	r5, r3
 80019ec:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80019ee:	6822      	ldr	r2, [r4, #0]
 80019f0:	6893      	ldr	r3, [r2, #8]
 80019f2:	ea38 0303 	bics.w	r3, r8, r3
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	429f      	cmp	r7, r3
 80019fe:	d102      	bne.n	8001a06 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001a00:	2000      	movs	r0, #0
}
 8001a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001a06:	1c6b      	adds	r3, r5, #1
 8001a08:	d0f2      	beq.n	80019f0 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001a0a:	bb55      	cbnz	r5, 8001a62 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a0c:	6823      	ldr	r3, [r4, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001a14:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001a16:	6862      	ldr	r2, [r4, #4]
 8001a18:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001a1c:	d10a      	bne.n	8001a34 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001a1e:	68a2      	ldr	r2, [r4, #8]
 8001a20:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001a24:	d002      	beq.n	8001a2c <SPI_WaitFlagStateUntilTimeout+0x4c>
 8001a26:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001a2a:	d103      	bne.n	8001a34 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a32:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001a34:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a36:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001a3a:	d109      	bne.n	8001a50 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a42:	0412      	lsls	r2, r2, #16
 8001a44:	0c12      	lsrs	r2, r2, #16
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a4e:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8001a50:	2301      	movs	r3, #1
 8001a52:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001a56:	2300      	movs	r3, #0
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001a62:	f7ff fb6b 	bl	800113c <HAL_GetTick>
 8001a66:	1b80      	subs	r0, r0, r6
 8001a68:	4285      	cmp	r5, r0
 8001a6a:	d8c0      	bhi.n	80019ee <SPI_WaitFlagStateUntilTimeout+0xe>
 8001a6c:	e7ce      	b.n	8001a0c <SPI_WaitFlagStateUntilTimeout+0x2c>

08001a6e <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001a6e:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a70:	460b      	mov	r3, r1
 8001a72:	9200      	str	r2, [sp, #0]
 8001a74:	2180      	movs	r1, #128	; 0x80
 8001a76:	2200      	movs	r2, #0
{
 8001a78:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a7a:	f7ff ffb1 	bl	80019e0 <SPI_WaitFlagStateUntilTimeout>
 8001a7e:	b120      	cbz	r0, 8001a8a <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8001a80:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a84:	f043 0320 	orr.w	r3, r3, #32
 8001a88:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8001a8a:	b002      	add	sp, #8
 8001a8c:	bd10      	pop	{r4, pc}

08001a8e <HAL_SPI_Transmit>:
{
 8001a8e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001a92:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001a94:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001a98:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001a9a:	2b01      	cmp	r3, #1
{
 8001a9c:	460d      	mov	r5, r1
 8001a9e:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001aa0:	f000 809c 	beq.w	8001bdc <HAL_SPI_Transmit+0x14e>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001aaa:	f7ff fb47 	bl	800113c <HAL_GetTick>
 8001aae:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8001ab0:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001ab4:	b2c0      	uxtb	r0, r0
 8001ab6:	2801      	cmp	r0, #1
 8001ab8:	f040 808e 	bne.w	8001bd8 <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0U))
 8001abc:	2d00      	cmp	r5, #0
 8001abe:	d04e      	beq.n	8001b5e <HAL_SPI_Transmit+0xd0>
 8001ac0:	f1b8 0f00 	cmp.w	r8, #0
 8001ac4:	d04b      	beq.n	8001b5e <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ad0:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001ad2:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001ad6:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ad8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001ada:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001adc:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ade:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ae0:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ae6:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8001ae8:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001aec:	bf02      	ittt	eq
 8001aee:	681a      	ldreq	r2, [r3, #0]
 8001af0:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8001af4:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001afa:	bf5e      	ittt	pl
 8001afc:	681a      	ldrpl	r2, [r3, #0]
 8001afe:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001b02:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b04:	68e2      	ldr	r2, [r4, #12]
 8001b06:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001b0a:	6862      	ldr	r2, [r4, #4]
 8001b0c:	d138      	bne.n	8001b80 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001b0e:	b11a      	cbz	r2, 8001b18 <HAL_SPI_Transmit+0x8a>
 8001b10:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001b12:	b292      	uxth	r2, r2
 8001b14:	2a01      	cmp	r2, #1
 8001b16:	d106      	bne.n	8001b26 <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8001b18:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001b1c:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8001b1e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001b26:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b993      	cbnz	r3, 8001b52 <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001b2c:	9700      	str	r7, [sp, #0]
 8001b2e:	4633      	mov	r3, r6
 8001b30:	2201      	movs	r2, #1
 8001b32:	2102      	movs	r1, #2
 8001b34:	4620      	mov	r0, r4
 8001b36:	f7ff ff53 	bl	80019e0 <SPI_WaitFlagStateUntilTimeout>
 8001b3a:	b978      	cbnz	r0, 8001b5c <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001b3c:	463a      	mov	r2, r7
 8001b3e:	4631      	mov	r1, r6
 8001b40:	4620      	mov	r0, r4
 8001b42:	f7ff ff94 	bl	8001a6e <SPI_CheckFlag_BSY>
 8001b46:	2800      	cmp	r0, #0
 8001b48:	d038      	beq.n	8001bbc <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b4a:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8001b4c:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b4e:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8001b50:	e005      	b.n	8001b5e <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	0790      	lsls	r0, r2, #30
 8001b58:	d4de      	bmi.n	8001b18 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001b5a:	b94e      	cbnz	r6, 8001b70 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8001b5c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001b64:	2300      	movs	r3, #0
 8001b66:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001b6a:	b004      	add	sp, #16
 8001b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001b70:	1c71      	adds	r1, r6, #1
 8001b72:	d0d8      	beq.n	8001b26 <HAL_SPI_Transmit+0x98>
 8001b74:	f7ff fae2 	bl	800113c <HAL_GetTick>
 8001b78:	1bc0      	subs	r0, r0, r7
 8001b7a:	4286      	cmp	r6, r0
 8001b7c:	d8d3      	bhi.n	8001b26 <HAL_SPI_Transmit+0x98>
 8001b7e:	e7ed      	b.n	8001b5c <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001b80:	b11a      	cbz	r2, 8001b8a <HAL_SPI_Transmit+0xfc>
 8001b82:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001b84:	b292      	uxth	r2, r2
 8001b86:	2a01      	cmp	r2, #1
 8001b88:	d106      	bne.n	8001b98 <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001b8a:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001b8e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001b90:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001b98:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0c5      	beq.n	8001b2c <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ba0:	6823      	ldr	r3, [r4, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	0792      	lsls	r2, r2, #30
 8001ba6:	d4f0      	bmi.n	8001b8a <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001ba8:	2e00      	cmp	r6, #0
 8001baa:	d0d7      	beq.n	8001b5c <HAL_SPI_Transmit+0xce>
 8001bac:	1c73      	adds	r3, r6, #1
 8001bae:	d0f3      	beq.n	8001b98 <HAL_SPI_Transmit+0x10a>
 8001bb0:	f7ff fac4 	bl	800113c <HAL_GetTick>
 8001bb4:	1bc0      	subs	r0, r0, r7
 8001bb6:	4286      	cmp	r6, r0
 8001bb8:	d8ee      	bhi.n	8001b98 <HAL_SPI_Transmit+0x10a>
 8001bba:	e7cf      	b.n	8001b5c <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001bbc:	68a3      	ldr	r3, [r4, #8]
 8001bbe:	b933      	cbnz	r3, 8001bce <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bc0:	9303      	str	r3, [sp, #12]
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	9203      	str	r2, [sp, #12]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	9303      	str	r3, [sp, #12]
 8001bcc:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bce:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001bd0:	3000      	adds	r0, #0
 8001bd2:	bf18      	it	ne
 8001bd4:	2001      	movne	r0, #1
 8001bd6:	e7c2      	b.n	8001b5e <HAL_SPI_Transmit+0xd0>
 8001bd8:	2002      	movs	r0, #2
 8001bda:	e7c0      	b.n	8001b5e <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8001bdc:	2002      	movs	r0, #2
 8001bde:	e7c4      	b.n	8001b6a <HAL_SPI_Transmit+0xdc>

08001be0 <HAL_SPI_TransmitReceive>:
{
 8001be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001be4:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8001be6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001bea:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8001bec:	2b01      	cmp	r3, #1
{
 8001bee:	4604      	mov	r4, r0
 8001bf0:	460d      	mov	r5, r1
 8001bf2:	4616      	mov	r6, r2
 8001bf4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8001bf6:	f000 80ee 	beq.w	8001dd6 <HAL_SPI_TransmitReceive+0x1f6>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001c00:	f7ff fa9c 	bl	800113c <HAL_GetTick>
  tmp  = hspi->State;
 8001c04:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8001c08:	4680      	mov	r8, r0
  tmp  = hspi->State;
 8001c0a:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001c0c:	2b01      	cmp	r3, #1
  tmp1 = hspi->Init.Mode;
 8001c0e:	6861      	ldr	r1, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001c10:	d00a      	beq.n	8001c28 <HAL_SPI_TransmitReceive+0x48>
 8001c12:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001c16:	f040 80dc 	bne.w	8001dd2 <HAL_SPI_TransmitReceive+0x1f2>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001c1a:	68a2      	ldr	r2, [r4, #8]
 8001c1c:	2a00      	cmp	r2, #0
 8001c1e:	f040 80d8 	bne.w	8001dd2 <HAL_SPI_TransmitReceive+0x1f2>
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	f040 80d5 	bne.w	8001dd2 <HAL_SPI_TransmitReceive+0x1f2>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c28:	2d00      	cmp	r5, #0
 8001c2a:	d04e      	beq.n	8001cca <HAL_SPI_TransmitReceive+0xea>
 8001c2c:	2e00      	cmp	r6, #0
 8001c2e:	d04c      	beq.n	8001cca <HAL_SPI_TransmitReceive+0xea>
 8001c30:	f1b9 0f00 	cmp.w	r9, #0
 8001c34:	d049      	beq.n	8001cca <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8001c36:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c3a:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8001c3c:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c3e:	bf04      	itt	eq
 8001c40:	2305      	moveq	r3, #5
 8001c42:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001c4a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c4c:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c4e:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001c50:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001c54:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c58:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001c5a:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c5e:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001c60:	bf58      	it	pl
 8001c62:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c64:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001c66:	bf58      	it	pl
 8001c68:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001c6c:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001c70:	bf58      	it	pl
 8001c72:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c74:	68e2      	ldr	r2, [r4, #12]
 8001c76:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001c7a:	d15d      	bne.n	8001d38 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001c7c:	b119      	cbz	r1, 8001c86 <HAL_SPI_TransmitReceive+0xa6>
 8001c7e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001c80:	b292      	uxth	r2, r2
 8001c82:	2a01      	cmp	r2, #1
 8001c84:	d106      	bne.n	8001c94 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001c86:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001c8a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001c8c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001c94:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c98:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	b9bb      	cbnz	r3, 8001cce <HAL_SPI_TransmitReceive+0xee>
 8001c9e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	b9a3      	cbnz	r3, 8001cce <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001ca4:	f8cd 8000 	str.w	r8, [sp]
 8001ca8:	463b      	mov	r3, r7
 8001caa:	2201      	movs	r2, #1
 8001cac:	2102      	movs	r1, #2
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f7ff fe96 	bl	80019e0 <SPI_WaitFlagStateUntilTimeout>
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	d135      	bne.n	8001d24 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001cb8:	4642      	mov	r2, r8
 8001cba:	4639      	mov	r1, r7
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	f7ff fed6 	bl	8001a6e <SPI_CheckFlag_BSY>
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	d07a      	beq.n	8001dbc <HAL_SPI_TransmitReceive+0x1dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cc6:	2320      	movs	r3, #32
 8001cc8:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001cca:	2001      	movs	r0, #1
 8001ccc:	e02b      	b.n	8001d26 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001cce:	f1b9 0f00 	cmp.w	r9, #0
 8001cd2:	d00f      	beq.n	8001cf4 <HAL_SPI_TransmitReceive+0x114>
 8001cd4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	b163      	cbz	r3, 8001cf4 <HAL_SPI_TransmitReceive+0x114>
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	0791      	lsls	r1, r2, #30
 8001ce0:	d508      	bpl.n	8001cf4 <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 8001ce2:	f04f 0900 	mov.w	r9, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001ce6:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001cea:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001cec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001cf4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	b163      	cbz	r3, 8001d14 <HAL_SPI_TransmitReceive+0x134>
 8001cfa:	6823      	ldr	r3, [r4, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	07d2      	lsls	r2, r2, #31
 8001d00:	d508      	bpl.n	8001d14 <HAL_SPI_TransmitReceive+0x134>
        txallowed = 1U;
 8001d02:	f04f 0901 	mov.w	r9, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8001d0c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001d14:	1c78      	adds	r0, r7, #1
 8001d16:	d0bf      	beq.n	8001c98 <HAL_SPI_TransmitReceive+0xb8>
 8001d18:	f7ff fa10 	bl	800113c <HAL_GetTick>
 8001d1c:	eba0 0008 	sub.w	r0, r0, r8
 8001d20:	4287      	cmp	r7, r0
 8001d22:	d8b9      	bhi.n	8001c98 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8001d24:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001d26:	2301      	movs	r3, #1
 8001d28:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001d32:	b005      	add	sp, #20
 8001d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001d38:	b119      	cbz	r1, 8001d42 <HAL_SPI_TransmitReceive+0x162>
 8001d3a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001d3c:	b292      	uxth	r2, r2
 8001d3e:	2a01      	cmp	r2, #1
 8001d40:	d106      	bne.n	8001d50 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8001d42:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001d46:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8001d48:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001d50:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d54:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	b91b      	cbnz	r3, 8001d62 <HAL_SPI_TransmitReceive+0x182>
 8001d5a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0a0      	beq.n	8001ca4 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001d62:	f1b9 0f00 	cmp.w	r9, #0
 8001d66:	d00f      	beq.n	8001d88 <HAL_SPI_TransmitReceive+0x1a8>
 8001d68:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	b163      	cbz	r3, 8001d88 <HAL_SPI_TransmitReceive+0x1a8>
 8001d6e:	6823      	ldr	r3, [r4, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	0791      	lsls	r1, r2, #30
 8001d74:	d508      	bpl.n	8001d88 <HAL_SPI_TransmitReceive+0x1a8>
        txallowed = 0U;
 8001d76:	f04f 0900 	mov.w	r9, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001d7a:	782a      	ldrb	r2, [r5, #0]
 8001d7c:	3501      	adds	r5, #1
 8001d7e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001d80:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d82:	3b01      	subs	r3, #1
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001d88:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	b16b      	cbz	r3, 8001daa <HAL_SPI_TransmitReceive+0x1ca>
 8001d8e:	6823      	ldr	r3, [r4, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	07d2      	lsls	r2, r2, #31
 8001d94:	d509      	bpl.n	8001daa <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8001d96:	f04f 0901 	mov.w	r9, #1
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	3601      	adds	r6, #1
 8001d9e:	f806 3c01 	strb.w	r3, [r6, #-1]
        hspi->RxXferCount--;
 8001da2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001daa:	1c7b      	adds	r3, r7, #1
 8001dac:	d0d2      	beq.n	8001d54 <HAL_SPI_TransmitReceive+0x174>
 8001dae:	f7ff f9c5 	bl	800113c <HAL_GetTick>
 8001db2:	eba0 0008 	sub.w	r0, r0, r8
 8001db6:	4287      	cmp	r7, r0
 8001db8:	d8cc      	bhi.n	8001d54 <HAL_SPI_TransmitReceive+0x174>
 8001dba:	e7b3      	b.n	8001d24 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dbc:	68a3      	ldr	r3, [r4, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1b1      	bne.n	8001d26 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	9003      	str	r0, [sp, #12]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	9203      	str	r2, [sp, #12]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	9303      	str	r3, [sp, #12]
 8001dce:	9b03      	ldr	r3, [sp, #12]
 8001dd0:	e7a9      	b.n	8001d26 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	e7a7      	b.n	8001d26 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8001dd6:	2002      	movs	r0, #2
 8001dd8:	e7ab      	b.n	8001d32 <HAL_SPI_TransmitReceive+0x152>

08001dda <HAL_SPI_Receive>:
{
 8001dda:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001dde:	461e      	mov	r6, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001de0:	6843      	ldr	r3, [r0, #4]
{
 8001de2:	4604      	mov	r4, r0
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001de4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8001de8:	460d      	mov	r5, r1
 8001dea:	4690      	mov	r8, r2
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001dec:	d10c      	bne.n	8001e08 <HAL_SPI_Receive+0x2e>
 8001dee:	6883      	ldr	r3, [r0, #8]
 8001df0:	b953      	cbnz	r3, 8001e08 <HAL_SPI_Receive+0x2e>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001df2:	2304      	movs	r3, #4
 8001df4:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 8001df8:	4613      	mov	r3, r2
 8001dfa:	9600      	str	r6, [sp, #0]
 8001dfc:	460a      	mov	r2, r1
 8001dfe:	f7ff feef 	bl	8001be0 <HAL_SPI_TransmitReceive>
}
 8001e02:	b002      	add	sp, #8
 8001e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8001e08:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	f000 8081 	beq.w	8001f14 <HAL_SPI_Receive+0x13a>
 8001e12:	2301      	movs	r3, #1
 8001e14:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001e18:	f7ff f990 	bl	800113c <HAL_GetTick>
 8001e1c:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8001e1e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001e22:	b2c0      	uxtb	r0, r0
 8001e24:	2801      	cmp	r0, #1
 8001e26:	d173      	bne.n	8001f10 <HAL_SPI_Receive+0x136>
  if((pData == NULL ) || (Size == 0U))
 8001e28:	2d00      	cmp	r5, #0
 8001e2a:	d058      	beq.n	8001ede <HAL_SPI_Receive+0x104>
 8001e2c:	f1b8 0f00 	cmp.w	r8, #0
 8001e30:	d055      	beq.n	8001ede <HAL_SPI_Receive+0x104>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e32:	2304      	movs	r3, #4
 8001e34:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e3c:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8001e3e:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8001e42:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001e44:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001e46:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e48:	6463      	str	r3, [r4, #68]	; 0x44
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e4a:	68a3      	ldr	r3, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e4c:	63a5      	str	r5, [r4, #56]	; 0x38
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e52:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferSize  = Size;
 8001e54:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 8001e58:	bf02      	ittt	eq
 8001e5a:	681a      	ldreq	r2, [r3, #0]
 8001e5c:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8001e60:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001e66:	bf5e      	ittt	pl
 8001e68:	681a      	ldrpl	r2, [r3, #0]
 8001e6a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001e6e:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001e70:	68e3      	ldr	r3, [r4, #12]
 8001e72:	b1cb      	cbz	r3, 8001ea8 <HAL_SPI_Receive+0xce>
    while(hspi->RxXferCount > 0U)
 8001e74:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	b1d3      	cbz	r3, 8001eb0 <HAL_SPI_Receive+0xd6>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	07d2      	lsls	r2, r2, #31
 8001e80:	d53c      	bpl.n	8001efc <HAL_SPI_Receive+0x122>
        *((uint16_t*)pData) = hspi->Instance->DR;
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 8001e88:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001e90:	e7f0      	b.n	8001e74 <HAL_SPI_Receive+0x9a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	07d0      	lsls	r0, r2, #31
 8001e98:	d51f      	bpl.n	8001eda <HAL_SPI_Receive+0x100>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8001e9a:	7b1b      	ldrb	r3, [r3, #12]
 8001e9c:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 8001ea0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while(hspi->RxXferCount > 0U)
 8001ea8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f0      	bne.n	8001e92 <HAL_SPI_Receive+0xb8>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001eb0:	6863      	ldr	r3, [r4, #4]
 8001eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_SPI_Receive+0xf6>
 8001eb8:	68a3      	ldr	r3, [r4, #8]
 8001eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ebe:	d002      	beq.n	8001ec6 <HAL_SPI_Receive+0xec>
 8001ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec4:	d104      	bne.n	8001ed0 <HAL_SPI_Receive+0xf6>
    __HAL_SPI_DISABLE(hspi);
 8001ec6:	6822      	ldr	r2, [r4, #0]
 8001ec8:	6813      	ldr	r3, [r2, #0]
 8001eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ece:	6013      	str	r3, [r2, #0]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ed0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001ed2:	3000      	adds	r0, #0
 8001ed4:	bf18      	it	ne
 8001ed6:	2001      	movne	r0, #1
 8001ed8:	e001      	b.n	8001ede <HAL_SPI_Receive+0x104>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001eda:	b93e      	cbnz	r6, 8001eec <HAL_SPI_Receive+0x112>
          errorcode = HAL_TIMEOUT;
 8001edc:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8001eea:	e78a      	b.n	8001e02 <HAL_SPI_Receive+0x28>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001eec:	1c71      	adds	r1, r6, #1
 8001eee:	d0db      	beq.n	8001ea8 <HAL_SPI_Receive+0xce>
 8001ef0:	f7ff f924 	bl	800113c <HAL_GetTick>
 8001ef4:	1bc0      	subs	r0, r0, r7
 8001ef6:	4286      	cmp	r6, r0
 8001ef8:	d8d6      	bhi.n	8001ea8 <HAL_SPI_Receive+0xce>
 8001efa:	e7ef      	b.n	8001edc <HAL_SPI_Receive+0x102>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001efc:	2e00      	cmp	r6, #0
 8001efe:	d0ed      	beq.n	8001edc <HAL_SPI_Receive+0x102>
 8001f00:	1c73      	adds	r3, r6, #1
 8001f02:	d0b7      	beq.n	8001e74 <HAL_SPI_Receive+0x9a>
 8001f04:	f7ff f91a 	bl	800113c <HAL_GetTick>
 8001f08:	1bc0      	subs	r0, r0, r7
 8001f0a:	4286      	cmp	r6, r0
 8001f0c:	d8b2      	bhi.n	8001e74 <HAL_SPI_Receive+0x9a>
 8001f0e:	e7e5      	b.n	8001edc <HAL_SPI_Receive+0x102>
    errorcode = HAL_BUSY;
 8001f10:	2002      	movs	r0, #2
 8001f12:	e7e4      	b.n	8001ede <HAL_SPI_Receive+0x104>
  __HAL_LOCK(hspi);
 8001f14:	2002      	movs	r0, #2
 8001f16:	e774      	b.n	8001e02 <HAL_SPI_Receive+0x28>

08001f18 <HAL_SPI_GetState>:
  return hspi->State;
 8001f18:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8001f1c:	4770      	bx	lr

08001f1e <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f1e:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001f20:	4604      	mov	r4, r0
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d034      	beq.n	8001f90 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001f2a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001f2e:	b90b      	cbnz	r3, 8001f34 <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f30:	f000 ff18 	bl	8002d64 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f34:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f36:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f38:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001f3c:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f3e:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f44:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f46:	6863      	ldr	r3, [r4, #4]
 8001f48:	69a2      	ldr	r2, [r4, #24]
 8001f4a:	4303      	orrs	r3, r0
 8001f4c:	68e0      	ldr	r0, [r4, #12]
 8001f4e:	4303      	orrs	r3, r0
 8001f50:	6920      	ldr	r0, [r4, #16]
 8001f52:	4303      	orrs	r3, r0
 8001f54:	6960      	ldr	r0, [r4, #20]
 8001f56:	4303      	orrs	r3, r0
 8001f58:	69e0      	ldr	r0, [r4, #28]
 8001f5a:	4303      	orrs	r3, r0
 8001f5c:	6a20      	ldr	r0, [r4, #32]
 8001f5e:	4303      	orrs	r3, r0
 8001f60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001f62:	4303      	orrs	r3, r0
 8001f64:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001f68:	4303      	orrs	r3, r0
 8001f6a:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001f6c:	0c12      	lsrs	r2, r2, #16
 8001f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f70:	f002 0204 	and.w	r2, r2, #4
 8001f74:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001f76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001f78:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001f7a:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f7c:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f7e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f84:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001f86:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f88:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001f8a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8001f8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f90:	2001      	movs	r0, #1
}
 8001f92:	bd10      	pop	{r4, pc}

08001f94 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f94:	6803      	ldr	r3, [r0, #0]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f9c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	f022 0201 	bic.w	r2, r2, #1
 8001fa4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001fa6:	2320      	movs	r3, #32
 8001fa8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001fac:	4770      	bx	lr
	...

08001fb0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fb4:	6805      	ldr	r5, [r0, #0]
 8001fb6:	68c2      	ldr	r2, [r0, #12]
 8001fb8:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fba:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fbc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fc4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001fc6:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001fcc:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001fd0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fd4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fda:	696b      	ldr	r3, [r5, #20]
 8001fdc:	6982      	ldr	r2, [r0, #24]
 8001fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001fe6:	4b40      	ldr	r3, [pc, #256]	; (80020e8 <UART_SetConfig+0x138>)
{
 8001fe8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8001fea:	429d      	cmp	r5, r3
 8001fec:	f04f 0419 	mov.w	r4, #25
 8001ff0:	d146      	bne.n	8002080 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001ff2:	f7ff fce5 	bl	80019c0 <HAL_RCC_GetPCLK2Freq>
 8001ff6:	fb04 f300 	mul.w	r3, r4, r0
 8001ffa:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001ffe:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002002:	00b6      	lsls	r6, r6, #2
 8002004:	fbb3 f3f6 	udiv	r3, r3, r6
 8002008:	fbb3 f3f8 	udiv	r3, r3, r8
 800200c:	011e      	lsls	r6, r3, #4
 800200e:	f7ff fcd7 	bl	80019c0 <HAL_RCC_GetPCLK2Freq>
 8002012:	4360      	muls	r0, r4
 8002014:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	fbb0 f7f3 	udiv	r7, r0, r3
 800201e:	f7ff fccf 	bl	80019c0 <HAL_RCC_GetPCLK2Freq>
 8002022:	4360      	muls	r0, r4
 8002024:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	fbb0 f3f3 	udiv	r3, r0, r3
 800202e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002032:	fb08 7313 	mls	r3, r8, r3, r7
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	3332      	adds	r3, #50	; 0x32
 800203a:	fbb3 f3f8 	udiv	r3, r3, r8
 800203e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002042:	f7ff fcbd 	bl	80019c0 <HAL_RCC_GetPCLK2Freq>
 8002046:	4360      	muls	r0, r4
 8002048:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800204c:	0092      	lsls	r2, r2, #2
 800204e:	fbb0 faf2 	udiv	sl, r0, r2
 8002052:	f7ff fcb5 	bl	80019c0 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002056:	4360      	muls	r0, r4
 8002058:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002062:	fbb3 f3f8 	udiv	r3, r3, r8
 8002066:	fb08 a313 	mls	r3, r8, r3, sl
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	3332      	adds	r3, #50	; 0x32
 800206e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	433b      	orrs	r3, r7
 8002078:	4433      	add	r3, r6
 800207a:	60ab      	str	r3, [r5, #8]
 800207c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002080:	f7ff fc8e 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 8002084:	fb04 f300 	mul.w	r3, r4, r0
 8002088:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800208c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002090:	00b6      	lsls	r6, r6, #2
 8002092:	fbb3 f3f6 	udiv	r3, r3, r6
 8002096:	fbb3 f3f8 	udiv	r3, r3, r8
 800209a:	011e      	lsls	r6, r3, #4
 800209c:	f7ff fc80 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 80020a0:	4360      	muls	r0, r4
 80020a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	fbb0 f7f3 	udiv	r7, r0, r3
 80020ac:	f7ff fc78 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 80020b0:	4360      	muls	r0, r4
 80020b2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020bc:	fbb3 f3f8 	udiv	r3, r3, r8
 80020c0:	fb08 7313 	mls	r3, r8, r3, r7
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	3332      	adds	r3, #50	; 0x32
 80020c8:	fbb3 f3f8 	udiv	r3, r3, r8
 80020cc:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80020d0:	f7ff fc66 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 80020d4:	4360      	muls	r0, r4
 80020d6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80020da:	0092      	lsls	r2, r2, #2
 80020dc:	fbb0 faf2 	udiv	sl, r0, r2
 80020e0:	f7ff fc5e 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 80020e4:	e7b7      	b.n	8002056 <UART_SetConfig+0xa6>
 80020e6:	bf00      	nop
 80020e8:	40013800 	.word	0x40013800

080020ec <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80020ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ee:	4604      	mov	r4, r0
 80020f0:	460e      	mov	r6, r1
 80020f2:	4617      	mov	r7, r2
 80020f4:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80020f6:	6821      	ldr	r1, [r4, #0]
 80020f8:	680b      	ldr	r3, [r1, #0]
 80020fa:	ea36 0303 	bics.w	r3, r6, r3
 80020fe:	d101      	bne.n	8002104 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002100:	2000      	movs	r0, #0
}
 8002102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002104:	1c6b      	adds	r3, r5, #1
 8002106:	d0f7      	beq.n	80020f8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002108:	b995      	cbnz	r5, 8002130 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800210a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800210c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002114:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	f022 0201 	bic.w	r2, r2, #1
 800211c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800211e:	2320      	movs	r3, #32
 8002120:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002124:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002128:	2300      	movs	r3, #0
 800212a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800212e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002130:	f7ff f804 	bl	800113c <HAL_GetTick>
 8002134:	1bc0      	subs	r0, r0, r7
 8002136:	4285      	cmp	r5, r0
 8002138:	d2dd      	bcs.n	80020f6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800213a:	e7e6      	b.n	800210a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800213c <HAL_UART_Init>:
{
 800213c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800213e:	4604      	mov	r4, r0
 8002140:	b340      	cbz	r0, 8002194 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002142:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002146:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800214a:	b91b      	cbnz	r3, 8002154 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800214c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002150:	f000 fe3c 	bl	8002dcc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002154:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002156:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002158:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800215c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800215e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002160:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002164:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002166:	f7ff ff23 	bl	8001fb0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800216a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002174:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800217c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002184:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002186:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002188:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800218a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800218e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002192:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002194:	2001      	movs	r0, #1
}
 8002196:	bd10      	pop	{r4, pc}

08002198 <HAL_UART_Transmit>:
{
 8002198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800219c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800219e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80021a2:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80021a4:	2b20      	cmp	r3, #32
{
 80021a6:	460d      	mov	r5, r1
 80021a8:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80021aa:	d14e      	bne.n	800224a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 80021ac:	2900      	cmp	r1, #0
 80021ae:	d049      	beq.n	8002244 <HAL_UART_Transmit+0xac>
 80021b0:	2a00      	cmp	r2, #0
 80021b2:	d047      	beq.n	8002244 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80021b4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d046      	beq.n	800224a <HAL_UART_Transmit+0xb2>
 80021bc:	2301      	movs	r3, #1
 80021be:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021c6:	2321      	movs	r3, #33	; 0x21
 80021c8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80021cc:	f7fe ffb6 	bl	800113c <HAL_GetTick>
 80021d0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80021d2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80021d6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80021da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80021dc:	b29b      	uxth	r3, r3
 80021de:	b96b      	cbnz	r3, 80021fc <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021e0:	463b      	mov	r3, r7
 80021e2:	4632      	mov	r2, r6
 80021e4:	2140      	movs	r1, #64	; 0x40
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7ff ff80 	bl	80020ec <UART_WaitOnFlagUntilTimeout.constprop.3>
 80021ec:	b9a8      	cbnz	r0, 800221a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80021ee:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80021f0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80021f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80021f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80021fc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021fe:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002200:	3b01      	subs	r3, #1
 8002202:	b29b      	uxth	r3, r3
 8002204:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002206:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002208:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800220a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800220e:	4620      	mov	r0, r4
 8002210:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002212:	d10e      	bne.n	8002232 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002214:	f7ff ff6a 	bl	80020ec <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002218:	b110      	cbz	r0, 8002220 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800221a:	2003      	movs	r0, #3
 800221c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002220:	882b      	ldrh	r3, [r5, #0]
 8002222:	6822      	ldr	r2, [r4, #0]
 8002224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002228:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800222a:	6923      	ldr	r3, [r4, #16]
 800222c:	b943      	cbnz	r3, 8002240 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 800222e:	3502      	adds	r5, #2
 8002230:	e7d3      	b.n	80021da <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002232:	f7ff ff5b 	bl	80020ec <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002236:	2800      	cmp	r0, #0
 8002238:	d1ef      	bne.n	800221a <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	782a      	ldrb	r2, [r5, #0]
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	3501      	adds	r5, #1
 8002242:	e7ca      	b.n	80021da <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002244:	2001      	movs	r0, #1
 8002246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800224a:	2002      	movs	r0, #2
}
 800224c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002250 <HAL_UART_TxCpltCallback>:
 8002250:	4770      	bx	lr

08002252 <HAL_UART_RxCpltCallback>:
 8002252:	4770      	bx	lr

08002254 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002254:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8002258:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800225a:	2b22      	cmp	r3, #34	; 0x22
 800225c:	d136      	bne.n	80022cc <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800225e:	6883      	ldr	r3, [r0, #8]
 8002260:	6901      	ldr	r1, [r0, #16]
 8002262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002266:	6802      	ldr	r2, [r0, #0]
 8002268:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800226a:	d123      	bne.n	80022b4 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800226c:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800226e:	b9e9      	cbnz	r1, 80022ac <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002270:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002274:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002278:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 800227a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800227c:	3c01      	subs	r4, #1
 800227e:	b2a4      	uxth	r4, r4
 8002280:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002282:	b98c      	cbnz	r4, 80022a8 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002284:	6803      	ldr	r3, [r0, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	f022 0220 	bic.w	r2, r2, #32
 800228c:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002294:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	f022 0201 	bic.w	r2, r2, #1
 800229c:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800229e:	2320      	movs	r3, #32
 80022a0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80022a4:	f7ff ffd5 	bl	8002252 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 80022a8:	2000      	movs	r0, #0
}
 80022aa:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	f823 2b01 	strh.w	r2, [r3], #1
 80022b2:	e7e1      	b.n	8002278 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80022b4:	b921      	cbnz	r1, 80022c0 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022b6:	1c59      	adds	r1, r3, #1
 80022b8:	6852      	ldr	r2, [r2, #4]
 80022ba:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e7dc      	b.n	800227a <UART_Receive_IT+0x26>
 80022c0:	6852      	ldr	r2, [r2, #4]
 80022c2:	1c59      	adds	r1, r3, #1
 80022c4:	6281      	str	r1, [r0, #40]	; 0x28
 80022c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022ca:	e7f7      	b.n	80022bc <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80022cc:	2002      	movs	r0, #2
 80022ce:	bd10      	pop	{r4, pc}

080022d0 <HAL_UART_ErrorCallback>:
 80022d0:	4770      	bx	lr
	...

080022d4 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022d4:	6803      	ldr	r3, [r0, #0]
{
 80022d6:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022d8:	681a      	ldr	r2, [r3, #0]
{
 80022da:	4604      	mov	r4, r0
  if(errorflags == RESET)
 80022dc:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022de:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022e0:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80022e2:	d107      	bne.n	80022f4 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022e4:	0696      	lsls	r6, r2, #26
 80022e6:	d55a      	bpl.n	800239e <HAL_UART_IRQHandler+0xca>
 80022e8:	068d      	lsls	r5, r1, #26
 80022ea:	d558      	bpl.n	800239e <HAL_UART_IRQHandler+0xca>
}
 80022ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80022f0:	f7ff bfb0 	b.w	8002254 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022f4:	f015 0501 	ands.w	r5, r5, #1
 80022f8:	d102      	bne.n	8002300 <HAL_UART_IRQHandler+0x2c>
 80022fa:	f411 7f90 	tst.w	r1, #288	; 0x120
 80022fe:	d04e      	beq.n	800239e <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002300:	07d3      	lsls	r3, r2, #31
 8002302:	d505      	bpl.n	8002310 <HAL_UART_IRQHandler+0x3c>
 8002304:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002306:	bf42      	ittt	mi
 8002308:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800230a:	f043 0301 	orrmi.w	r3, r3, #1
 800230e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002310:	0750      	lsls	r0, r2, #29
 8002312:	d504      	bpl.n	800231e <HAL_UART_IRQHandler+0x4a>
 8002314:	b11d      	cbz	r5, 800231e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002316:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800231e:	0793      	lsls	r3, r2, #30
 8002320:	d504      	bpl.n	800232c <HAL_UART_IRQHandler+0x58>
 8002322:	b11d      	cbz	r5, 800232c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002324:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002326:	f043 0304 	orr.w	r3, r3, #4
 800232a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800232c:	0716      	lsls	r6, r2, #28
 800232e:	d504      	bpl.n	800233a <HAL_UART_IRQHandler+0x66>
 8002330:	b11d      	cbz	r5, 800233a <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002332:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002334:	f043 0308 	orr.w	r3, r3, #8
 8002338:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800233a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800233c:	2b00      	cmp	r3, #0
 800233e:	d066      	beq.n	800240e <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002340:	0695      	lsls	r5, r2, #26
 8002342:	d504      	bpl.n	800234e <HAL_UART_IRQHandler+0x7a>
 8002344:	0688      	lsls	r0, r1, #26
 8002346:	d502      	bpl.n	800234e <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8002348:	4620      	mov	r0, r4
 800234a:	f7ff ff83 	bl	8002254 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800234e:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002350:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002352:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002354:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002356:	0711      	lsls	r1, r2, #28
 8002358:	d402      	bmi.n	8002360 <HAL_UART_IRQHandler+0x8c>
 800235a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800235e:	d01a      	beq.n	8002396 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002360:	f7ff fe18 	bl	8001f94 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002364:	6823      	ldr	r3, [r4, #0]
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	0652      	lsls	r2, r2, #25
 800236a:	d510      	bpl.n	800238e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800236c:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800236e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002370:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002374:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002376:	b150      	cbz	r0, 800238e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002378:	4b25      	ldr	r3, [pc, #148]	; (8002410 <HAL_UART_IRQHandler+0x13c>)
 800237a:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800237c:	f7fe ff70 	bl	8001260 <HAL_DMA_Abort_IT>
 8002380:	2800      	cmp	r0, #0
 8002382:	d044      	beq.n	800240e <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002384:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800238a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800238c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800238e:	4620      	mov	r0, r4
 8002390:	f7ff ff9e 	bl	80022d0 <HAL_UART_ErrorCallback>
 8002394:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002396:	f7ff ff9b 	bl	80022d0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800239c:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800239e:	0616      	lsls	r6, r2, #24
 80023a0:	d527      	bpl.n	80023f2 <HAL_UART_IRQHandler+0x11e>
 80023a2:	060d      	lsls	r5, r1, #24
 80023a4:	d525      	bpl.n	80023f2 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80023a6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80023aa:	2a21      	cmp	r2, #33	; 0x21
 80023ac:	d12f      	bne.n	800240e <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023ae:	68a2      	ldr	r2, [r4, #8]
 80023b0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80023b4:	6a22      	ldr	r2, [r4, #32]
 80023b6:	d117      	bne.n	80023e8 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80023b8:	8811      	ldrh	r1, [r2, #0]
 80023ba:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80023be:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80023c0:	6921      	ldr	r1, [r4, #16]
 80023c2:	b979      	cbnz	r1, 80023e4 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80023c4:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80023c6:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80023c8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80023ca:	3a01      	subs	r2, #1
 80023cc:	b292      	uxth	r2, r2
 80023ce:	84e2      	strh	r2, [r4, #38]	; 0x26
 80023d0:	b9ea      	cbnz	r2, 800240e <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d8:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80023e4:	3201      	adds	r2, #1
 80023e6:	e7ee      	b.n	80023c6 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80023e8:	1c51      	adds	r1, r2, #1
 80023ea:	6221      	str	r1, [r4, #32]
 80023ec:	7812      	ldrb	r2, [r2, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	e7ea      	b.n	80023c8 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80023f2:	0650      	lsls	r0, r2, #25
 80023f4:	d50b      	bpl.n	800240e <HAL_UART_IRQHandler+0x13a>
 80023f6:	064a      	lsls	r2, r1, #25
 80023f8:	d509      	bpl.n	800240e <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023fa:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80023fc:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002402:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002404:	2320      	movs	r3, #32
 8002406:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800240a:	f7ff ff21 	bl	8002250 <HAL_UART_TxCpltCallback>
 800240e:	bd70      	pop	{r4, r5, r6, pc}
 8002410:	08002415 	.word	0x08002415

08002414 <UART_DMAAbortOnError>:
{
 8002414:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002416:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002418:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800241a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800241c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800241e:	f7ff ff57 	bl	80022d0 <HAL_UART_ErrorCallback>
 8002422:	bd08      	pop	{r3, pc}

08002424 <DBG_print_c>:
/*---------------------------------------------
 * Brief: send string
 *--------------------------------------------*/
void DBG_print_c(U8 c)
{
	if (DBG_printcCB != NULL)
 8002424:	4b02      	ldr	r3, [pc, #8]	; (8002430 <DBG_print_c+0xc>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	b10a      	cbz	r2, 800242e <DBG_print_c+0xa>
	{
		DBG_printcCB(c);
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4718      	bx	r3
 800242e:	4770      	bx	lr
 8002430:	20000090 	.word	0x20000090

08002434 <DBG_print_u>:
}
/*---------------------------------------------
 * Brief: send number
 *--------------------------------------------*/
void DBG_print_u(U32 num, U8 len)
{
 8002434:	2300      	movs	r3, #0
	U8 s[11];
	U8 l = 0, n = 0, i = 0;

	for (i = 0; i <= 10; i++)
	{
		s[i] = 0;
 8002436:	461a      	mov	r2, r3
{
 8002438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800243a:	b085      	sub	sp, #20
		s[i] = 0;
 800243c:	ad01      	add	r5, sp, #4
 800243e:	555a      	strb	r2, [r3, r5]
 8002440:	3301      	adds	r3, #1
	for (i = 0; i <= 10; i++)
 8002442:	2b0b      	cmp	r3, #11
 8002444:	d1fb      	bne.n	800243e <DBG_print_u+0xa>
 8002446:	2300      	movs	r3, #0
	}
	for (i = 0; i <= 10; i++)
	{
		n = num % 10;
 8002448:	260a      	movs	r6, #10
 800244a:	fbb0 f7f6 	udiv	r7, r0, r6
 800244e:	fb06 0017 	mls	r0, r6, r7, r0
 8002452:	1c5a      	adds	r2, r3, #1
		num /= 10;
		s[l++] = n + '0';
 8002454:	3030      	adds	r0, #48	; 0x30
 8002456:	54e8      	strb	r0, [r5, r3]
 8002458:	b2d4      	uxtb	r4, r2
		if (!num)
 800245a:	4638      	mov	r0, r7
 800245c:	b11f      	cbz	r7, 8002466 <DBG_print_u+0x32>
	for (i = 0; i <= 10; i++)
 800245e:	2a0b      	cmp	r2, #11
 8002460:	4613      	mov	r3, r2
 8002462:	d1f2      	bne.n	800244a <DBG_print_u+0x16>
 8002464:	4614      	mov	r4, r2
		{
			break;
		}
	}

	if (len > l)
 8002466:	428c      	cmp	r4, r1
 8002468:	d206      	bcs.n	8002478 <DBG_print_u+0x44>
 800246a:	2600      	movs	r6, #0
	{
		for (i = 0; i < (len - l); i++)
 800246c:	1b0c      	subs	r4, r1, r4
 800246e:	b2f3      	uxtb	r3, r6
 8002470:	42a3      	cmp	r3, r4
 8002472:	f106 0601 	add.w	r6, r6, #1
 8002476:	db0b      	blt.n	8002490 <DBG_print_u+0x5c>
 8002478:	2400      	movs	r4, #0
		}
	}
	i = 10;
	while (1)
	{
		if (s[i])
 800247a:	192b      	adds	r3, r5, r4
 800247c:	7a98      	ldrb	r0, [r3, #10]
 800247e:	b108      	cbz	r0, 8002484 <DBG_print_u+0x50>
		{
			DBG_print_c(s[i]);
 8002480:	f7ff ffd0 	bl	8002424 <DBG_print_c>
 8002484:	3c01      	subs	r4, #1
		}
		if (!i)
 8002486:	f114 0f0b 	cmn.w	r4, #11
 800248a:	d1f6      	bne.n	800247a <DBG_print_u+0x46>
		{
			break;
		}
		i--;
	}
}
 800248c:	b005      	add	sp, #20
 800248e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DBG_print_c('0');
 8002490:	2030      	movs	r0, #48	; 0x30
 8002492:	f7ff ffc7 	bl	8002424 <DBG_print_c>
 8002496:	e7ea      	b.n	800246e <DBG_print_u+0x3a>

08002498 <DBG_print_h>:
}
/*---------------------------------------------
 * Brief: send hex number
 *--------------------------------------------*/
void DBG_print_h(U8 upcase, U32 hexnum, U8 len)
{
 8002498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800249a:	4605      	mov	r5, r0
 800249c:	b085      	sub	sp, #20
	U8 s[9], i = 0, tmp = 0, l = 0;

	if (!hexnum)
 800249e:	4608      	mov	r0, r1
 80024a0:	b929      	cbnz	r1, 80024ae <DBG_print_h+0x16>
	{
		DBG_print_u(0, len);
 80024a2:	4611      	mov	r1, r2
		{
			break;
		}
		i--;
	}
}
 80024a4:	b005      	add	sp, #20
 80024a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		DBG_print_u(0, len);
 80024aa:	f7ff bfc3 	b.w	8002434 <DBG_print_u>
	memset(s, 0, 9);
 80024ae:	2300      	movs	r3, #0
 80024b0:	429d      	cmp	r5, r3
			s[i] = tmp - 10 + ((upcase) ? 'A' : 'a');
 80024b2:	bf14      	ite	ne
 80024b4:	2537      	movne	r5, #55	; 0x37
 80024b6:	2557      	moveq	r5, #87	; 0x57
	memset(s, 0, 9);
 80024b8:	ac01      	add	r4, sp, #4
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	6063      	str	r3, [r4, #4]
 80024be:	7223      	strb	r3, [r4, #8]
		tmp = hexnum % 16;
 80024c0:	f000 010f 	and.w	r1, r0, #15
		if ((tmp >= 0) && (tmp <= 9))
 80024c4:	2909      	cmp	r1, #9
			s[i] = tmp + '0';
 80024c6:	bf94      	ite	ls
 80024c8:	3130      	addls	r1, #48	; 0x30
			s[i] = tmp - 10 + ((upcase) ? 'A' : 'a');
 80024ca:	1949      	addhi	r1, r1, r5
 80024cc:	54e1      	strb	r1, [r4, r3]
	for (i = 0; i < 8; i++)
 80024ce:	2b07      	cmp	r3, #7
 80024d0:	f103 0101 	add.w	r1, r3, #1
		hexnum /= 16;
 80024d4:	ea4f 1010 	mov.w	r0, r0, lsr #4
 80024d8:	b2ce      	uxtb	r6, r1
	for (i = 0; i < 8; i++)
 80024da:	d101      	bne.n	80024e0 <DBG_print_h+0x48>
 80024dc:	2608      	movs	r6, #8
 80024de:	e002      	b.n	80024e6 <DBG_print_h+0x4e>
 80024e0:	460b      	mov	r3, r1
		if (!hexnum)
 80024e2:	2800      	cmp	r0, #0
 80024e4:	d1ec      	bne.n	80024c0 <DBG_print_h+0x28>
	if (len > l)
 80024e6:	42b2      	cmp	r2, r6
 80024e8:	d906      	bls.n	80024f8 <DBG_print_h+0x60>
 80024ea:	2700      	movs	r7, #0
		for (i = 0; i < (len - l); i++)
 80024ec:	1b95      	subs	r5, r2, r6
 80024ee:	b2fb      	uxtb	r3, r7
 80024f0:	42ab      	cmp	r3, r5
 80024f2:	f107 0701 	add.w	r7, r7, #1
 80024f6:	db0b      	blt.n	8002510 <DBG_print_h+0x78>
 80024f8:	4434      	add	r4, r6
 80024fa:	f10d 0503 	add.w	r5, sp, #3
		if (s[i])
 80024fe:	f814 0901 	ldrb.w	r0, [r4], #-1
 8002502:	b108      	cbz	r0, 8002508 <DBG_print_h+0x70>
			DBG_print_c(s[i]);
 8002504:	f7ff ff8e 	bl	8002424 <DBG_print_c>
		if (!i)
 8002508:	42ac      	cmp	r4, r5
 800250a:	d1f8      	bne.n	80024fe <DBG_print_h+0x66>
}
 800250c:	b005      	add	sp, #20
 800250e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DBG_print_c('0');
 8002510:	2030      	movs	r0, #48	; 0x30
 8002512:	f7ff ff87 	bl	8002424 <DBG_print_c>
 8002516:	e7ea      	b.n	80024ee <DBG_print_h+0x56>

08002518 <DBG_print_hs>:
/*---------------------------------------------
 * Brief: print hex string
 *--------------------------------------------*/
void DBG_print_hs(U8 upcase, const U8 *buf, U16 len )
{
 8002518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251a:	4607      	mov	r7, r0
 800251c:	4616      	mov	r6, r2
	U16 i = 0;

	if (buf == NULL)
 800251e:	460d      	mov	r5, r1
 8002520:	b179      	cbz	r1, 8002542 <DBG_print_hs+0x2a>
 8002522:	460c      	mov	r4, r1
		DBG_print_c('?');
		return;
	}
	while (1)
	{
		DBG_print_h(upcase, *buf, 2);
 8002524:	2202      	movs	r2, #2
 8002526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800252a:	4638      	mov	r0, r7
 800252c:	f7ff ffb4 	bl	8002498 <DBG_print_h>
		i++;
		*buf++;
		if (!len)
 8002530:	b966      	cbnz	r6, 800254c <DBG_print_hs+0x34>
		{
			if (*buf == 0)
 8002532:	7823      	ldrb	r3, [r4, #0]
 8002534:	b173      	cbz	r3, 8002554 <DBG_print_hs+0x3c>
			{
				break;
			}
			else if (i >= 4096)
 8002536:	1b63      	subs	r3, r4, r5
 8002538:	b29b      	uxth	r3, r3
 800253a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253e:	d3f1      	bcc.n	8002524 <DBG_print_hs+0xc>
 8002540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		DBG_print_c('?');
 8002542:	203f      	movs	r0, #63	; 0x3f
				break;
			}

		}
	}
}
 8002544:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		DBG_print_c('?');
 8002548:	f7ff bf6c 	b.w	8002424 <DBG_print_c>
			if (i >= len)
 800254c:	1b63      	subs	r3, r4, r5
 800254e:	b29b      	uxth	r3, r3
 8002550:	429e      	cmp	r6, r3
 8002552:	d8e7      	bhi.n	8002524 <DBG_print_hs+0xc>
 8002554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002558 <DBG_setup>:
	while (DBGbusy);
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <DBG_setup+0x18>)
 800255a:	781a      	ldrb	r2, [r3, #0]
 800255c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8002560:	2a00      	cmp	r2, #0
 8002562:	d1fa      	bne.n	800255a <DBG_setup+0x2>
	DBGbusy = 1;
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
	DBG_printcCB = cb;
 8002568:	4a02      	ldr	r2, [pc, #8]	; (8002574 <DBG_setup+0x1c>)
 800256a:	6010      	str	r0, [r2, #0]
	DBGbusy = 0;
 800256c:	7019      	strb	r1, [r3, #0]
 800256e:	4770      	bx	lr
 8002570:	20000094 	.word	0x20000094
 8002574:	20000090 	.word	0x20000090

08002578 <DBG_print>:
 * + d: signed integer.
 * + u: unsigned integer.
 * + x: hex number.
 *--------------------------------------------*/
void DBG_print(const U8 *s, ...)
{
 8002578:	b40f      	push	{r0, r1, r2, r3}
	va_list vl;
	U32 timepass = 0;
	U8 len = 0;

	while (DBGbusy && (timepass++ < 1000000));
 800257a:	4a9c      	ldr	r2, [pc, #624]	; (80027ec <DBG_print+0x274>)
{
 800257c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002580:	4690      	mov	r8, r2
 8002582:	b08b      	sub	sp, #44	; 0x2c
 8002584:	9c14      	ldr	r4, [sp, #80]	; 0x50
	while (DBGbusy && (timepass++ < 1000000));
 8002586:	4b9a      	ldr	r3, [pc, #616]	; (80027f0 <DBG_print+0x278>)
 8002588:	7811      	ldrb	r1, [r2, #0]
 800258a:	b109      	cbz	r1, 8002590 <DBG_print+0x18>
 800258c:	3b01      	subs	r3, #1
 800258e:	d1fb      	bne.n	8002588 <DBG_print+0x10>
	DBGbusy = 1;
 8002590:	2301      	movs	r3, #1
		if ((dbnum == 0) && step)
 8002592:	f04f 0a00 	mov.w	sl, #0
 8002596:	f04f 0b00 	mov.w	fp, #0
	DBGbusy = 1;
 800259a:	f888 3000 	strb.w	r3, [r8]
	va_start(vl, s);
 800259e:	ab15      	add	r3, sp, #84	; 0x54
 80025a0:	9301      	str	r3, [sp, #4]
	//va_arg(vl, u8*);
	while(*s)
 80025a2:	7823      	ldrb	r3, [r4, #0]
 80025a4:	b933      	cbnz	r3, 80025b4 <DBG_print+0x3c>
		DBG_PRINT_NORMAL://
		DBG_print_c(*s);
		*s++;
	}
	va_end(vl);
	DBGbusy = 0;
 80025a6:	f888 3000 	strb.w	r3, [r8]
}
 80025aa:	b00b      	add	sp, #44	; 0x2c
 80025ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b0:	b004      	add	sp, #16
 80025b2:	4770      	bx	lr
		if(*s == '%')
 80025b4:	2b25      	cmp	r3, #37	; 0x25
 80025b6:	d11d      	bne.n	80025f4 <DBG_print+0x7c>
			if ((*s >= '0') && (*s <= '9'))
 80025b8:	7865      	ldrb	r5, [r4, #1]
 80025ba:	3d30      	subs	r5, #48	; 0x30
 80025bc:	b2eb      	uxtb	r3, r5
 80025be:	2b09      	cmp	r3, #9
				len += *s - '0';
 80025c0:	bf9d      	ittte	ls
 80025c2:	78a3      	ldrbls	r3, [r4, #2]
				len = (*s - '0') * 10;
 80025c4:	eb05 0585 	addls.w	r5, r5, r5, lsl #2
				len += *s - '0';
 80025c8:	3b30      	subls	r3, #48	; 0x30
			*s++;
 80025ca:	3401      	addhi	r4, #1
				*s++;
 80025cc:	bf9c      	itt	ls
 80025ce:	3403      	addls	r4, #3
				len += *s - '0';
 80025d0:	eb03 0545 	addls.w	r5, r3, r5, lsl #1
			switch(*s)
 80025d4:	7823      	ldrb	r3, [r4, #0]
			len = 0;
 80025d6:	bf8c      	ite	hi
 80025d8:	2500      	movhi	r5, #0
				len += *s - '0';
 80025da:	f005 05ff 	andls.w	r5, r5, #255	; 0xff
			switch(*s)
 80025de:	2b64      	cmp	r3, #100	; 0x64
 80025e0:	d05a      	beq.n	8002698 <DBG_print+0x120>
 80025e2:	d815      	bhi.n	8002610 <DBG_print+0x98>
 80025e4:	2b58      	cmp	r3, #88	; 0x58
 80025e6:	f000 80a6 	beq.w	8002736 <DBG_print+0x1be>
 80025ea:	d808      	bhi.n	80025fe <DBG_print+0x86>
 80025ec:	2b48      	cmp	r3, #72	; 0x48
 80025ee:	f000 80f6 	beq.w	80027de <DBG_print+0x266>
					*s--;
 80025f2:	3c01      	subs	r4, #1
		DBG_print_c(*s);
 80025f4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80025f8:	f7ff ff14 	bl	8002424 <DBG_print_c>
 80025fc:	e7d1      	b.n	80025a2 <DBG_print+0x2a>
			switch(*s)
 80025fe:	2b62      	cmp	r3, #98	; 0x62
 8002600:	d05f      	beq.n	80026c2 <DBG_print+0x14a>
 8002602:	2b63      	cmp	r3, #99	; 0x63
 8002604:	d1f5      	bne.n	80025f2 <DBG_print+0x7a>
					DBG_print_c(va_arg(vl, U8*));
 8002606:	9b01      	ldr	r3, [sp, #4]
 8002608:	1d1a      	adds	r2, r3, #4
 800260a:	9201      	str	r2, [sp, #4]
 800260c:	7818      	ldrb	r0, [r3, #0]
 800260e:	e033      	b.n	8002678 <DBG_print+0x100>
			switch(*s)
 8002610:	2b73      	cmp	r3, #115	; 0x73
 8002612:	d01b      	beq.n	800264c <DBG_print+0xd4>
 8002614:	d80d      	bhi.n	8002632 <DBG_print+0xba>
 8002616:	2b66      	cmp	r3, #102	; 0x66
 8002618:	f000 8094 	beq.w	8002744 <DBG_print+0x1cc>
 800261c:	2b68      	cmp	r3, #104	; 0x68
 800261e:	d1e8      	bne.n	80025f2 <DBG_print+0x7a>
					DBG_print_hs(0, va_arg(vl, U8*), len);
 8002620:	9b01      	ldr	r3, [sp, #4]
 8002622:	2000      	movs	r0, #0
 8002624:	1d1a      	adds	r2, r3, #4
 8002626:	9201      	str	r2, [sp, #4]
 8002628:	462a      	mov	r2, r5
 800262a:	6819      	ldr	r1, [r3, #0]
					DBG_print_hs(1, va_arg(vl, U8*), len);
 800262c:	f7ff ff74 	bl	8002518 <DBG_print_hs>
					break;
 8002630:	e02c      	b.n	800268c <DBG_print+0x114>
			switch(*s)
 8002632:	2b75      	cmp	r3, #117	; 0x75
 8002634:	d03f      	beq.n	80026b6 <DBG_print+0x13e>
 8002636:	2b78      	cmp	r3, #120	; 0x78
 8002638:	d1db      	bne.n	80025f2 <DBG_print+0x7a>
					DBG_print_h(0, va_arg(vl, U32), len);
 800263a:	9b01      	ldr	r3, [sp, #4]
 800263c:	2000      	movs	r0, #0
 800263e:	1d1a      	adds	r2, r3, #4
 8002640:	9201      	str	r2, [sp, #4]
 8002642:	462a      	mov	r2, r5
 8002644:	6819      	ldr	r1, [r3, #0]
					DBG_print_h(1, va_arg(vl, U32), len);
 8002646:	f7ff ff27 	bl	8002498 <DBG_print_h>
					break;
 800264a:	e01f      	b.n	800268c <DBG_print+0x114>
					DBG_print_s(va_arg(vl, U8*), len);
 800264c:	9b01      	ldr	r3, [sp, #4]
 800264e:	b2ae      	uxth	r6, r5
 8002650:	1d1a      	adds	r2, r3, #4
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	9201      	str	r2, [sp, #4]
	if (buf == NULL)
 8002656:	b173      	cbz	r3, 8002676 <DBG_print+0xfe>
 8002658:	2700      	movs	r7, #0
 800265a:	f103 39ff 	add.w	r9, r3, #4294967295
	while (*buf)
 800265e:	f819 0f01 	ldrb.w	r0, [r9, #1]!
 8002662:	b960      	cbnz	r0, 800267e <DBG_print+0x106>
	if (len)
 8002664:	b195      	cbz	r5, 800268c <DBG_print+0x114>
		while (i++ < len)
 8002666:	42be      	cmp	r6, r7
 8002668:	d910      	bls.n	800268c <DBG_print+0x114>
			DBG_print_c(' ');
 800266a:	2020      	movs	r0, #32
 800266c:	3701      	adds	r7, #1
 800266e:	f7ff fed9 	bl	8002424 <DBG_print_c>
 8002672:	b2bf      	uxth	r7, r7
 8002674:	e7f7      	b.n	8002666 <DBG_print+0xee>
		DBG_print_c('?');
 8002676:	203f      	movs	r0, #63	; 0x3f
					DBG_print_c(va_arg(vl, U8*));
 8002678:	f7ff fed4 	bl	8002424 <DBG_print_c>
					break;
 800267c:	e006      	b.n	800268c <DBG_print+0x114>
		i++;
 800267e:	3701      	adds	r7, #1
		DBG_print_c(*buf);
 8002680:	f7ff fed0 	bl	8002424 <DBG_print_c>
		i++;
 8002684:	b2bf      	uxth	r7, r7
		if (len && (i >= len))
 8002686:	b11d      	cbz	r5, 8002690 <DBG_print+0x118>
 8002688:	42be      	cmp	r6, r7
 800268a:	d8e8      	bhi.n	800265e <DBG_print+0xe6>
			*s++;
 800268c:	3401      	adds	r4, #1
			continue;
 800268e:	e788      	b.n	80025a2 <DBG_print+0x2a>
		else if (i >= 4096)
 8002690:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8002694:	d1e3      	bne.n	800265e <DBG_print+0xe6>
 8002696:	e7f9      	b.n	800268c <DBG_print+0x114>
					DBG_print_d(va_arg(vl, int32_t), len);
 8002698:	9b01      	ldr	r3, [sp, #4]
 800269a:	681e      	ldr	r6, [r3, #0]
 800269c:	1d1a      	adds	r2, r3, #4
	if (num < 0)
 800269e:	2e00      	cmp	r6, #0
					DBG_print_d(va_arg(vl, int32_t), len);
 80026a0:	9201      	str	r2, [sp, #4]
	if (num < 0)
 80026a2:	da03      	bge.n	80026ac <DBG_print+0x134>
		DBG_print_c('-');
 80026a4:	202d      	movs	r0, #45	; 0x2d
 80026a6:	f7ff febd 	bl	8002424 <DBG_print_c>
		num = -num;
 80026aa:	4276      	negs	r6, r6
	DBG_print_u(num, len);
 80026ac:	4629      	mov	r1, r5
 80026ae:	4630      	mov	r0, r6
		DBG_print_u(0, len);
 80026b0:	f7ff fec0 	bl	8002434 <DBG_print_u>
 80026b4:	e7ea      	b.n	800268c <DBG_print+0x114>
					DBG_print_u(va_arg(vl, U32), len);
 80026b6:	9b01      	ldr	r3, [sp, #4]
 80026b8:	4629      	mov	r1, r5
 80026ba:	1d1a      	adds	r2, r3, #4
 80026bc:	9201      	str	r2, [sp, #4]
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	e7f6      	b.n	80026b0 <DBG_print+0x138>
					DBG_print_b(va_arg(vl, U32), len);
 80026c2:	9b01      	ldr	r3, [sp, #4]
 80026c4:	681f      	ldr	r7, [r3, #0]
 80026c6:	1d1a      	adds	r2, r3, #4
 80026c8:	9201      	str	r2, [sp, #4]
	if (!num)
 80026ca:	b917      	cbnz	r7, 80026d2 <DBG_print+0x15a>
		DBG_print_u(0, len);
 80026cc:	4629      	mov	r1, r5
 80026ce:	4638      	mov	r0, r7
 80026d0:	e7ee      	b.n	80026b0 <DBG_print+0x138>
	memset(s, 0, 32);
 80026d2:	ae02      	add	r6, sp, #8
 80026d4:	2220      	movs	r2, #32
 80026d6:	2100      	movs	r1, #0
 80026d8:	4630      	mov	r0, r6
 80026da:	f000 fc31 	bl	8002f40 <memset>
 80026de:	2300      	movs	r3, #0
		tmp = num % 2;
 80026e0:	f007 0201 	and.w	r2, r7, #1
		s[i] = tmp + '0';
 80026e4:	3230      	adds	r2, #48	; 0x30
 80026e6:	54f2      	strb	r2, [r6, r3]
	for (i = 0; i < 32; i++)
 80026e8:	2b1f      	cmp	r3, #31
 80026ea:	f103 0201 	add.w	r2, r3, #1
		num /= 2;
 80026ee:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80026f2:	fa5f f982 	uxtb.w	r9, r2
	for (i = 0; i < 32; i++)
 80026f6:	d102      	bne.n	80026fe <DBG_print+0x186>
 80026f8:	f04f 0920 	mov.w	r9, #32
 80026fc:	e002      	b.n	8002704 <DBG_print+0x18c>
 80026fe:	4613      	mov	r3, r2
		if (!num)
 8002700:	2f00      	cmp	r7, #0
 8002702:	d1ed      	bne.n	80026e0 <DBG_print+0x168>
	if (len > l)
 8002704:	454d      	cmp	r5, r9
 8002706:	d907      	bls.n	8002718 <DBG_print+0x1a0>
 8002708:	2700      	movs	r7, #0
		for (i = 0; i < (len - l); i++)
 800270a:	eba5 0509 	sub.w	r5, r5, r9
 800270e:	b2fb      	uxtb	r3, r7
 8002710:	42ab      	cmp	r3, r5
 8002712:	f107 0701 	add.w	r7, r7, #1
 8002716:	db0a      	blt.n	800272e <DBG_print+0x1b6>
 8002718:	444e      	add	r6, r9
 800271a:	f10d 0507 	add.w	r5, sp, #7
		if (s[i])
 800271e:	f816 0901 	ldrb.w	r0, [r6], #-1
 8002722:	b108      	cbz	r0, 8002728 <DBG_print+0x1b0>
			DBG_print_c(s[i]);
 8002724:	f7ff fe7e 	bl	8002424 <DBG_print_c>
		if (!i)
 8002728:	42ae      	cmp	r6, r5
 800272a:	d1f8      	bne.n	800271e <DBG_print+0x1a6>
 800272c:	e7ae      	b.n	800268c <DBG_print+0x114>
			DBG_print_c('0');
 800272e:	2030      	movs	r0, #48	; 0x30
 8002730:	f7ff fe78 	bl	8002424 <DBG_print_c>
 8002734:	e7eb      	b.n	800270e <DBG_print+0x196>
					DBG_print_h(1, va_arg(vl, U32), len);
 8002736:	9b01      	ldr	r3, [sp, #4]
 8002738:	2001      	movs	r0, #1
 800273a:	1d1a      	adds	r2, r3, #4
 800273c:	9201      	str	r2, [sp, #4]
 800273e:	6819      	ldr	r1, [r3, #0]
 8002740:	462a      	mov	r2, r5
 8002742:	e780      	b.n	8002646 <DBG_print+0xce>
					DBG_print_f(va_arg(vl, double));
 8002744:	9b01      	ldr	r3, [sp, #4]
 8002746:	3307      	adds	r3, #7
 8002748:	f023 0307 	bic.w	r3, r3, #7
 800274c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002750:	f103 0208 	add.w	r2, r3, #8
	integer = (int)dbnum;
 8002754:	4639      	mov	r1, r7
 8002756:	4630      	mov	r0, r6
					DBG_print_f(va_arg(vl, double));
 8002758:	9201      	str	r2, [sp, #4]
	integer = (int)dbnum;
 800275a:	f7fe f961 	bl	8000a20 <__aeabi_d2iz>
 800275e:	4605      	mov	r5, r0
	dbnum -= integer;
 8002760:	f7fd fe48 	bl	80003f4 <__aeabi_i2d>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4630      	mov	r0, r6
 800276a:	4639      	mov	r1, r7
 800276c:	f7fd fcf4 	bl	8000158 <__aeabi_dsub>
	if (num < 0)
 8002770:	2d00      	cmp	r5, #0
	dbnum -= integer;
 8002772:	4606      	mov	r6, r0
 8002774:	460f      	mov	r7, r1
	if (num < 0)
 8002776:	da30      	bge.n	80027da <DBG_print+0x262>
		DBG_print_c('-');
 8002778:	202d      	movs	r0, #45	; 0x2d
 800277a:	f7ff fe53 	bl	8002424 <DBG_print_c>
		num = -num;
 800277e:	4268      	negs	r0, r5
	DBG_print_u(num, len);
 8002780:	2100      	movs	r1, #0
 8002782:	f7ff fe57 	bl	8002434 <DBG_print_u>
	DBG_print_c('.');
 8002786:	202e      	movs	r0, #46	; 0x2e
 8002788:	f7ff fe4c 	bl	8002424 <DBG_print_c>
	for (step = 0; step < 6; step++)
 800278c:	2500      	movs	r5, #0
		dbnum *= 10;
 800278e:	2200      	movs	r2, #0
 8002790:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <DBG_print+0x27c>)
 8002792:	4630      	mov	r0, r6
 8002794:	4639      	mov	r1, r7
 8002796:	f7fd fe93 	bl	80004c0 <__aeabi_dmul>
 800279a:	460f      	mov	r7, r1
 800279c:	4606      	mov	r6, r0
		integer = (int)dbnum;
 800279e:	f7fe f93f 	bl	8000a20 <__aeabi_d2iz>
 80027a2:	4681      	mov	r9, r0
		dbnum -= integer;
 80027a4:	f7fd fe26 	bl	80003f4 <__aeabi_i2d>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4630      	mov	r0, r6
 80027ae:	4639      	mov	r1, r7
 80027b0:	f7fd fcd2 	bl	8000158 <__aeabi_dsub>
		if ((dbnum == 0) && step)
 80027b4:	4652      	mov	r2, sl
 80027b6:	465b      	mov	r3, fp
		dbnum -= integer;
 80027b8:	4606      	mov	r6, r0
 80027ba:	460f      	mov	r7, r1
		if ((dbnum == 0) && step)
 80027bc:	f7fe f8e8 	bl	8000990 <__aeabi_dcmpeq>
 80027c0:	b110      	cbz	r0, 80027c8 <DBG_print+0x250>
 80027c2:	2d00      	cmp	r5, #0
 80027c4:	f47f af62 	bne.w	800268c <DBG_print+0x114>
	for (step = 0; step < 6; step++)
 80027c8:	3501      	adds	r5, #1
		DBG_print_u(integer, 0);
 80027ca:	2100      	movs	r1, #0
 80027cc:	4648      	mov	r0, r9
	for (step = 0; step < 6; step++)
 80027ce:	b2ed      	uxtb	r5, r5
		DBG_print_u(integer, 0);
 80027d0:	f7ff fe30 	bl	8002434 <DBG_print_u>
	for (step = 0; step < 6; step++)
 80027d4:	2d06      	cmp	r5, #6
 80027d6:	d1da      	bne.n	800278e <DBG_print+0x216>
 80027d8:	e758      	b.n	800268c <DBG_print+0x114>
	if (num < 0)
 80027da:	4628      	mov	r0, r5
 80027dc:	e7d0      	b.n	8002780 <DBG_print+0x208>
					DBG_print_hs(1, va_arg(vl, U8*), len);
 80027de:	9b01      	ldr	r3, [sp, #4]
 80027e0:	2001      	movs	r0, #1
 80027e2:	1d1a      	adds	r2, r3, #4
 80027e4:	9201      	str	r2, [sp, #4]
 80027e6:	6819      	ldr	r1, [r3, #0]
 80027e8:	462a      	mov	r2, r5
 80027ea:	e71f      	b.n	800262c <DBG_print+0xb4>
 80027ec:	20000094 	.word	0x20000094
 80027f0:	000f4241 	.word	0x000f4241
 80027f4:	40240000 	.word	0x40240000

080027f8 <printchar>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void printchar (uint8_t c)
{
 80027f8:	b507      	push	{r0, r1, r2, lr}
 80027fa:	a902      	add	r1, sp, #8
 80027fc:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_UART_Transmit(&huart2, &c, 1, 1000);
 8002800:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002804:	2201      	movs	r2, #1
 8002806:	4803      	ldr	r0, [pc, #12]	; (8002814 <printchar+0x1c>)
 8002808:	f7ff fcc6 	bl	8002198 <HAL_UART_Transmit>
}
 800280c:	b003      	add	sp, #12
 800280e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002812:	bf00      	nop
 8002814:	200000f4 	.word	0x200000f4

08002818 <spi_write>:

//Cac function phuc vu cho viec doc tin hieu nhiet do tu MAX31865
void spi_write(uint8_t *data, uint8_t len)
{
	HAL_SPI_Transmit(&hspi1, data, len, HAL_MAX_DELAY);
 8002818:	460a      	mov	r2, r1
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
 800281e:	4601      	mov	r1, r0
 8002820:	4801      	ldr	r0, [pc, #4]	; (8002828 <spi_write+0x10>)
 8002822:	f7ff b934 	b.w	8001a8e <HAL_SPI_Transmit>
 8002826:	bf00      	nop
 8002828:	2000009c 	.word	0x2000009c

0800282c <spi_read>:
}
void spi_read(uint8_t *buffer, uint8_t len)
{
	HAL_SPI_Receive(&hspi1, buffer, len, HAL_MAX_DELAY);
 800282c:	460a      	mov	r2, r1
 800282e:	f04f 33ff 	mov.w	r3, #4294967295
 8002832:	4601      	mov	r1, r0
 8002834:	4801      	ldr	r0, [pc, #4]	; (800283c <spi_read+0x10>)
 8002836:	f7ff bad0 	b.w	8001dda <HAL_SPI_Receive>
 800283a:	bf00      	nop
 800283c:	2000009c 	.word	0x2000009c

08002840 <MAX31865_read>:
}
void MAX31865_read(uint8_t addr, uint8_t *buffer, uint8_t len)
{
 8002840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002842:	ac02      	add	r4, sp, #8
 8002844:	f804 0d01 	strb.w	r0, [r4, #-1]!
 8002848:	460d      	mov	r5, r1
    addr &= ~MAX31865_READ;                                     // Force read bit on address

    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_RESET);          // Enable CE
 800284a:	480f      	ldr	r0, [pc, #60]	; (8002888 <MAX31865_read+0x48>)
 800284c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
 8002850:	4616      	mov	r6, r2
    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_RESET);          // Enable CE
 8002852:	2200      	movs	r2, #0
 8002854:	f7fe fe2c 	bl	80014b0 <HAL_GPIO_WritePin>
    spi_write(&addr, 1);                                        // Write addr
 8002858:	2101      	movs	r1, #1
 800285a:	4620      	mov	r0, r4
 800285c:	f7ff ffdc 	bl	8002818 <spi_write>
    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002860:	4f0a      	ldr	r7, [pc, #40]	; (800288c <MAX31865_read+0x4c>)
 8002862:	4638      	mov	r0, r7
 8002864:	f7ff fb58 	bl	8001f18 <HAL_SPI_GetState>
 8002868:	2801      	cmp	r0, #1
 800286a:	4604      	mov	r4, r0
 800286c:	d1f9      	bne.n	8002862 <MAX31865_read+0x22>
    spi_read(buffer, len);                                      // Read data
 800286e:	4631      	mov	r1, r6
 8002870:	4628      	mov	r0, r5
 8002872:	f7ff ffdb 	bl	800282c <spi_read>
    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_SET);         // Disable CE
 8002876:	4622      	mov	r2, r4
 8002878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800287c:	4802      	ldr	r0, [pc, #8]	; (8002888 <MAX31865_read+0x48>)
 800287e:	f7fe fe17 	bl	80014b0 <HAL_GPIO_WritePin>

}
 8002882:	b003      	add	sp, #12
 8002884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002886:	bf00      	nop
 8002888:	40010800 	.word	0x40010800
 800288c:	2000009c 	.word	0x2000009c

08002890 <MAX31865_write>:
void MAX31865_write(uint8_t addr, uint8_t data)
{
 8002890:	b537      	push	{r0, r1, r2, r4, r5, lr}
    addr |= MAX31865_WRITE;                                 // Force write bit on address

    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_RESET);      // Enable CE
 8002892:	4d0f      	ldr	r5, [pc, #60]	; (80028d0 <MAX31865_write+0x40>)
    addr |= MAX31865_WRITE;                                 // Force write bit on address
 8002894:	ac02      	add	r4, sp, #8
 8002896:	f060 007f 	orn	r0, r0, #127	; 0x7f
 800289a:	f804 0d01 	strb.w	r0, [r4, #-1]!
    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_RESET);      // Enable CE
 800289e:	2200      	movs	r2, #0
{
 80028a0:	f88d 1006 	strb.w	r1, [sp, #6]
    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_RESET);      // Enable CE
 80028a4:	4628      	mov	r0, r5
 80028a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028aa:	f7fe fe01 	bl	80014b0 <HAL_GPIO_WritePin>
    spi_write(&addr, 1);                                    // Write addr
 80028ae:	4620      	mov	r0, r4
 80028b0:	2101      	movs	r1, #1
 80028b2:	f7ff ffb1 	bl	8002818 <spi_write>
    spi_write(&data, 1);                                    // Write data
 80028b6:	f10d 0006 	add.w	r0, sp, #6
 80028ba:	2101      	movs	r1, #1
 80028bc:	f7ff ffac 	bl	8002818 <spi_write>
    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_SET);     // Disable CE
 80028c0:	2201      	movs	r2, #1
 80028c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028c6:	4628      	mov	r0, r5
 80028c8:	f7fe fdf2 	bl	80014b0 <HAL_GPIO_WritePin>
}
 80028cc:	b003      	add	sp, #12
 80028ce:	bd30      	pop	{r4, r5, pc}
 80028d0:	40010800 	.word	0x40010800
 80028d4:	00000000 	.word	0x00000000

080028d8 <temperature>:

float  temperature(float RTDnominal, float refResistor, float data) {
 80028d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028da:	460c      	mov	r4, r1
 80028dc:	4606      	mov	r6, r0

  float Z1, Z2, Z3, Z4, Rt, temp;

  Rt = data;
  Rt /= 32768;
 80028de:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80028e2:	4610      	mov	r0, r2
 80028e4:	f7fe fa22 	bl	8000d2c <__aeabi_fmul>
  Rt *= refResistor;
 80028e8:	4621      	mov	r1, r4
 80028ea:	f7fe fa1f 	bl	8000d2c <__aeabi_fmul>
 80028ee:	4605      	mov	r5, r0

  Z1 = -RTD_A;
  Z2 = RTD_A * RTD_A - (4 * RTD_B);
  Z3 = (4 * RTD_B) / RTDnominal;
 80028f0:	4630      	mov	r0, r6
 80028f2:	f7fd fd91 	bl	8000418 <__aeabi_f2d>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	a155      	add	r1, pc, #340	; (adr r1, 8002a50 <temperature+0x178>)
 80028fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002900:	f7fd ff08 	bl	8000714 <__aeabi_ddiv>
 8002904:	f7fe f8b4 	bl	8000a70 <__aeabi_d2f>
  Z4 = 2 * RTD_B;

  temp = Z2 + (Z3 * Rt);
 8002908:	4629      	mov	r1, r5
 800290a:	f7fe fa0f 	bl	8000d2c <__aeabi_fmul>
 800290e:	4962      	ldr	r1, [pc, #392]	; (8002a98 <temperature+0x1c0>)
 8002910:	f7fe f904 	bl	8000b1c <__addsf3>
  temp = (sqrt(temp) + Z1) / Z4;
 8002914:	f7fd fd80 	bl	8000418 <__aeabi_f2d>
 8002918:	f000 fb1a 	bl	8002f50 <sqrt>
 800291c:	a34e      	add	r3, pc, #312	; (adr r3, 8002a58 <temperature+0x180>)
 800291e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002922:	f7fd fc19 	bl	8000158 <__aeabi_dsub>
 8002926:	a34e      	add	r3, pc, #312	; (adr r3, 8002a60 <temperature+0x188>)
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	f7fd fef2 	bl	8000714 <__aeabi_ddiv>
 8002930:	f7fe f89e 	bl	8000a70 <__aeabi_d2f>

  if (temp >= 0) return temp;
 8002934:	2100      	movs	r1, #0
  temp = (sqrt(temp) + Z1) / Z4;
 8002936:	4604      	mov	r4, r0
  if (temp >= 0) return temp;
 8002938:	f7fe fbaa 	bl	8001090 <__aeabi_fcmpge>
 800293c:	2800      	cmp	r0, #0
 800293e:	f040 8085 	bne.w	8002a4c <temperature+0x174>

  // ugh.
  Rt /= RTDnominal;
 8002942:	4631      	mov	r1, r6
 8002944:	4628      	mov	r0, r5
 8002946:	f7fe faa5 	bl	8000e94 <__aeabi_fdiv>
  Rt *= 100;      // normalize to 100 ohm
 800294a:	4954      	ldr	r1, [pc, #336]	; (8002a9c <temperature+0x1c4>)
 800294c:	f7fe f9ee 	bl	8000d2c <__aeabi_fmul>

  float rpoly = Rt;

  temp = -242.02;
  temp += 2.2228 * rpoly;
  rpoly *= Rt;  // square
 8002950:	4601      	mov	r1, r0
  Rt *= 100;      // normalize to 100 ohm
 8002952:	4604      	mov	r4, r0
  rpoly *= Rt;  // square
 8002954:	f7fe f9ea 	bl	8000d2c <__aeabi_fmul>
 8002958:	4605      	mov	r5, r0
  temp += 2.2228 * rpoly;
 800295a:	4620      	mov	r0, r4
 800295c:	f7fd fd5c 	bl	8000418 <__aeabi_f2d>
 8002960:	a341      	add	r3, pc, #260	; (adr r3, 8002a68 <temperature+0x190>)
 8002962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002966:	f7fd fdab 	bl	80004c0 <__aeabi_dmul>
 800296a:	a341      	add	r3, pc, #260	; (adr r3, 8002a70 <temperature+0x198>)
 800296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002970:	f7fd fbf2 	bl	8000158 <__aeabi_dsub>
 8002974:	f7fe f87c 	bl	8000a70 <__aeabi_d2f>
  temp += 2.5859e-3 * rpoly;
 8002978:	f7fd fd4e 	bl	8000418 <__aeabi_f2d>
 800297c:	4606      	mov	r6, r0
 800297e:	4628      	mov	r0, r5
 8002980:	460f      	mov	r7, r1
 8002982:	f7fd fd49 	bl	8000418 <__aeabi_f2d>
 8002986:	a33c      	add	r3, pc, #240	; (adr r3, 8002a78 <temperature+0x1a0>)
 8002988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298c:	f7fd fd98 	bl	80004c0 <__aeabi_dmul>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4630      	mov	r0, r6
 8002996:	4639      	mov	r1, r7
 8002998:	f7fd fbe0 	bl	800015c <__adddf3>
 800299c:	4606      	mov	r6, r0
 800299e:	460f      	mov	r7, r1
  rpoly *= Rt;  // ^3
 80029a0:	4620      	mov	r0, r4
 80029a2:	4629      	mov	r1, r5
 80029a4:	f7fe f9c2 	bl	8000d2c <__aeabi_fmul>
  temp += 2.5859e-3 * rpoly;
 80029a8:	4639      	mov	r1, r7
  rpoly *= Rt;  // ^3
 80029aa:	4605      	mov	r5, r0
  temp += 2.5859e-3 * rpoly;
 80029ac:	4630      	mov	r0, r6
 80029ae:	f7fe f85f 	bl	8000a70 <__aeabi_d2f>
  temp -= 4.8260e-6 * rpoly;
 80029b2:	f7fd fd31 	bl	8000418 <__aeabi_f2d>
 80029b6:	4606      	mov	r6, r0
 80029b8:	4628      	mov	r0, r5
 80029ba:	460f      	mov	r7, r1
 80029bc:	f7fd fd2c 	bl	8000418 <__aeabi_f2d>
 80029c0:	a32f      	add	r3, pc, #188	; (adr r3, 8002a80 <temperature+0x1a8>)
 80029c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c6:	f7fd fd7b 	bl	80004c0 <__aeabi_dmul>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4630      	mov	r0, r6
 80029d0:	4639      	mov	r1, r7
 80029d2:	f7fd fbc1 	bl	8000158 <__aeabi_dsub>
 80029d6:	4606      	mov	r6, r0
 80029d8:	460f      	mov	r7, r1
  rpoly *= Rt;  // ^4
 80029da:	4620      	mov	r0, r4
 80029dc:	4629      	mov	r1, r5
 80029de:	f7fe f9a5 	bl	8000d2c <__aeabi_fmul>
  temp -= 4.8260e-6 * rpoly;
 80029e2:	4639      	mov	r1, r7
  rpoly *= Rt;  // ^4
 80029e4:	4605      	mov	r5, r0
  temp -= 4.8260e-6 * rpoly;
 80029e6:	4630      	mov	r0, r6
 80029e8:	f7fe f842 	bl	8000a70 <__aeabi_d2f>
  temp -= 2.8183e-8 * rpoly;
 80029ec:	f7fd fd14 	bl	8000418 <__aeabi_f2d>
 80029f0:	4606      	mov	r6, r0
 80029f2:	4628      	mov	r0, r5
 80029f4:	460f      	mov	r7, r1
 80029f6:	f7fd fd0f 	bl	8000418 <__aeabi_f2d>
 80029fa:	a323      	add	r3, pc, #140	; (adr r3, 8002a88 <temperature+0x1b0>)
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	f7fd fd5e 	bl	80004c0 <__aeabi_dmul>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4630      	mov	r0, r6
 8002a0a:	4639      	mov	r1, r7
 8002a0c:	f7fd fba4 	bl	8000158 <__aeabi_dsub>
 8002a10:	4606      	mov	r6, r0
 8002a12:	460f      	mov	r7, r1
  rpoly *= Rt;  // ^5
 8002a14:	4620      	mov	r0, r4
 8002a16:	4629      	mov	r1, r5
 8002a18:	f7fe f988 	bl	8000d2c <__aeabi_fmul>
  temp += 1.5243e-10 * rpoly;
 8002a1c:	f7fd fcfc 	bl	8000418 <__aeabi_f2d>
 8002a20:	a31b      	add	r3, pc, #108	; (adr r3, 8002a90 <temperature+0x1b8>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fd fd4b 	bl	80004c0 <__aeabi_dmul>
 8002a2a:	4604      	mov	r4, r0
 8002a2c:	460d      	mov	r5, r1
  temp -= 2.8183e-8 * rpoly;
 8002a2e:	4630      	mov	r0, r6
 8002a30:	4639      	mov	r1, r7
 8002a32:	f7fe f81d 	bl	8000a70 <__aeabi_d2f>
  temp += 1.5243e-10 * rpoly;
 8002a36:	f7fd fcef 	bl	8000418 <__aeabi_f2d>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4620      	mov	r0, r4
 8002a40:	4629      	mov	r1, r5
 8002a42:	f7fd fb8b 	bl	800015c <__adddf3>
 8002a46:	f7fe f813 	bl	8000a70 <__aeabi_d2f>
 8002a4a:	4604      	mov	r4, r0

  return temp;
}
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a50:	ee19ce88 	.word	0xee19ce88
 8002a54:	bec360af 	.word	0xbec360af
 8002a58:	40000000 	.word	0x40000000
 8002a5c:	3f700226 	.word	0x3f700226
 8002a60:	e0000000 	.word	0xe0000000
 8002a64:	beb360af 	.word	0xbeb360af
 8002a68:	5dcc63f1 	.word	0x5dcc63f1
 8002a6c:	4001c84b 	.word	0x4001c84b
 8002a70:	e0000000 	.word	0xe0000000
 8002a74:	406e40a3 	.word	0x406e40a3
 8002a78:	7dc882bb 	.word	0x7dc882bb
 8002a7c:	3f652f06 	.word	0x3f652f06
 8002a80:	c766c293 	.word	0xc766c293
 8002a84:	3ed43de0 	.word	0x3ed43de0
 8002a88:	513156ce 	.word	0x513156ce
 8002a8c:	3e5e42e2 	.word	0x3e5e42e2
 8002a90:	61e4fa3e 	.word	0x61e4fa3e
 8002a94:	3de4f327 	.word	0x3de4f327
 8002a98:	37938317 	.word	0x37938317
 8002a9c:	42c80000 	.word	0x42c80000

08002aa0 <MAX31865_readTemp>:

float MAX31865_readTemp()
{
 8002aa0:	b507      	push	{r0, r1, r2, lr}
	MAX31865_write(0, 0xB2);
 8002aa2:	21b2      	movs	r1, #178	; 0xb2
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f7ff fef3 	bl	8002890 <MAX31865_write>
	HAL_Delay(100);
 8002aaa:	2064      	movs	r0, #100	; 0x64
 8002aac:	f7fe fb4c 	bl	8001148 <HAL_Delay>

    // Read data from max31865 data registers
    uint8_t max3[2];
    MAX31865_read(MAX31856_RTDMSB_REG, max3, 2);
 8002ab0:	a901      	add	r1, sp, #4
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	f7ff fec3 	bl	8002840 <MAX31865_read>
 8002aba:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002abe:	ba40      	rev16	r0, r0
    data |= max3[1];
    data >>= 1;
//  DBG_print("data=%02x \r\n",data);

    // Calculate the temperature from the measured resistance
    float temp = temperature(100, RREF, (float) data );
 8002ac0:	f3c0 004e 	ubfx	r0, r0, #1, #15
 8002ac4:	f7fe f8da 	bl	8000c7c <__aeabi_ui2f>
 8002ac8:	4903      	ldr	r1, [pc, #12]	; (8002ad8 <MAX31865_readTemp+0x38>)
 8002aca:	4602      	mov	r2, r0
 8002acc:	4803      	ldr	r0, [pc, #12]	; (8002adc <MAX31865_readTemp+0x3c>)
 8002ace:	f7ff ff03 	bl	80028d8 <temperature>

    return temp;
}
 8002ad2:	b003      	add	sp, #12
 8002ad4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ad8:	43d70000 	.word	0x43d70000
 8002adc:	42c80000 	.word	0x42c80000

08002ae0 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ae0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8002ae4:	b510      	push	{r4, lr}
 8002ae6:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ae8:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002aea:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002aec:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aee:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002af0:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002af2:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002af4:	f7fe fce2 	bl	80014bc <HAL_RCC_OscConfig>
 8002af8:	4601      	mov	r1, r0
 8002afa:	b100      	cbz	r0, 8002afe <SystemClock_Config+0x1e>
 8002afc:	e7fe      	b.n	8002afc <SystemClock_Config+0x1c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002afe:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b00:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b02:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b04:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b06:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002b08:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b0a:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b0c:	f7fe fe9e 	bl	800184c <HAL_RCC_ClockConfig>
 8002b10:	4604      	mov	r4, r0
 8002b12:	b100      	cbz	r0, 8002b16 <SystemClock_Config+0x36>
 8002b14:	e7fe      	b.n	8002b14 <SystemClock_Config+0x34>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002b16:	f7fe ff3d 	bl	8001994 <HAL_RCC_GetHCLKFreq>
 8002b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b1e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b22:	f7fe fb75 	bl	8001210 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b26:	2004      	movs	r0, #4
 8002b28:	f7fe fb88 	bl	800123c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002b2c:	4622      	mov	r2, r4
 8002b2e:	4621      	mov	r1, r4
 8002b30:	f04f 30ff 	mov.w	r0, #4294967295
 8002b34:	f7fe fb2c 	bl	8001190 <HAL_NVIC_SetPriority>
}
 8002b38:	b010      	add	sp, #64	; 0x40
 8002b3a:	bd10      	pop	{r4, pc}

08002b3c <main>:
{
 8002b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3e:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8002b40:	f7fe fade 	bl	8001100 <HAL_Init>
  SystemClock_Config();
 8002b44:	f7ff ffcc 	bl	8002ae0 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b48:	4b58      	ldr	r3, [pc, #352]	; (8002cac <main+0x170>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b4e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002b50:	4857      	ldr	r0, [pc, #348]	; (8002cb0 <main+0x174>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b52:	f042 0220 	orr.w	r2, r2, #32
 8002b56:	619a      	str	r2, [r3, #24]
 8002b58:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5a:	2401      	movs	r4, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b5c:	f002 0220 	and.w	r2, r2, #32
 8002b60:	9201      	str	r2, [sp, #4]
 8002b62:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b64:	699a      	ldr	r2, [r3, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b66:	f44f 7782 	mov.w	r7, #260	; 0x104
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6a:	f042 0204 	orr.w	r2, r2, #4
 8002b6e:	619a      	str	r2, [r3, #24]
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	f002 0204 	and.w	r2, r2, #4
 8002b76:	9202      	str	r2, [sp, #8]
 8002b78:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7a:	699a      	ldr	r2, [r3, #24]
 8002b7c:	f042 0208 	orr.w	r2, r2, #8
 8002b80:	619a      	str	r2, [r3, #24]
 8002b82:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002b84:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	9303      	str	r3, [sp, #12]
 8002b8c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002b8e:	f7fe fc8f 	bl	80014b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002b92:	2200      	movs	r2, #0
 8002b94:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002b98:	4846      	ldr	r0, [pc, #280]	; (8002cb4 <main+0x178>)
 8002b9a:	f7fe fc89 	bl	80014b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ba4:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba6:	a904      	add	r1, sp, #16
 8002ba8:	4841      	ldr	r0, [pc, #260]	; (8002cb0 <main+0x174>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002baa:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bac:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bae:	f7fe fb9f 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bb6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bba:	483e      	ldr	r0, [pc, #248]	; (8002cb4 <main+0x178>)
 8002bbc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bbe:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc2:	f7fe fb95 	bl	80012f0 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 8002bc6:	483c      	ldr	r0, [pc, #240]	; (8002cb8 <main+0x17c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bc8:	4b3c      	ldr	r3, [pc, #240]	; (8002cbc <main+0x180>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bca:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bce:	e880 0088 	stmia.w	r0, {r3, r7}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bd2:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bd4:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bd6:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bd8:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bda:	6103      	str	r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002bdc:	2238      	movs	r2, #56	; 0x38
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bde:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002be0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002be4:	230a      	movs	r3, #10
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002be6:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002be8:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 8002bea:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bec:	f7ff f997 	bl	8001f1e <HAL_SPI_Init>
 8002bf0:	b100      	cbz	r0, 8002bf4 <main+0xb8>
 8002bf2:	e7fe      	b.n	8002bf2 <main+0xb6>
  huart2.Init.BaudRate = 9600;
 8002bf4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  huart2.Instance = USART2;
 8002bf8:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <main+0x184>)
  huart2.Init.BaudRate = 9600;
 8002bfa:	4932      	ldr	r1, [pc, #200]	; (8002cc4 <main+0x188>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bfc:	6098      	str	r0, [r3, #8]
  huart2.Init.BaudRate = 9600;
 8002bfe:	e883 0006 	stmia.w	r3, {r1, r2}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c02:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c04:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c06:	6118      	str	r0, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c08:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c0a:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c0c:	4618      	mov	r0, r3
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c0e:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c10:	f7ff fa94 	bl	800213c <HAL_UART_Init>
 8002c14:	b100      	cbz	r0, 8002c18 <main+0xdc>
 8002c16:	e7fe      	b.n	8002c16 <main+0xda>
  DBG_setup(printchar);
 8002c18:	482b      	ldr	r0, [pc, #172]	; (8002cc8 <main+0x18c>)
 8002c1a:	f7ff fc9d 	bl	8002558 <DBG_setup>
	  if (temp > 0 && temp < 850) {
 8002c1e:	2500      	movs	r5, #0
	  } else if (temp > -200 && temp < 0) {
 8002c20:	4e2a      	ldr	r6, [pc, #168]	; (8002ccc <main+0x190>)
	  if (temp > 0 && temp < 850) {
 8002c22:	4f2b      	ldr	r7, [pc, #172]	; (8002cd0 <main+0x194>)
	  float temp = MAX31865_readTemp();
 8002c24:	f7ff ff3c 	bl	8002aa0 <MAX31865_readTemp>
	  if (temp > 0 && temp < 850) {
 8002c28:	4629      	mov	r1, r5
	  float temp = MAX31865_readTemp();
 8002c2a:	4604      	mov	r4, r0
	  if (temp > 0 && temp < 850) {
 8002c2c:	f7fe fa3a 	bl	80010a4 <__aeabi_fcmpgt>
 8002c30:	b1e8      	cbz	r0, 8002c6e <main+0x132>
 8002c32:	4639      	mov	r1, r7
 8002c34:	4620      	mov	r0, r4
 8002c36:	f7fe fa17 	bl	8001068 <__aeabi_fcmplt>
 8002c3a:	b1c0      	cbz	r0, 8002c6e <main+0x132>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);	//Led Do sang
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c42:	481c      	ldr	r0, [pc, #112]	; (8002cb4 <main+0x178>)
 8002c44:	f7fe fc34 	bl	80014b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);	//Led Xanh tat
 8002c48:	2200      	movs	r2, #0
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);	//Led Xanh sang
 8002c4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c4e:	4819      	ldr	r0, [pc, #100]	; (8002cb4 <main+0x178>)
 8002c50:	f7fe fc2e 	bl	80014b0 <HAL_GPIO_WritePin>
			  DBG_print("$%f \r\n",temp);
 8002c54:	4620      	mov	r0, r4
 8002c56:	f7fd fbdf 	bl	8000418 <__aeabi_f2d>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	481d      	ldr	r0, [pc, #116]	; (8002cd4 <main+0x198>)
 8002c60:	f7ff fc8a 	bl	8002578 <DBG_print>
	  HAL_Delay(1000);
 8002c64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c68:	f7fe fa6e 	bl	8001148 <HAL_Delay>
  {
 8002c6c:	e7da      	b.n	8002c24 <main+0xe8>
	  } else if (temp > -200 && temp < 0) {
 8002c6e:	4631      	mov	r1, r6
 8002c70:	4620      	mov	r0, r4
 8002c72:	f7fe fa17 	bl	80010a4 <__aeabi_fcmpgt>
 8002c76:	b160      	cbz	r0, 8002c92 <main+0x156>
 8002c78:	4629      	mov	r1, r5
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	f7fe f9f4 	bl	8001068 <__aeabi_fcmplt>
 8002c80:	b138      	cbz	r0, 8002c92 <main+0x156>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);	//Led Do tat
 8002c82:	2200      	movs	r2, #0
 8002c84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c88:	480a      	ldr	r0, [pc, #40]	; (8002cb4 <main+0x178>)
 8002c8a:	f7fe fc11 	bl	80014b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);	//Led Xanh sang
 8002c8e:	2201      	movs	r2, #1
 8002c90:	e7db      	b.n	8002c4a <main+0x10e>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002c92:	2200      	movs	r2, #0
 8002c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c98:	4806      	ldr	r0, [pc, #24]	; (8002cb4 <main+0x178>)
 8002c9a:	f7fe fc09 	bl	80014b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ca4:	4803      	ldr	r0, [pc, #12]	; (8002cb4 <main+0x178>)
 8002ca6:	f7fe fc03 	bl	80014b0 <HAL_GPIO_WritePin>
 8002caa:	e7db      	b.n	8002c64 <main+0x128>
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40010800 	.word	0x40010800
 8002cb4:	40010c00 	.word	0x40010c00
 8002cb8:	2000009c 	.word	0x2000009c
 8002cbc:	40013000 	.word	0x40013000
 8002cc0:	200000f4 	.word	0x200000f4
 8002cc4:	40004400 	.word	0x40004400
 8002cc8:	080027f9 	.word	0x080027f9
 8002ccc:	c3480000 	.word	0xc3480000
 8002cd0:	44548000 	.word	0x44548000
 8002cd4:	08003188 	.word	0x08003188

08002cd8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cd8:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <HAL_MspInit+0x84>)
{
 8002cda:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cdc:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cde:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ce0:	f042 0201 	orr.w	r2, r2, #1
 8002ce4:	619a      	str	r2, [r3, #24]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf0:	f7fe fa3c 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f06f 000b 	mvn.w	r0, #11
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	f7fe fa48 	bl	8001190 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002d00:	2200      	movs	r2, #0
 8002d02:	f06f 000a 	mvn.w	r0, #10
 8002d06:	4611      	mov	r1, r2
 8002d08:	f7fe fa42 	bl	8001190 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f06f 0009 	mvn.w	r0, #9
 8002d12:	4611      	mov	r1, r2
 8002d14:	f7fe fa3c 	bl	8001190 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f06f 0004 	mvn.w	r0, #4
 8002d1e:	4611      	mov	r1, r2
 8002d20:	f7fe fa36 	bl	8001190 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002d24:	2200      	movs	r2, #0
 8002d26:	f06f 0003 	mvn.w	r0, #3
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	f7fe fa30 	bl	8001190 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002d30:	2200      	movs	r2, #0
 8002d32:	f06f 0001 	mvn.w	r0, #1
 8002d36:	4611      	mov	r1, r2
 8002d38:	f7fe fa2a 	bl	8001190 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d42:	4611      	mov	r1, r2
 8002d44:	f7fe fa24 	bl	8001190 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d48:	4a05      	ldr	r2, [pc, #20]	; (8002d60 <HAL_MspInit+0x88>)
 8002d4a:	6853      	ldr	r3, [r2, #4]
 8002d4c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d56:	b003      	add	sp, #12
 8002d58:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40010000 	.word	0x40010000

08002d64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8002d66:	6802      	ldr	r2, [r0, #0]
 8002d68:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <HAL_SPI_MspInit+0x5c>)
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d124      	bne.n	8002db8 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d6e:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8002d72:	699a      	ldr	r2, [r3, #24]
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d74:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d7a:	619a      	str	r2, [r3, #24]
 8002d7c:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7e:	4811      	ldr	r0, [pc, #68]	; (8002dc4 <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d84:	9301      	str	r3, [sp, #4]
 8002d86:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002d88:	2328      	movs	r3, #40	; 0x28
 8002d8a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d90:	2303      	movs	r3, #3
 8002d92:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d94:	f7fe faac 	bl	80012f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002d98:	2310      	movs	r3, #16
 8002d9a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d9c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9e:	a902      	add	r1, sp, #8
 8002da0:	4808      	ldr	r0, [pc, #32]	; (8002dc4 <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002da2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da6:	f7fe faa3 	bl	80012f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002daa:	4a07      	ldr	r2, [pc, #28]	; (8002dc8 <HAL_SPI_MspInit+0x64>)
 8002dac:	6853      	ldr	r3, [r2, #4]
 8002dae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002db8:	b007      	add	sp, #28
 8002dba:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dbe:	bf00      	nop
 8002dc0:	40013000 	.word	0x40013000
 8002dc4:	40010c00 	.word	0x40010c00
 8002dc8:	40010000 	.word	0x40010000

08002dcc <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dcc:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8002dce:	6802      	ldr	r2, [r0, #0]
 8002dd0:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <HAL_UART_MspInit+0x60>)
{
 8002dd2:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d126      	bne.n	8002e26 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dd8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002ddc:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dde:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8002de0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002de4:	61da      	str	r2, [r3, #28]
 8002de6:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de8:	4811      	ldr	r0, [pc, #68]	; (8002e30 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	9301      	str	r3, [sp, #4]
 8002df0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002df2:	2304      	movs	r3, #4
 8002df4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	2302      	movs	r3, #2
 8002df8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfe:	f7fe fa77 	bl	80012f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e02:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e04:	2400      	movs	r4, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e06:	eb0d 0103 	add.w	r1, sp, r3
 8002e0a:	4809      	ldr	r0, [pc, #36]	; (8002e30 <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e0c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e0e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e12:	f7fe fa6d 	bl	80012f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e16:	2026      	movs	r0, #38	; 0x26
 8002e18:	4622      	mov	r2, r4
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	f7fe f9b8 	bl	8001190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e20:	2026      	movs	r0, #38	; 0x26
 8002e22:	f7fe f9e9 	bl	80011f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e26:	b006      	add	sp, #24
 8002e28:	bd10      	pop	{r4, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40004400 	.word	0x40004400
 8002e30:	40010800 	.word	0x40010800

08002e34 <NMI_Handler>:
 8002e34:	4770      	bx	lr

08002e36 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002e36:	e7fe      	b.n	8002e36 <HardFault_Handler>

08002e38 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002e38:	e7fe      	b.n	8002e38 <MemManage_Handler>

08002e3a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002e3a:	e7fe      	b.n	8002e3a <BusFault_Handler>

08002e3c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002e3c:	e7fe      	b.n	8002e3c <UsageFault_Handler>

08002e3e <SVC_Handler>:
 8002e3e:	4770      	bx	lr

08002e40 <DebugMon_Handler>:
 8002e40:	4770      	bx	lr

08002e42 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002e42:	4770      	bx	lr

08002e44 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002e44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e46:	f7fe f96d 	bl	8001124 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002e4e:	f7fe ba02 	b.w	8001256 <HAL_SYSTICK_IRQHandler>
	...

08002e54 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e54:	4801      	ldr	r0, [pc, #4]	; (8002e5c <USART2_IRQHandler+0x8>)
 8002e56:	f7ff ba3d 	b.w	80022d4 <HAL_UART_IRQHandler>
 8002e5a:	bf00      	nop
 8002e5c:	200000f4 	.word	0x200000f4

08002e60 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002e60:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <SystemInit+0x40>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	f042 0201 	orr.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002e6a:	6859      	ldr	r1, [r3, #4]
 8002e6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ea4 <SystemInit+0x44>)
 8002e6e:	400a      	ands	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002e78:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e7c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e84:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002e8c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002e8e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002e92:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002e94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <SystemInit+0x48>)
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	f8ff0000 	.word	0xf8ff0000
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002eac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002eae:	e003      	b.n	8002eb8 <LoopCopyDataInit>

08002eb0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002eb2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002eb4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002eb6:	3104      	adds	r1, #4

08002eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002eb8:	480a      	ldr	r0, [pc, #40]	; (8002ee4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002eba:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002ebc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002ebe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002ec0:	d3f6      	bcc.n	8002eb0 <CopyDataInit>
  ldr r2, =_sbss
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002ec4:	e002      	b.n	8002ecc <LoopFillZerobss>

08002ec6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002ec6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002ec8:	f842 3b04 	str.w	r3, [r2], #4

08002ecc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ecc:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002ece:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ed0:	d3f9      	bcc.n	8002ec6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ed2:	f7ff ffc5 	bl	8002e60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ed6:	f000 f80f 	bl	8002ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002eda:	f7ff fe2f 	bl	8002b3c <main>
  bx lr
 8002ede:	4770      	bx	lr
  ldr r3, =_sidata
 8002ee0:	080031b4 	.word	0x080031b4
  ldr r0, =_sdata
 8002ee4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002ee8:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8002eec:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8002ef0:	20000134 	.word	0x20000134

08002ef4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ef4:	e7fe      	b.n	8002ef4 <ADC1_2_IRQHandler>
	...

08002ef8 <__libc_init_array>:
 8002ef8:	b570      	push	{r4, r5, r6, lr}
 8002efa:	2500      	movs	r5, #0
 8002efc:	4e0c      	ldr	r6, [pc, #48]	; (8002f30 <__libc_init_array+0x38>)
 8002efe:	4c0d      	ldr	r4, [pc, #52]	; (8002f34 <__libc_init_array+0x3c>)
 8002f00:	1ba4      	subs	r4, r4, r6
 8002f02:	10a4      	asrs	r4, r4, #2
 8002f04:	42a5      	cmp	r5, r4
 8002f06:	d109      	bne.n	8002f1c <__libc_init_array+0x24>
 8002f08:	f000 f92a 	bl	8003160 <_init>
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	4e0a      	ldr	r6, [pc, #40]	; (8002f38 <__libc_init_array+0x40>)
 8002f10:	4c0a      	ldr	r4, [pc, #40]	; (8002f3c <__libc_init_array+0x44>)
 8002f12:	1ba4      	subs	r4, r4, r6
 8002f14:	10a4      	asrs	r4, r4, #2
 8002f16:	42a5      	cmp	r5, r4
 8002f18:	d105      	bne.n	8002f26 <__libc_init_array+0x2e>
 8002f1a:	bd70      	pop	{r4, r5, r6, pc}
 8002f1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f20:	4798      	blx	r3
 8002f22:	3501      	adds	r5, #1
 8002f24:	e7ee      	b.n	8002f04 <__libc_init_array+0xc>
 8002f26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f2a:	4798      	blx	r3
 8002f2c:	3501      	adds	r5, #1
 8002f2e:	e7f2      	b.n	8002f16 <__libc_init_array+0x1e>
 8002f30:	080031ac 	.word	0x080031ac
 8002f34:	080031ac 	.word	0x080031ac
 8002f38:	080031ac 	.word	0x080031ac
 8002f3c:	080031b0 	.word	0x080031b0

08002f40 <memset>:
 8002f40:	4603      	mov	r3, r0
 8002f42:	4402      	add	r2, r0
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d100      	bne.n	8002f4a <memset+0xa>
 8002f48:	4770      	bx	lr
 8002f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f4e:	e7f9      	b.n	8002f44 <memset+0x4>

08002f50 <sqrt>:
 8002f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f54:	b08b      	sub	sp, #44	; 0x2c
 8002f56:	4604      	mov	r4, r0
 8002f58:	460d      	mov	r5, r1
 8002f5a:	f000 f84d 	bl	8002ff8 <__ieee754_sqrt>
 8002f5e:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <sqrt+0xa0>)
 8002f60:	4680      	mov	r8, r0
 8002f62:	f993 a000 	ldrsb.w	sl, [r3]
 8002f66:	4689      	mov	r9, r1
 8002f68:	f1ba 3fff 	cmp.w	sl, #4294967295
 8002f6c:	d02b      	beq.n	8002fc6 <sqrt+0x76>
 8002f6e:	4622      	mov	r2, r4
 8002f70:	462b      	mov	r3, r5
 8002f72:	4620      	mov	r0, r4
 8002f74:	4629      	mov	r1, r5
 8002f76:	f7fd fd3d 	bl	80009f4 <__aeabi_dcmpun>
 8002f7a:	4683      	mov	fp, r0
 8002f7c:	bb18      	cbnz	r0, 8002fc6 <sqrt+0x76>
 8002f7e:	2600      	movs	r6, #0
 8002f80:	2700      	movs	r7, #0
 8002f82:	4632      	mov	r2, r6
 8002f84:	463b      	mov	r3, r7
 8002f86:	4620      	mov	r0, r4
 8002f88:	4629      	mov	r1, r5
 8002f8a:	f7fd fd0b 	bl	80009a4 <__aeabi_dcmplt>
 8002f8e:	b1d0      	cbz	r0, 8002fc6 <sqrt+0x76>
 8002f90:	2301      	movs	r3, #1
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	4b17      	ldr	r3, [pc, #92]	; (8002ff4 <sqrt+0xa4>)
 8002f96:	f8cd b020 	str.w	fp, [sp, #32]
 8002f9a:	9301      	str	r3, [sp, #4]
 8002f9c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002fa0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002fa4:	f1ba 0f00 	cmp.w	sl, #0
 8002fa8:	d112      	bne.n	8002fd0 <sqrt+0x80>
 8002faa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8002fae:	4668      	mov	r0, sp
 8002fb0:	f000 f8ce 	bl	8003150 <matherr>
 8002fb4:	b1b8      	cbz	r0, 8002fe6 <sqrt+0x96>
 8002fb6:	9b08      	ldr	r3, [sp, #32]
 8002fb8:	b11b      	cbz	r3, 8002fc2 <sqrt+0x72>
 8002fba:	f000 f8cb 	bl	8003154 <__errno>
 8002fbe:	9b08      	ldr	r3, [sp, #32]
 8002fc0:	6003      	str	r3, [r0, #0]
 8002fc2:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8002fc6:	4640      	mov	r0, r8
 8002fc8:	4649      	mov	r1, r9
 8002fca:	b00b      	add	sp, #44	; 0x2c
 8002fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fd0:	4632      	mov	r2, r6
 8002fd2:	463b      	mov	r3, r7
 8002fd4:	4630      	mov	r0, r6
 8002fd6:	4639      	mov	r1, r7
 8002fd8:	f7fd fb9c 	bl	8000714 <__aeabi_ddiv>
 8002fdc:	f1ba 0f02 	cmp.w	sl, #2
 8002fe0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002fe4:	d1e3      	bne.n	8002fae <sqrt+0x5e>
 8002fe6:	f000 f8b5 	bl	8003154 <__errno>
 8002fea:	2321      	movs	r3, #33	; 0x21
 8002fec:	6003      	str	r3, [r0, #0]
 8002fee:	e7e2      	b.n	8002fb6 <sqrt+0x66>
 8002ff0:	2000000c 	.word	0x2000000c
 8002ff4:	080031a7 	.word	0x080031a7

08002ff8 <__ieee754_sqrt>:
 8002ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ffc:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800314c <__ieee754_sqrt+0x154>
 8003000:	4606      	mov	r6, r0
 8003002:	ea3e 0e01 	bics.w	lr, lr, r1
 8003006:	460d      	mov	r5, r1
 8003008:	4607      	mov	r7, r0
 800300a:	460a      	mov	r2, r1
 800300c:	460c      	mov	r4, r1
 800300e:	4603      	mov	r3, r0
 8003010:	d10f      	bne.n	8003032 <__ieee754_sqrt+0x3a>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	f7fd fa53 	bl	80004c0 <__aeabi_dmul>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4630      	mov	r0, r6
 8003020:	4629      	mov	r1, r5
 8003022:	f7fd f89b 	bl	800015c <__adddf3>
 8003026:	4606      	mov	r6, r0
 8003028:	460d      	mov	r5, r1
 800302a:	4630      	mov	r0, r6
 800302c:	4629      	mov	r1, r5
 800302e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003032:	2900      	cmp	r1, #0
 8003034:	dc0e      	bgt.n	8003054 <__ieee754_sqrt+0x5c>
 8003036:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800303a:	ea5e 0707 	orrs.w	r7, lr, r7
 800303e:	d0f4      	beq.n	800302a <__ieee754_sqrt+0x32>
 8003040:	b141      	cbz	r1, 8003054 <__ieee754_sqrt+0x5c>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	f7fd f887 	bl	8000158 <__aeabi_dsub>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	f7fd fb61 	bl	8000714 <__aeabi_ddiv>
 8003052:	e7e8      	b.n	8003026 <__ieee754_sqrt+0x2e>
 8003054:	1512      	asrs	r2, r2, #20
 8003056:	d10c      	bne.n	8003072 <__ieee754_sqrt+0x7a>
 8003058:	2c00      	cmp	r4, #0
 800305a:	d06e      	beq.n	800313a <__ieee754_sqrt+0x142>
 800305c:	2100      	movs	r1, #0
 800305e:	02e6      	lsls	r6, r4, #11
 8003060:	d56f      	bpl.n	8003142 <__ieee754_sqrt+0x14a>
 8003062:	1e48      	subs	r0, r1, #1
 8003064:	1a12      	subs	r2, r2, r0
 8003066:	f1c1 0020 	rsb	r0, r1, #32
 800306a:	fa23 f000 	lsr.w	r0, r3, r0
 800306e:	4304      	orrs	r4, r0
 8003070:	408b      	lsls	r3, r1
 8003072:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003076:	07d5      	lsls	r5, r2, #31
 8003078:	f04f 0500 	mov.w	r5, #0
 800307c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003080:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8003084:	bf42      	ittt	mi
 8003086:	0064      	lslmi	r4, r4, #1
 8003088:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 800308c:	005b      	lslmi	r3, r3, #1
 800308e:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 8003092:	1050      	asrs	r0, r2, #1
 8003094:	4421      	add	r1, r4
 8003096:	2216      	movs	r2, #22
 8003098:	462c      	mov	r4, r5
 800309a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	19a7      	adds	r7, r4, r6
 80030a2:	428f      	cmp	r7, r1
 80030a4:	bfde      	ittt	le
 80030a6:	1bc9      	suble	r1, r1, r7
 80030a8:	19bc      	addle	r4, r7, r6
 80030aa:	19ad      	addle	r5, r5, r6
 80030ac:	0049      	lsls	r1, r1, #1
 80030ae:	3a01      	subs	r2, #1
 80030b0:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80030b4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80030b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80030bc:	d1f0      	bne.n	80030a0 <__ieee754_sqrt+0xa8>
 80030be:	f04f 0e20 	mov.w	lr, #32
 80030c2:	4694      	mov	ip, r2
 80030c4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80030c8:	42a1      	cmp	r1, r4
 80030ca:	eb06 070c 	add.w	r7, r6, ip
 80030ce:	dc02      	bgt.n	80030d6 <__ieee754_sqrt+0xde>
 80030d0:	d112      	bne.n	80030f8 <__ieee754_sqrt+0x100>
 80030d2:	429f      	cmp	r7, r3
 80030d4:	d810      	bhi.n	80030f8 <__ieee754_sqrt+0x100>
 80030d6:	2f00      	cmp	r7, #0
 80030d8:	eb07 0c06 	add.w	ip, r7, r6
 80030dc:	da34      	bge.n	8003148 <__ieee754_sqrt+0x150>
 80030de:	f1bc 0f00 	cmp.w	ip, #0
 80030e2:	db31      	blt.n	8003148 <__ieee754_sqrt+0x150>
 80030e4:	f104 0801 	add.w	r8, r4, #1
 80030e8:	1b09      	subs	r1, r1, r4
 80030ea:	4644      	mov	r4, r8
 80030ec:	429f      	cmp	r7, r3
 80030ee:	bf88      	it	hi
 80030f0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80030f4:	1bdb      	subs	r3, r3, r7
 80030f6:	4432      	add	r2, r6
 80030f8:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 80030fc:	f1be 0e01 	subs.w	lr, lr, #1
 8003100:	4439      	add	r1, r7
 8003102:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003106:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800310a:	d1dd      	bne.n	80030c8 <__ieee754_sqrt+0xd0>
 800310c:	430b      	orrs	r3, r1
 800310e:	d006      	beq.n	800311e <__ieee754_sqrt+0x126>
 8003110:	1c54      	adds	r4, r2, #1
 8003112:	bf0b      	itete	eq
 8003114:	4672      	moveq	r2, lr
 8003116:	3201      	addne	r2, #1
 8003118:	3501      	addeq	r5, #1
 800311a:	f022 0201 	bicne.w	r2, r2, #1
 800311e:	106b      	asrs	r3, r5, #1
 8003120:	0852      	lsrs	r2, r2, #1
 8003122:	07e9      	lsls	r1, r5, #31
 8003124:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003128:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800312c:	bf48      	it	mi
 800312e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003132:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 8003136:	4616      	mov	r6, r2
 8003138:	e777      	b.n	800302a <__ieee754_sqrt+0x32>
 800313a:	0adc      	lsrs	r4, r3, #11
 800313c:	3a15      	subs	r2, #21
 800313e:	055b      	lsls	r3, r3, #21
 8003140:	e78a      	b.n	8003058 <__ieee754_sqrt+0x60>
 8003142:	0064      	lsls	r4, r4, #1
 8003144:	3101      	adds	r1, #1
 8003146:	e78a      	b.n	800305e <__ieee754_sqrt+0x66>
 8003148:	46a0      	mov	r8, r4
 800314a:	e7cd      	b.n	80030e8 <__ieee754_sqrt+0xf0>
 800314c:	7ff00000 	.word	0x7ff00000

08003150 <matherr>:
 8003150:	2000      	movs	r0, #0
 8003152:	4770      	bx	lr

08003154 <__errno>:
 8003154:	4b01      	ldr	r3, [pc, #4]	; (800315c <__errno+0x8>)
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	20000010 	.word	0x20000010

08003160 <_init>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	bf00      	nop
 8003164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003166:	bc08      	pop	{r3}
 8003168:	469e      	mov	lr, r3
 800316a:	4770      	bx	lr

0800316c <_fini>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	bf00      	nop
 8003170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003172:	bc08      	pop	{r3}
 8003174:	469e      	mov	lr, r3
 8003176:	4770      	bx	lr
