
PT100_Max31865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045c0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080046d0  080046d0  000146d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800487c  0800487c  0001487c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004880  08004880  00014880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e4  20000000  08004884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002e0  200001e4  08004a68  000201e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200004c4  08004a68  000204c4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001122a  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002863  00000000  00000000  00031437  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000590d  00000000  00000000  00033c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000798  00000000  00000000  000395a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b00  00000000  00000000  00039d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004c73  00000000  00000000  0003a840  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000029c7  00000000  00000000  0003f4b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00041e7a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001e60  00000000  00000000  00041ef8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080046b8 	.word	0x080046b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080046b8 	.word	0x080046b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2f>:
 8000a80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a88:	bf24      	itt	cs
 8000a8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a92:	d90d      	bls.n	8000ab0 <__aeabi_d2f+0x30>
 8000a94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa8:	bf08      	it	eq
 8000aaa:	f020 0001 	biceq.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab4:	d121      	bne.n	8000afa <__aeabi_d2f+0x7a>
 8000ab6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aba:	bfbc      	itt	lt
 8000abc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	4770      	bxlt	lr
 8000ac2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aca:	f1c2 0218 	rsb	r2, r2, #24
 8000ace:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad6:	fa20 f002 	lsr.w	r0, r0, r2
 8000ada:	bf18      	it	ne
 8000adc:	f040 0001 	orrne.w	r0, r0, #1
 8000ae0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aec:	ea40 000c 	orr.w	r0, r0, ip
 8000af0:	fa23 f302 	lsr.w	r3, r3, r2
 8000af4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af8:	e7cc      	b.n	8000a94 <__aeabi_d2f+0x14>
 8000afa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afe:	d107      	bne.n	8000b10 <__aeabi_d2f+0x90>
 8000b00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b04:	bf1e      	ittt	ne
 8000b06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0e:	4770      	bxne	lr
 8000b10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_frsub>:
 8000b20:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b24:	e002      	b.n	8000b2c <__addsf3>
 8000b26:	bf00      	nop

08000b28 <__aeabi_fsub>:
 8000b28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b2c <__addsf3>:
 8000b2c:	0042      	lsls	r2, r0, #1
 8000b2e:	bf1f      	itttt	ne
 8000b30:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b34:	ea92 0f03 	teqne	r2, r3
 8000b38:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b3c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b40:	d06a      	beq.n	8000c18 <__addsf3+0xec>
 8000b42:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b46:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4a:	bfc1      	itttt	gt
 8000b4c:	18d2      	addgt	r2, r2, r3
 8000b4e:	4041      	eorgt	r1, r0
 8000b50:	4048      	eorgt	r0, r1
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	bfb8      	it	lt
 8000b56:	425b      	neglt	r3, r3
 8000b58:	2b19      	cmp	r3, #25
 8000b5a:	bf88      	it	hi
 8000b5c:	4770      	bxhi	lr
 8000b5e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6a:	bf18      	it	ne
 8000b6c:	4240      	negne	r0, r0
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4249      	negne	r1, r1
 8000b7e:	ea92 0f03 	teq	r2, r3
 8000b82:	d03f      	beq.n	8000c04 <__addsf3+0xd8>
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	fa41 fc03 	asr.w	ip, r1, r3
 8000b8c:	eb10 000c 	adds.w	r0, r0, ip
 8000b90:	f1c3 0320 	rsb	r3, r3, #32
 8000b94:	fa01 f103 	lsl.w	r1, r1, r3
 8000b98:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9c:	d502      	bpl.n	8000ba4 <__addsf3+0x78>
 8000b9e:	4249      	negs	r1, r1
 8000ba0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba8:	d313      	bcc.n	8000bd2 <__addsf3+0xa6>
 8000baa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bae:	d306      	bcc.n	8000bbe <__addsf3+0x92>
 8000bb0:	0840      	lsrs	r0, r0, #1
 8000bb2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bb6:	f102 0201 	add.w	r2, r2, #1
 8000bba:	2afe      	cmp	r2, #254	; 0xfe
 8000bbc:	d251      	bcs.n	8000c62 <__addsf3+0x136>
 8000bbe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	ea40 0003 	orr.w	r0, r0, r3
 8000bd0:	4770      	bx	lr
 8000bd2:	0049      	lsls	r1, r1, #1
 8000bd4:	eb40 0000 	adc.w	r0, r0, r0
 8000bd8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000be0:	d1ed      	bne.n	8000bbe <__addsf3+0x92>
 8000be2:	fab0 fc80 	clz	ip, r0
 8000be6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bea:	ebb2 020c 	subs.w	r2, r2, ip
 8000bee:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf2:	bfaa      	itet	ge
 8000bf4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf8:	4252      	neglt	r2, r2
 8000bfa:	4318      	orrge	r0, r3
 8000bfc:	bfbc      	itt	lt
 8000bfe:	40d0      	lsrlt	r0, r2
 8000c00:	4318      	orrlt	r0, r3
 8000c02:	4770      	bx	lr
 8000c04:	f092 0f00 	teq	r2, #0
 8000c08:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c0c:	bf06      	itte	eq
 8000c0e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c12:	3201      	addeq	r2, #1
 8000c14:	3b01      	subne	r3, #1
 8000c16:	e7b5      	b.n	8000b84 <__addsf3+0x58>
 8000c18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c20:	bf18      	it	ne
 8000c22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c26:	d021      	beq.n	8000c6c <__addsf3+0x140>
 8000c28:	ea92 0f03 	teq	r2, r3
 8000c2c:	d004      	beq.n	8000c38 <__addsf3+0x10c>
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	bf08      	it	eq
 8000c34:	4608      	moveq	r0, r1
 8000c36:	4770      	bx	lr
 8000c38:	ea90 0f01 	teq	r0, r1
 8000c3c:	bf1c      	itt	ne
 8000c3e:	2000      	movne	r0, #0
 8000c40:	4770      	bxne	lr
 8000c42:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c46:	d104      	bne.n	8000c52 <__addsf3+0x126>
 8000c48:	0040      	lsls	r0, r0, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c50:	4770      	bx	lr
 8000c52:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c56:	bf3c      	itt	cc
 8000c58:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c5c:	4770      	bxcc	lr
 8000c5e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c62:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6a:	4770      	bx	lr
 8000c6c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c70:	bf16      	itet	ne
 8000c72:	4608      	movne	r0, r1
 8000c74:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c78:	4601      	movne	r1, r0
 8000c7a:	0242      	lsls	r2, r0, #9
 8000c7c:	bf06      	itte	eq
 8000c7e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c82:	ea90 0f01 	teqeq	r0, r1
 8000c86:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_ui2f>:
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e004      	b.n	8000c9c <__aeabi_i2f+0x8>
 8000c92:	bf00      	nop

08000c94 <__aeabi_i2f>:
 8000c94:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c98:	bf48      	it	mi
 8000c9a:	4240      	negmi	r0, r0
 8000c9c:	ea5f 0c00 	movs.w	ip, r0
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca8:	4601      	mov	r1, r0
 8000caa:	f04f 0000 	mov.w	r0, #0
 8000cae:	e01c      	b.n	8000cea <__aeabi_l2f+0x2a>

08000cb0 <__aeabi_ul2f>:
 8000cb0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e00a      	b.n	8000cd4 <__aeabi_l2f+0x14>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_l2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ccc:	d502      	bpl.n	8000cd4 <__aeabi_l2f+0x14>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	ea5f 0c01 	movs.w	ip, r1
 8000cd8:	bf02      	ittt	eq
 8000cda:	4684      	moveq	ip, r0
 8000cdc:	4601      	moveq	r1, r0
 8000cde:	2000      	moveq	r0, #0
 8000ce0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce4:	bf08      	it	eq
 8000ce6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cee:	fabc f28c 	clz	r2, ip
 8000cf2:	3a08      	subs	r2, #8
 8000cf4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf8:	db10      	blt.n	8000d1c <__aeabi_l2f+0x5c>
 8000cfa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cfe:	4463      	add	r3, ip
 8000d00:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d04:	f1c2 0220 	rsb	r2, r2, #32
 8000d08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d10:	eb43 0002 	adc.w	r0, r3, r2
 8000d14:	bf08      	it	eq
 8000d16:	f020 0001 	biceq.w	r0, r0, #1
 8000d1a:	4770      	bx	lr
 8000d1c:	f102 0220 	add.w	r2, r2, #32
 8000d20:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d24:	f1c2 0220 	rsb	r2, r2, #32
 8000d28:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d2c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d30:	eb43 0002 	adc.w	r0, r3, r2
 8000d34:	bf08      	it	eq
 8000d36:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_fmul>:
 8000d3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d44:	bf1e      	ittt	ne
 8000d46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4a:	ea92 0f0c 	teqne	r2, ip
 8000d4e:	ea93 0f0c 	teqne	r3, ip
 8000d52:	d06f      	beq.n	8000e34 <__aeabi_fmul+0xf8>
 8000d54:	441a      	add	r2, r3
 8000d56:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5a:	0240      	lsls	r0, r0, #9
 8000d5c:	bf18      	it	ne
 8000d5e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d62:	d01e      	beq.n	8000da2 <__aeabi_fmul+0x66>
 8000d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d68:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d6c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d70:	fba0 3101 	umull	r3, r1, r0, r1
 8000d74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d78:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d7c:	bf3e      	ittt	cc
 8000d7e:	0049      	lslcc	r1, r1, #1
 8000d80:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d84:	005b      	lslcc	r3, r3, #1
 8000d86:	ea40 0001 	orr.w	r0, r0, r1
 8000d8a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d8e:	2afd      	cmp	r2, #253	; 0xfd
 8000d90:	d81d      	bhi.n	8000dce <__aeabi_fmul+0x92>
 8000d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9a:	bf08      	it	eq
 8000d9c:	f020 0001 	biceq.w	r0, r0, #1
 8000da0:	4770      	bx	lr
 8000da2:	f090 0f00 	teq	r0, #0
 8000da6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000daa:	bf08      	it	eq
 8000dac:	0249      	lsleq	r1, r1, #9
 8000dae:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000db6:	3a7f      	subs	r2, #127	; 0x7f
 8000db8:	bfc2      	ittt	gt
 8000dba:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dbe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc2:	4770      	bxgt	lr
 8000dc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	3a01      	subs	r2, #1
 8000dce:	dc5d      	bgt.n	8000e8c <__aeabi_fmul+0x150>
 8000dd0:	f112 0f19 	cmn.w	r2, #25
 8000dd4:	bfdc      	itt	le
 8000dd6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dda:	4770      	bxle	lr
 8000ddc:	f1c2 0200 	rsb	r2, r2, #0
 8000de0:	0041      	lsls	r1, r0, #1
 8000de2:	fa21 f102 	lsr.w	r1, r1, r2
 8000de6:	f1c2 0220 	rsb	r2, r2, #32
 8000dea:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dee:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df2:	f140 0000 	adc.w	r0, r0, #0
 8000df6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfa:	bf08      	it	eq
 8000dfc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e00:	4770      	bx	lr
 8000e02:	f092 0f00 	teq	r2, #0
 8000e06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0040      	lsleq	r0, r0, #1
 8000e0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e12:	3a01      	subeq	r2, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xce>
 8000e16:	ea40 000c 	orr.w	r0, r0, ip
 8000e1a:	f093 0f00 	teq	r3, #0
 8000e1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0049      	lsleq	r1, r1, #1
 8000e26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2a:	3b01      	subeq	r3, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fmul+0xe6>
 8000e2e:	ea41 010c 	orr.w	r1, r1, ip
 8000e32:	e78f      	b.n	8000d54 <__aeabi_fmul+0x18>
 8000e34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e38:	ea92 0f0c 	teq	r2, ip
 8000e3c:	bf18      	it	ne
 8000e3e:	ea93 0f0c 	teqne	r3, ip
 8000e42:	d00a      	beq.n	8000e5a <__aeabi_fmul+0x11e>
 8000e44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e48:	bf18      	it	ne
 8000e4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e4e:	d1d8      	bne.n	8000e02 <__aeabi_fmul+0xc6>
 8000e50:	ea80 0001 	eor.w	r0, r0, r1
 8000e54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e58:	4770      	bx	lr
 8000e5a:	f090 0f00 	teq	r0, #0
 8000e5e:	bf17      	itett	ne
 8000e60:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e64:	4608      	moveq	r0, r1
 8000e66:	f091 0f00 	teqne	r1, #0
 8000e6a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e6e:	d014      	beq.n	8000e9a <__aeabi_fmul+0x15e>
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	d101      	bne.n	8000e7a <__aeabi_fmul+0x13e>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	d10f      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e7a:	ea93 0f0c 	teq	r3, ip
 8000e7e:	d103      	bne.n	8000e88 <__aeabi_fmul+0x14c>
 8000e80:	024b      	lsls	r3, r1, #9
 8000e82:	bf18      	it	ne
 8000e84:	4608      	movne	r0, r1
 8000e86:	d108      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e98:	4770      	bx	lr
 8000e9a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_fdiv>:
 8000ea4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eac:	bf1e      	ittt	ne
 8000eae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb2:	ea92 0f0c 	teqne	r2, ip
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d069      	beq.n	8000f90 <__aeabi_fdiv+0xec>
 8000ebc:	eba2 0203 	sub.w	r2, r2, r3
 8000ec0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec4:	0249      	lsls	r1, r1, #9
 8000ec6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eca:	d037      	beq.n	8000f3c <__aeabi_fdiv+0x98>
 8000ecc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000edc:	428b      	cmp	r3, r1
 8000ede:	bf38      	it	cc
 8000ee0:	005b      	lslcc	r3, r3, #1
 8000ee2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ee6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eea:	428b      	cmp	r3, r1
 8000eec:	bf24      	itt	cs
 8000eee:	1a5b      	subcs	r3, r3, r1
 8000ef0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef8:	bf24      	itt	cs
 8000efa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000efe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f02:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f06:	bf24      	itt	cs
 8000f08:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f10:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	bf18      	it	ne
 8000f22:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f26:	d1e0      	bne.n	8000eea <__aeabi_fdiv+0x46>
 8000f28:	2afd      	cmp	r2, #253	; 0xfd
 8000f2a:	f63f af50 	bhi.w	8000dce <__aeabi_fmul+0x92>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f34:	bf08      	it	eq
 8000f36:	f020 0001 	biceq.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f40:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f44:	327f      	adds	r2, #127	; 0x7f
 8000f46:	bfc2      	ittt	gt
 8000f48:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f4c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f50:	4770      	bxgt	lr
 8000f52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	3a01      	subs	r2, #1
 8000f5c:	e737      	b.n	8000dce <__aeabi_fmul+0x92>
 8000f5e:	f092 0f00 	teq	r2, #0
 8000f62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0040      	lsleq	r0, r0, #1
 8000f6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f6e:	3a01      	subeq	r2, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xc2>
 8000f72:	ea40 000c 	orr.w	r0, r0, ip
 8000f76:	f093 0f00 	teq	r3, #0
 8000f7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	bf02      	ittt	eq
 8000f80:	0049      	lsleq	r1, r1, #1
 8000f82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f86:	3b01      	subeq	r3, #1
 8000f88:	d0f9      	beq.n	8000f7e <__aeabi_fdiv+0xda>
 8000f8a:	ea41 010c 	orr.w	r1, r1, ip
 8000f8e:	e795      	b.n	8000ebc <__aeabi_fdiv+0x18>
 8000f90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f94:	ea92 0f0c 	teq	r2, ip
 8000f98:	d108      	bne.n	8000fac <__aeabi_fdiv+0x108>
 8000f9a:	0242      	lsls	r2, r0, #9
 8000f9c:	f47f af7d 	bne.w	8000e9a <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	f47f af70 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e776      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	d104      	bne.n	8000fbc <__aeabi_fdiv+0x118>
 8000fb2:	024b      	lsls	r3, r1, #9
 8000fb4:	f43f af4c 	beq.w	8000e50 <__aeabi_fmul+0x114>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e76e      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc0:	bf18      	it	ne
 8000fc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	d1ca      	bne.n	8000f5e <__aeabi_fdiv+0xba>
 8000fc8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fcc:	f47f af5c 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fd0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd4:	f47f af3c 	bne.w	8000e50 <__aeabi_fmul+0x114>
 8000fd8:	e75f      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fda:	bf00      	nop

08000fdc <__gesf2>:
 8000fdc:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe0:	e006      	b.n	8000ff0 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__lesf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	e002      	b.n	8000ff0 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__cmpsf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ffc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001000:	bf18      	it	ne
 8001002:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001006:	d011      	beq.n	800102c <__cmpsf2+0x40>
 8001008:	b001      	add	sp, #4
 800100a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800100e:	bf18      	it	ne
 8001010:	ea90 0f01 	teqne	r0, r1
 8001014:	bf58      	it	pl
 8001016:	ebb2 0003 	subspl.w	r0, r2, r3
 800101a:	bf88      	it	hi
 800101c:	17c8      	asrhi	r0, r1, #31
 800101e:	bf38      	it	cc
 8001020:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001024:	bf18      	it	ne
 8001026:	f040 0001 	orrne.w	r0, r0, #1
 800102a:	4770      	bx	lr
 800102c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001030:	d102      	bne.n	8001038 <__cmpsf2+0x4c>
 8001032:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001036:	d105      	bne.n	8001044 <__cmpsf2+0x58>
 8001038:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800103c:	d1e4      	bne.n	8001008 <__cmpsf2+0x1c>
 800103e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001042:	d0e1      	beq.n	8001008 <__cmpsf2+0x1c>
 8001044:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <__aeabi_cfrcmple>:
 800104c:	4684      	mov	ip, r0
 800104e:	4608      	mov	r0, r1
 8001050:	4661      	mov	r1, ip
 8001052:	e7ff      	b.n	8001054 <__aeabi_cfcmpeq>

08001054 <__aeabi_cfcmpeq>:
 8001054:	b50f      	push	{r0, r1, r2, r3, lr}
 8001056:	f7ff ffc9 	bl	8000fec <__cmpsf2>
 800105a:	2800      	cmp	r0, #0
 800105c:	bf48      	it	mi
 800105e:	f110 0f00 	cmnmi.w	r0, #0
 8001062:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001064 <__aeabi_fcmpeq>:
 8001064:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001068:	f7ff fff4 	bl	8001054 <__aeabi_cfcmpeq>
 800106c:	bf0c      	ite	eq
 800106e:	2001      	moveq	r0, #1
 8001070:	2000      	movne	r0, #0
 8001072:	f85d fb08 	ldr.w	pc, [sp], #8
 8001076:	bf00      	nop

08001078 <__aeabi_fcmplt>:
 8001078:	f84d ed08 	str.w	lr, [sp, #-8]!
 800107c:	f7ff ffea 	bl	8001054 <__aeabi_cfcmpeq>
 8001080:	bf34      	ite	cc
 8001082:	2001      	movcc	r0, #1
 8001084:	2000      	movcs	r0, #0
 8001086:	f85d fb08 	ldr.w	pc, [sp], #8
 800108a:	bf00      	nop

0800108c <__aeabi_fcmple>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff ffe0 	bl	8001054 <__aeabi_cfcmpeq>
 8001094:	bf94      	ite	ls
 8001096:	2001      	movls	r0, #1
 8001098:	2000      	movhi	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmpge>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffd2 	bl	800104c <__aeabi_cfrcmple>
 80010a8:	bf94      	ite	ls
 80010aa:	2001      	movls	r0, #1
 80010ac:	2000      	movhi	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <__aeabi_fcmpgt>:
 80010b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b8:	f7ff ffc8 	bl	800104c <__aeabi_cfrcmple>
 80010bc:	bf34      	ite	cc
 80010be:	2001      	movcc	r0, #1
 80010c0:	2000      	movcs	r0, #0
 80010c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c6:	bf00      	nop

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_InitTick+0x3c>)
{
 80010cc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ce:	7818      	ldrb	r0, [r3, #0]
 80010d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80010d8:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <HAL_InitTick+0x40>)
 80010da:	6810      	ldr	r0, [r2, #0]
 80010dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80010e0:	f000 f89e 	bl	8001220 <HAL_SYSTICK_Config>
 80010e4:	4604      	mov	r4, r0
 80010e6:	b958      	cbnz	r0, 8001100 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e8:	2d0f      	cmp	r5, #15
 80010ea:	d809      	bhi.n	8001100 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ec:	4602      	mov	r2, r0
 80010ee:	4629      	mov	r1, r5
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f000 f854 	bl	80011a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <HAL_InitTick+0x44>)
 80010fa:	4620      	mov	r0, r4
 80010fc:	601d      	str	r5, [r3, #0]
 80010fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001100:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001102:	bd38      	pop	{r3, r4, r5, pc}
 8001104:	20000000 	.word	0x20000000
 8001108:	2000000c 	.word	0x2000000c
 800110c:	20000004 	.word	0x20000004

08001110 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4a07      	ldr	r2, [pc, #28]	; (8001130 <HAL_Init+0x20>)
{
 8001112:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001116:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	f043 0310 	orr.w	r3, r3, #16
 800111c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111e:	f000 f82d 	bl	800117c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff ffd0 	bl	80010c8 <HAL_InitTick>
  HAL_MspInit();
 8001128:	f002 fb7a 	bl	8003820 <HAL_MspInit>
}
 800112c:	2000      	movs	r0, #0
 800112e:	bd08      	pop	{r3, pc}
 8001130:	40022000 	.word	0x40022000

08001134 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001134:	4a03      	ldr	r2, [pc, #12]	; (8001144 <HAL_IncTick+0x10>)
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <HAL_IncTick+0x14>)
 8001138:	6811      	ldr	r1, [r2, #0]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	440b      	add	r3, r1
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000294 	.word	0x20000294
 8001148:	20000000 	.word	0x20000000

0800114c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800114c:	4b01      	ldr	r3, [pc, #4]	; (8001154 <HAL_GetTick+0x8>)
 800114e:	6818      	ldr	r0, [r3, #0]
}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000294 	.word	0x20000294

08001158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001158:	b538      	push	{r3, r4, r5, lr}
 800115a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff fff6 	bl	800114c <HAL_GetTick>
 8001160:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001164:	bf1e      	ittt	ne
 8001166:	4b04      	ldrne	r3, [pc, #16]	; (8001178 <HAL_Delay+0x20>)
 8001168:	781b      	ldrbne	r3, [r3, #0]
 800116a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116c:	f7ff ffee 	bl	800114c <HAL_GetTick>
 8001170:	1b40      	subs	r0, r0, r5
 8001172:	4284      	cmp	r4, r0
 8001174:	d8fa      	bhi.n	800116c <HAL_Delay+0x14>
  {
  }
}
 8001176:	bd38      	pop	{r3, r4, r5, pc}
 8001178:	20000000 	.word	0x20000000

0800117c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800117e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001182:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800118a:	041b      	lsls	r3, r3, #16
 800118c:	0c1b      	lsrs	r3, r3, #16
 800118e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001196:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001198:	60d3      	str	r3, [r2, #12]
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a2:	b530      	push	{r4, r5, lr}
 80011a4:	68dc      	ldr	r4, [r3, #12]
 80011a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	bf28      	it	cs
 80011b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011bc:	bf98      	it	ls
 80011be:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	fa05 f303 	lsl.w	r3, r5, r3
 80011c4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c8:	bf88      	it	hi
 80011ca:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4019      	ands	r1, r3
 80011ce:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	fa05 f404 	lsl.w	r4, r5, r4
 80011d4:	3c01      	subs	r4, #1
 80011d6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80011d8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011da:	ea42 0201 	orr.w	r2, r2, r1
 80011de:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	bfaf      	iteee	ge
 80011e4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	4b06      	ldrlt	r3, [pc, #24]	; (8001204 <HAL_NVIC_SetPriority+0x64>)
 80011ea:	f000 000f 	andlt.w	r0, r0, #15
 80011ee:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	bfa5      	ittet	ge
 80011f2:	b2d2      	uxtbge	r2, r2
 80011f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80011fe:	bd30      	pop	{r4, r5, pc}
 8001200:	e000ed00 	.word	0xe000ed00
 8001204:	e000ed14 	.word	0xe000ed14

08001208 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001208:	2301      	movs	r3, #1
 800120a:	0942      	lsrs	r2, r0, #5
 800120c:	f000 001f 	and.w	r0, r0, #31
 8001210:	fa03 f000 	lsl.w	r0, r3, r0
 8001214:	4b01      	ldr	r3, [pc, #4]	; (800121c <HAL_NVIC_EnableIRQ+0x14>)
 8001216:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100

08001220 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	3801      	subs	r0, #1
 8001222:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001226:	d20a      	bcs.n	800123e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	4a06      	ldr	r2, [pc, #24]	; (8001248 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001236:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800124e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	bf0c      	ite	eq
 8001254:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001258:	f022 0204 	bicne.w	r2, r2, #4
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	4770      	bx	lr
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001264:	4770      	bx	lr

08001266 <HAL_SYSTICK_IRQHandler>:
{
 8001266:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001268:	f7ff fffc 	bl	8001264 <HAL_SYSTICK_Callback>
 800126c:	bd08      	pop	{r3, pc}
	...

08001270 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001270:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001274:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001276:	2b02      	cmp	r3, #2
 8001278:	d003      	beq.n	8001282 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800127a:	2304      	movs	r3, #4
 800127c:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800127e:	2001      	movs	r0, #1
 8001280:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001282:	6803      	ldr	r3, [r0, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	f022 020e 	bic.w	r2, r2, #14
 800128a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	f022 0201 	bic.w	r2, r2, #1
 8001292:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001294:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <HAL_DMA_Abort_IT+0x88>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d01f      	beq.n	80012da <HAL_DMA_Abort_IT+0x6a>
 800129a:	3214      	adds	r2, #20
 800129c:	4293      	cmp	r3, r2
 800129e:	d01e      	beq.n	80012de <HAL_DMA_Abort_IT+0x6e>
 80012a0:	3214      	adds	r2, #20
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d01d      	beq.n	80012e2 <HAL_DMA_Abort_IT+0x72>
 80012a6:	3214      	adds	r2, #20
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d01d      	beq.n	80012e8 <HAL_DMA_Abort_IT+0x78>
 80012ac:	3214      	adds	r2, #20
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d01d      	beq.n	80012ee <HAL_DMA_Abort_IT+0x7e>
 80012b2:	3214      	adds	r2, #20
 80012b4:	4293      	cmp	r3, r2
 80012b6:	bf0c      	ite	eq
 80012b8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80012bc:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80012c0:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c2:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012c4:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80012c6:	2301      	movs	r3, #1
 80012c8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80012ce:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80012d2:	b17b      	cbz	r3, 80012f4 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 80012d4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80012d6:	4620      	mov	r0, r4
 80012d8:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012da:	2301      	movs	r3, #1
 80012dc:	e7f0      	b.n	80012c0 <HAL_DMA_Abort_IT+0x50>
 80012de:	2310      	movs	r3, #16
 80012e0:	e7ee      	b.n	80012c0 <HAL_DMA_Abort_IT+0x50>
 80012e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e6:	e7eb      	b.n	80012c0 <HAL_DMA_Abort_IT+0x50>
 80012e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ec:	e7e8      	b.n	80012c0 <HAL_DMA_Abort_IT+0x50>
 80012ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f2:	e7e5      	b.n	80012c0 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80012f4:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80012f6:	bd10      	pop	{r4, pc}
 80012f8:	40020008 	.word	0x40020008
 80012fc:	40020000 	.word	0x40020000

08001300 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001304:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001306:	4616      	mov	r6, r2
 8001308:	4b65      	ldr	r3, [pc, #404]	; (80014a0 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800130a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80014b0 <HAL_GPIO_Init+0x1b0>
 800130e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80014b4 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001312:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001316:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001318:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800131c:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001320:	45a0      	cmp	r8, r4
 8001322:	d17f      	bne.n	8001424 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001324:	684d      	ldr	r5, [r1, #4]
 8001326:	2d12      	cmp	r5, #18
 8001328:	f000 80af 	beq.w	800148a <HAL_GPIO_Init+0x18a>
 800132c:	f200 8088 	bhi.w	8001440 <HAL_GPIO_Init+0x140>
 8001330:	2d02      	cmp	r5, #2
 8001332:	f000 80a7 	beq.w	8001484 <HAL_GPIO_Init+0x184>
 8001336:	d87c      	bhi.n	8001432 <HAL_GPIO_Init+0x132>
 8001338:	2d00      	cmp	r5, #0
 800133a:	f000 808e 	beq.w	800145a <HAL_GPIO_Init+0x15a>
 800133e:	2d01      	cmp	r5, #1
 8001340:	f000 809e 	beq.w	8001480 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001344:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001348:	2cff      	cmp	r4, #255	; 0xff
 800134a:	bf93      	iteet	ls
 800134c:	4682      	movls	sl, r0
 800134e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001352:	3d08      	subhi	r5, #8
 8001354:	f8d0 b000 	ldrls.w	fp, [r0]
 8001358:	bf92      	itee	ls
 800135a:	00b5      	lslls	r5, r6, #2
 800135c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001360:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001362:	fa09 f805 	lsl.w	r8, r9, r5
 8001366:	ea2b 0808 	bic.w	r8, fp, r8
 800136a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800136e:	bf88      	it	hi
 8001370:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001374:	ea48 0505 	orr.w	r5, r8, r5
 8001378:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800137c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001380:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001384:	d04e      	beq.n	8001424 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001386:	4d47      	ldr	r5, [pc, #284]	; (80014a4 <HAL_GPIO_Init+0x1a4>)
 8001388:	4f46      	ldr	r7, [pc, #280]	; (80014a4 <HAL_GPIO_Init+0x1a4>)
 800138a:	69ad      	ldr	r5, [r5, #24]
 800138c:	f026 0803 	bic.w	r8, r6, #3
 8001390:	f045 0501 	orr.w	r5, r5, #1
 8001394:	61bd      	str	r5, [r7, #24]
 8001396:	69bd      	ldr	r5, [r7, #24]
 8001398:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800139c:	f005 0501 	and.w	r5, r5, #1
 80013a0:	9501      	str	r5, [sp, #4]
 80013a2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80013a6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013aa:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80013ac:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80013b0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80013b4:	fa09 f90b 	lsl.w	r9, r9, fp
 80013b8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013bc:	4d3a      	ldr	r5, [pc, #232]	; (80014a8 <HAL_GPIO_Init+0x1a8>)
 80013be:	42a8      	cmp	r0, r5
 80013c0:	d068      	beq.n	8001494 <HAL_GPIO_Init+0x194>
 80013c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013c6:	42a8      	cmp	r0, r5
 80013c8:	d066      	beq.n	8001498 <HAL_GPIO_Init+0x198>
 80013ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013ce:	42a8      	cmp	r0, r5
 80013d0:	d064      	beq.n	800149c <HAL_GPIO_Init+0x19c>
 80013d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013d6:	42a8      	cmp	r0, r5
 80013d8:	bf0c      	ite	eq
 80013da:	2503      	moveq	r5, #3
 80013dc:	2504      	movne	r5, #4
 80013de:	fa05 f50b 	lsl.w	r5, r5, fp
 80013e2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80013e6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013ea:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ec:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80013f0:	bf14      	ite	ne
 80013f2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013f4:	43a5      	biceq	r5, r4
 80013f6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013f8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013fa:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80013fe:	bf14      	ite	ne
 8001400:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001402:	43a5      	biceq	r5, r4
 8001404:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001406:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001408:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800140c:	bf14      	ite	ne
 800140e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001410:	43a5      	biceq	r5, r4
 8001412:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001414:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001416:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800141a:	bf14      	ite	ne
 800141c:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800141e:	ea25 0404 	biceq.w	r4, r5, r4
 8001422:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001424:	3601      	adds	r6, #1
 8001426:	2e10      	cmp	r6, #16
 8001428:	f47f af73 	bne.w	8001312 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 800142c:	b003      	add	sp, #12
 800142e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001432:	2d03      	cmp	r5, #3
 8001434:	d022      	beq.n	800147c <HAL_GPIO_Init+0x17c>
 8001436:	2d11      	cmp	r5, #17
 8001438:	d184      	bne.n	8001344 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800143a:	68ca      	ldr	r2, [r1, #12]
 800143c:	3204      	adds	r2, #4
          break;
 800143e:	e781      	b.n	8001344 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001440:	4f1a      	ldr	r7, [pc, #104]	; (80014ac <HAL_GPIO_Init+0x1ac>)
 8001442:	42bd      	cmp	r5, r7
 8001444:	d009      	beq.n	800145a <HAL_GPIO_Init+0x15a>
 8001446:	d812      	bhi.n	800146e <HAL_GPIO_Init+0x16e>
 8001448:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80014b8 <HAL_GPIO_Init+0x1b8>
 800144c:	454d      	cmp	r5, r9
 800144e:	d004      	beq.n	800145a <HAL_GPIO_Init+0x15a>
 8001450:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001454:	454d      	cmp	r5, r9
 8001456:	f47f af75 	bne.w	8001344 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800145a:	688a      	ldr	r2, [r1, #8]
 800145c:	b1c2      	cbz	r2, 8001490 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800145e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001460:	bf0c      	ite	eq
 8001462:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001466:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800146a:	2208      	movs	r2, #8
 800146c:	e76a      	b.n	8001344 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800146e:	4575      	cmp	r5, lr
 8001470:	d0f3      	beq.n	800145a <HAL_GPIO_Init+0x15a>
 8001472:	4565      	cmp	r5, ip
 8001474:	d0f1      	beq.n	800145a <HAL_GPIO_Init+0x15a>
 8001476:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80014bc <HAL_GPIO_Init+0x1bc>
 800147a:	e7eb      	b.n	8001454 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800147c:	2200      	movs	r2, #0
 800147e:	e761      	b.n	8001344 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001480:	68ca      	ldr	r2, [r1, #12]
          break;
 8001482:	e75f      	b.n	8001344 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001484:	68ca      	ldr	r2, [r1, #12]
 8001486:	3208      	adds	r2, #8
          break;
 8001488:	e75c      	b.n	8001344 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800148a:	68ca      	ldr	r2, [r1, #12]
 800148c:	320c      	adds	r2, #12
          break;
 800148e:	e759      	b.n	8001344 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001490:	2204      	movs	r2, #4
 8001492:	e757      	b.n	8001344 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001494:	2500      	movs	r5, #0
 8001496:	e7a2      	b.n	80013de <HAL_GPIO_Init+0xde>
 8001498:	2501      	movs	r5, #1
 800149a:	e7a0      	b.n	80013de <HAL_GPIO_Init+0xde>
 800149c:	2502      	movs	r5, #2
 800149e:	e79e      	b.n	80013de <HAL_GPIO_Init+0xde>
 80014a0:	40010400 	.word	0x40010400
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010800 	.word	0x40010800
 80014ac:	10210000 	.word	0x10210000
 80014b0:	10310000 	.word	0x10310000
 80014b4:	10320000 	.word	0x10320000
 80014b8:	10110000 	.word	0x10110000
 80014bc:	10220000 	.word	0x10220000

080014c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c0:	b10a      	cbz	r2, 80014c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c2:	6101      	str	r1, [r0, #16]
 80014c4:	4770      	bx	lr
 80014c6:	0409      	lsls	r1, r1, #16
 80014c8:	e7fb      	b.n	80014c2 <HAL_GPIO_WritePin+0x2>
	...

080014cc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014cc:	6803      	ldr	r3, [r0, #0]
{
 80014ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d2:	07db      	lsls	r3, r3, #31
{
 80014d4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d6:	d410      	bmi.n	80014fa <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d8:	682b      	ldr	r3, [r5, #0]
 80014da:	079f      	lsls	r7, r3, #30
 80014dc:	d45e      	bmi.n	800159c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014de:	682b      	ldr	r3, [r5, #0]
 80014e0:	0719      	lsls	r1, r3, #28
 80014e2:	f100 8095 	bmi.w	8001610 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e6:	682b      	ldr	r3, [r5, #0]
 80014e8:	075a      	lsls	r2, r3, #29
 80014ea:	f100 80bf 	bmi.w	800166c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ee:	69ea      	ldr	r2, [r5, #28]
 80014f0:	2a00      	cmp	r2, #0
 80014f2:	f040 812d 	bne.w	8001750 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80014f6:	2000      	movs	r0, #0
 80014f8:	e014      	b.n	8001524 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014fa:	4c90      	ldr	r4, [pc, #576]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80014fc:	6863      	ldr	r3, [r4, #4]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	2b04      	cmp	r3, #4
 8001504:	d007      	beq.n	8001516 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001506:	6863      	ldr	r3, [r4, #4]
 8001508:	f003 030c 	and.w	r3, r3, #12
 800150c:	2b08      	cmp	r3, #8
 800150e:	d10c      	bne.n	800152a <HAL_RCC_OscConfig+0x5e>
 8001510:	6863      	ldr	r3, [r4, #4]
 8001512:	03de      	lsls	r6, r3, #15
 8001514:	d509      	bpl.n	800152a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001516:	6823      	ldr	r3, [r4, #0]
 8001518:	039c      	lsls	r4, r3, #14
 800151a:	d5dd      	bpl.n	80014d8 <HAL_RCC_OscConfig+0xc>
 800151c:	686b      	ldr	r3, [r5, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1da      	bne.n	80014d8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001522:	2001      	movs	r0, #1
}
 8001524:	b002      	add	sp, #8
 8001526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800152a:	686b      	ldr	r3, [r5, #4]
 800152c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001530:	d110      	bne.n	8001554 <HAL_RCC_OscConfig+0x88>
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001538:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800153a:	f7ff fe07 	bl	800114c <HAL_GetTick>
 800153e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001540:	6823      	ldr	r3, [r4, #0]
 8001542:	0398      	lsls	r0, r3, #14
 8001544:	d4c8      	bmi.n	80014d8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001546:	f7ff fe01 	bl	800114c <HAL_GetTick>
 800154a:	1b80      	subs	r0, r0, r6
 800154c:	2864      	cmp	r0, #100	; 0x64
 800154e:	d9f7      	bls.n	8001540 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001550:	2003      	movs	r0, #3
 8001552:	e7e7      	b.n	8001524 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001554:	b99b      	cbnz	r3, 800157e <HAL_RCC_OscConfig+0xb2>
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155c:	6023      	str	r3, [r4, #0]
 800155e:	6823      	ldr	r3, [r4, #0]
 8001560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001564:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001566:	f7ff fdf1 	bl	800114c <HAL_GetTick>
 800156a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156c:	6823      	ldr	r3, [r4, #0]
 800156e:	0399      	lsls	r1, r3, #14
 8001570:	d5b2      	bpl.n	80014d8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001572:	f7ff fdeb 	bl	800114c <HAL_GetTick>
 8001576:	1b80      	subs	r0, r0, r6
 8001578:	2864      	cmp	r0, #100	; 0x64
 800157a:	d9f7      	bls.n	800156c <HAL_RCC_OscConfig+0xa0>
 800157c:	e7e8      	b.n	8001550 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001582:	6823      	ldr	r3, [r4, #0]
 8001584:	d103      	bne.n	800158e <HAL_RCC_OscConfig+0xc2>
 8001586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158a:	6023      	str	r3, [r4, #0]
 800158c:	e7d1      	b.n	8001532 <HAL_RCC_OscConfig+0x66>
 800158e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001592:	6023      	str	r3, [r4, #0]
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159a:	e7cd      	b.n	8001538 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800159c:	4c67      	ldr	r4, [pc, #412]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800159e:	6863      	ldr	r3, [r4, #4]
 80015a0:	f013 0f0c 	tst.w	r3, #12
 80015a4:	d007      	beq.n	80015b6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015a6:	6863      	ldr	r3, [r4, #4]
 80015a8:	f003 030c 	and.w	r3, r3, #12
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d110      	bne.n	80015d2 <HAL_RCC_OscConfig+0x106>
 80015b0:	6863      	ldr	r3, [r4, #4]
 80015b2:	03da      	lsls	r2, r3, #15
 80015b4:	d40d      	bmi.n	80015d2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	079b      	lsls	r3, r3, #30
 80015ba:	d502      	bpl.n	80015c2 <HAL_RCC_OscConfig+0xf6>
 80015bc:	692b      	ldr	r3, [r5, #16]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d1af      	bne.n	8001522 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c2:	6823      	ldr	r3, [r4, #0]
 80015c4:	696a      	ldr	r2, [r5, #20]
 80015c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015ca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015ce:	6023      	str	r3, [r4, #0]
 80015d0:	e785      	b.n	80014de <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d2:	692a      	ldr	r2, [r5, #16]
 80015d4:	4b5a      	ldr	r3, [pc, #360]	; (8001740 <HAL_RCC_OscConfig+0x274>)
 80015d6:	b16a      	cbz	r2, 80015f4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80015d8:	2201      	movs	r2, #1
 80015da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015dc:	f7ff fdb6 	bl	800114c <HAL_GetTick>
 80015e0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	079f      	lsls	r7, r3, #30
 80015e6:	d4ec      	bmi.n	80015c2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e8:	f7ff fdb0 	bl	800114c <HAL_GetTick>
 80015ec:	1b80      	subs	r0, r0, r6
 80015ee:	2802      	cmp	r0, #2
 80015f0:	d9f7      	bls.n	80015e2 <HAL_RCC_OscConfig+0x116>
 80015f2:	e7ad      	b.n	8001550 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80015f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015f6:	f7ff fda9 	bl	800114c <HAL_GetTick>
 80015fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	0798      	lsls	r0, r3, #30
 8001600:	f57f af6d 	bpl.w	80014de <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001604:	f7ff fda2 	bl	800114c <HAL_GetTick>
 8001608:	1b80      	subs	r0, r0, r6
 800160a:	2802      	cmp	r0, #2
 800160c:	d9f6      	bls.n	80015fc <HAL_RCC_OscConfig+0x130>
 800160e:	e79f      	b.n	8001550 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001610:	69aa      	ldr	r2, [r5, #24]
 8001612:	4c4a      	ldr	r4, [pc, #296]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001614:	4b4b      	ldr	r3, [pc, #300]	; (8001744 <HAL_RCC_OscConfig+0x278>)
 8001616:	b1da      	cbz	r2, 8001650 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800161c:	f7ff fd96 	bl	800114c <HAL_GetTick>
 8001620:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001624:	079b      	lsls	r3, r3, #30
 8001626:	d50d      	bpl.n	8001644 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001628:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800162c:	4b46      	ldr	r3, [pc, #280]	; (8001748 <HAL_RCC_OscConfig+0x27c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	fbb3 f3f2 	udiv	r3, r3, r2
 8001634:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001636:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001638:	9b01      	ldr	r3, [sp, #4]
 800163a:	1e5a      	subs	r2, r3, #1
 800163c:	9201      	str	r2, [sp, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f9      	bne.n	8001636 <HAL_RCC_OscConfig+0x16a>
 8001642:	e750      	b.n	80014e6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001644:	f7ff fd82 	bl	800114c <HAL_GetTick>
 8001648:	1b80      	subs	r0, r0, r6
 800164a:	2802      	cmp	r0, #2
 800164c:	d9e9      	bls.n	8001622 <HAL_RCC_OscConfig+0x156>
 800164e:	e77f      	b.n	8001550 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001650:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001652:	f7ff fd7b 	bl	800114c <HAL_GetTick>
 8001656:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001658:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800165a:	079f      	lsls	r7, r3, #30
 800165c:	f57f af43 	bpl.w	80014e6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001660:	f7ff fd74 	bl	800114c <HAL_GetTick>
 8001664:	1b80      	subs	r0, r0, r6
 8001666:	2802      	cmp	r0, #2
 8001668:	d9f6      	bls.n	8001658 <HAL_RCC_OscConfig+0x18c>
 800166a:	e771      	b.n	8001550 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800166c:	4c33      	ldr	r4, [pc, #204]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800166e:	69e3      	ldr	r3, [r4, #28]
 8001670:	00d8      	lsls	r0, r3, #3
 8001672:	d424      	bmi.n	80016be <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001674:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001676:	69e3      	ldr	r3, [r4, #28]
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	61e3      	str	r3, [r4, #28]
 800167e:	69e3      	ldr	r3, [r4, #28]
 8001680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001688:	4e30      	ldr	r6, [pc, #192]	; (800174c <HAL_RCC_OscConfig+0x280>)
 800168a:	6833      	ldr	r3, [r6, #0]
 800168c:	05d9      	lsls	r1, r3, #23
 800168e:	d518      	bpl.n	80016c2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001690:	68eb      	ldr	r3, [r5, #12]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d126      	bne.n	80016e4 <HAL_RCC_OscConfig+0x218>
 8001696:	6a23      	ldr	r3, [r4, #32]
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800169e:	f7ff fd55 	bl	800114c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80016a6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a8:	6a23      	ldr	r3, [r4, #32]
 80016aa:	079b      	lsls	r3, r3, #30
 80016ac:	d53f      	bpl.n	800172e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80016ae:	2f00      	cmp	r7, #0
 80016b0:	f43f af1d 	beq.w	80014ee <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b4:	69e3      	ldr	r3, [r4, #28]
 80016b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ba:	61e3      	str	r3, [r4, #28]
 80016bc:	e717      	b.n	80014ee <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80016be:	2700      	movs	r7, #0
 80016c0:	e7e2      	b.n	8001688 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c2:	6833      	ldr	r3, [r6, #0]
 80016c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80016ca:	f7ff fd3f 	bl	800114c <HAL_GetTick>
 80016ce:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d0:	6833      	ldr	r3, [r6, #0]
 80016d2:	05da      	lsls	r2, r3, #23
 80016d4:	d4dc      	bmi.n	8001690 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d6:	f7ff fd39 	bl	800114c <HAL_GetTick>
 80016da:	eba0 0008 	sub.w	r0, r0, r8
 80016de:	2864      	cmp	r0, #100	; 0x64
 80016e0:	d9f6      	bls.n	80016d0 <HAL_RCC_OscConfig+0x204>
 80016e2:	e735      	b.n	8001550 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e4:	b9ab      	cbnz	r3, 8001712 <HAL_RCC_OscConfig+0x246>
 80016e6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ec:	f023 0301 	bic.w	r3, r3, #1
 80016f0:	6223      	str	r3, [r4, #32]
 80016f2:	6a23      	ldr	r3, [r4, #32]
 80016f4:	f023 0304 	bic.w	r3, r3, #4
 80016f8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80016fa:	f7ff fd27 	bl	800114c <HAL_GetTick>
 80016fe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001700:	6a23      	ldr	r3, [r4, #32]
 8001702:	0798      	lsls	r0, r3, #30
 8001704:	d5d3      	bpl.n	80016ae <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff fd21 	bl	800114c <HAL_GetTick>
 800170a:	1b80      	subs	r0, r0, r6
 800170c:	4540      	cmp	r0, r8
 800170e:	d9f7      	bls.n	8001700 <HAL_RCC_OscConfig+0x234>
 8001710:	e71e      	b.n	8001550 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001712:	2b05      	cmp	r3, #5
 8001714:	6a23      	ldr	r3, [r4, #32]
 8001716:	d103      	bne.n	8001720 <HAL_RCC_OscConfig+0x254>
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6223      	str	r3, [r4, #32]
 800171e:	e7ba      	b.n	8001696 <HAL_RCC_OscConfig+0x1ca>
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	6223      	str	r3, [r4, #32]
 8001726:	6a23      	ldr	r3, [r4, #32]
 8001728:	f023 0304 	bic.w	r3, r3, #4
 800172c:	e7b6      	b.n	800169c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172e:	f7ff fd0d 	bl	800114c <HAL_GetTick>
 8001732:	eba0 0008 	sub.w	r0, r0, r8
 8001736:	42b0      	cmp	r0, r6
 8001738:	d9b6      	bls.n	80016a8 <HAL_RCC_OscConfig+0x1dc>
 800173a:	e709      	b.n	8001550 <HAL_RCC_OscConfig+0x84>
 800173c:	40021000 	.word	0x40021000
 8001740:	42420000 	.word	0x42420000
 8001744:	42420480 	.word	0x42420480
 8001748:	2000000c 	.word	0x2000000c
 800174c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001750:	4c22      	ldr	r4, [pc, #136]	; (80017dc <HAL_RCC_OscConfig+0x310>)
 8001752:	6863      	ldr	r3, [r4, #4]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b08      	cmp	r3, #8
 800175a:	f43f aee2 	beq.w	8001522 <HAL_RCC_OscConfig+0x56>
 800175e:	2300      	movs	r3, #0
 8001760:	4e1f      	ldr	r6, [pc, #124]	; (80017e0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001762:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001764:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001766:	d12b      	bne.n	80017c0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001768:	f7ff fcf0 	bl	800114c <HAL_GetTick>
 800176c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176e:	6823      	ldr	r3, [r4, #0]
 8001770:	0199      	lsls	r1, r3, #6
 8001772:	d41f      	bmi.n	80017b4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001774:	6a2b      	ldr	r3, [r5, #32]
 8001776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177a:	d105      	bne.n	8001788 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800177c:	6862      	ldr	r2, [r4, #4]
 800177e:	68a9      	ldr	r1, [r5, #8]
 8001780:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001784:	430a      	orrs	r2, r1
 8001786:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001788:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800178a:	6862      	ldr	r2, [r4, #4]
 800178c:	430b      	orrs	r3, r1
 800178e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001792:	4313      	orrs	r3, r2
 8001794:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001796:	2301      	movs	r3, #1
 8001798:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800179a:	f7ff fcd7 	bl	800114c <HAL_GetTick>
 800179e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	019a      	lsls	r2, r3, #6
 80017a4:	f53f aea7 	bmi.w	80014f6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a8:	f7ff fcd0 	bl	800114c <HAL_GetTick>
 80017ac:	1b40      	subs	r0, r0, r5
 80017ae:	2802      	cmp	r0, #2
 80017b0:	d9f6      	bls.n	80017a0 <HAL_RCC_OscConfig+0x2d4>
 80017b2:	e6cd      	b.n	8001550 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b4:	f7ff fcca 	bl	800114c <HAL_GetTick>
 80017b8:	1bc0      	subs	r0, r0, r7
 80017ba:	2802      	cmp	r0, #2
 80017bc:	d9d7      	bls.n	800176e <HAL_RCC_OscConfig+0x2a2>
 80017be:	e6c7      	b.n	8001550 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80017c0:	f7ff fcc4 	bl	800114c <HAL_GetTick>
 80017c4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	019b      	lsls	r3, r3, #6
 80017ca:	f57f ae94 	bpl.w	80014f6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ce:	f7ff fcbd 	bl	800114c <HAL_GetTick>
 80017d2:	1b40      	subs	r0, r0, r5
 80017d4:	2802      	cmp	r0, #2
 80017d6:	d9f6      	bls.n	80017c6 <HAL_RCC_OscConfig+0x2fa>
 80017d8:	e6ba      	b.n	8001550 <HAL_RCC_OscConfig+0x84>
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	42420060 	.word	0x42420060

080017e4 <HAL_RCC_GetSysClockFreq>:
{
 80017e4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80017e8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017ea:	ac02      	add	r4, sp, #8
 80017ec:	f103 0510 	add.w	r5, r3, #16
 80017f0:	4622      	mov	r2, r4
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	6859      	ldr	r1, [r3, #4]
 80017f6:	3308      	adds	r3, #8
 80017f8:	c203      	stmia	r2!, {r0, r1}
 80017fa:	42ab      	cmp	r3, r5
 80017fc:	4614      	mov	r4, r2
 80017fe:	d1f7      	bne.n	80017f0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001800:	2301      	movs	r3, #1
 8001802:	f88d 3004 	strb.w	r3, [sp, #4]
 8001806:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001808:	4911      	ldr	r1, [pc, #68]	; (8001850 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800180a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800180e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001810:	f003 020c 	and.w	r2, r3, #12
 8001814:	2a08      	cmp	r2, #8
 8001816:	d117      	bne.n	8001848 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001818:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800181c:	a806      	add	r0, sp, #24
 800181e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001820:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001822:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001826:	d50c      	bpl.n	8001842 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001828:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800182a:	480a      	ldr	r0, [pc, #40]	; (8001854 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800182c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001830:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001832:	aa06      	add	r2, sp, #24
 8001834:	4413      	add	r3, r2
 8001836:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800183a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800183e:	b007      	add	sp, #28
 8001840:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <HAL_RCC_GetSysClockFreq+0x74>)
 8001844:	4350      	muls	r0, r2
 8001846:	e7fa      	b.n	800183e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800184a:	e7f8      	b.n	800183e <HAL_RCC_GetSysClockFreq+0x5a>
 800184c:	080046d0 	.word	0x080046d0
 8001850:	40021000 	.word	0x40021000
 8001854:	007a1200 	.word	0x007a1200
 8001858:	003d0900 	.word	0x003d0900

0800185c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800185c:	4a4d      	ldr	r2, [pc, #308]	; (8001994 <HAL_RCC_ClockConfig+0x138>)
{
 800185e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001862:	6813      	ldr	r3, [r2, #0]
{
 8001864:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	428b      	cmp	r3, r1
{
 800186c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800186e:	d328      	bcc.n	80018c2 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001870:	682a      	ldr	r2, [r5, #0]
 8001872:	0791      	lsls	r1, r2, #30
 8001874:	d432      	bmi.n	80018dc <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001876:	07d2      	lsls	r2, r2, #31
 8001878:	d438      	bmi.n	80018ec <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800187a:	4a46      	ldr	r2, [pc, #280]	; (8001994 <HAL_RCC_ClockConfig+0x138>)
 800187c:	6813      	ldr	r3, [r2, #0]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	429e      	cmp	r6, r3
 8001884:	d373      	bcc.n	800196e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001886:	682a      	ldr	r2, [r5, #0]
 8001888:	4c43      	ldr	r4, [pc, #268]	; (8001998 <HAL_RCC_ClockConfig+0x13c>)
 800188a:	f012 0f04 	tst.w	r2, #4
 800188e:	d179      	bne.n	8001984 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001890:	0713      	lsls	r3, r2, #28
 8001892:	d506      	bpl.n	80018a2 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001894:	6863      	ldr	r3, [r4, #4]
 8001896:	692a      	ldr	r2, [r5, #16]
 8001898:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800189c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018a0:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018a2:	f7ff ff9f 	bl	80017e4 <HAL_RCC_GetSysClockFreq>
 80018a6:	6863      	ldr	r3, [r4, #4]
 80018a8:	4a3c      	ldr	r2, [pc, #240]	; (800199c <HAL_RCC_ClockConfig+0x140>)
 80018aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018ae:	5cd3      	ldrb	r3, [r2, r3]
 80018b0:	40d8      	lsrs	r0, r3
 80018b2:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <HAL_RCC_ClockConfig+0x144>)
 80018b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f7ff fc06 	bl	80010c8 <HAL_InitTick>
  return HAL_OK;
 80018bc:	2000      	movs	r0, #0
}
 80018be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	6813      	ldr	r3, [r2, #0]
 80018c4:	f023 0307 	bic.w	r3, r3, #7
 80018c8:	430b      	orrs	r3, r1
 80018ca:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018cc:	6813      	ldr	r3, [r2, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	4299      	cmp	r1, r3
 80018d4:	d0cc      	beq.n	8001870 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80018d6:	2001      	movs	r0, #1
 80018d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018dc:	492e      	ldr	r1, [pc, #184]	; (8001998 <HAL_RCC_ClockConfig+0x13c>)
 80018de:	68a8      	ldr	r0, [r5, #8]
 80018e0:	684b      	ldr	r3, [r1, #4]
 80018e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018e6:	4303      	orrs	r3, r0
 80018e8:	604b      	str	r3, [r1, #4]
 80018ea:	e7c4      	b.n	8001876 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ec:	686a      	ldr	r2, [r5, #4]
 80018ee:	4c2a      	ldr	r4, [pc, #168]	; (8001998 <HAL_RCC_ClockConfig+0x13c>)
 80018f0:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f4:	d11c      	bne.n	8001930 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fa:	d0ec      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fc:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fe:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001902:	f023 0303 	bic.w	r3, r3, #3
 8001906:	4313      	orrs	r3, r2
 8001908:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800190a:	f7ff fc1f 	bl	800114c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190e:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001910:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001912:	2b01      	cmp	r3, #1
 8001914:	d114      	bne.n	8001940 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001916:	6863      	ldr	r3, [r4, #4]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b04      	cmp	r3, #4
 800191e:	d0ac      	beq.n	800187a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001920:	f7ff fc14 	bl	800114c <HAL_GetTick>
 8001924:	1bc0      	subs	r0, r0, r7
 8001926:	4540      	cmp	r0, r8
 8001928:	d9f5      	bls.n	8001916 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800192a:	2003      	movs	r0, #3
 800192c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001930:	2a02      	cmp	r2, #2
 8001932:	d102      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001934:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001938:	e7df      	b.n	80018fa <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193a:	f013 0f02 	tst.w	r3, #2
 800193e:	e7dc      	b.n	80018fa <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001940:	2b02      	cmp	r3, #2
 8001942:	d10f      	bne.n	8001964 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001944:	6863      	ldr	r3, [r4, #4]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b08      	cmp	r3, #8
 800194c:	d095      	beq.n	800187a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194e:	f7ff fbfd 	bl	800114c <HAL_GetTick>
 8001952:	1bc0      	subs	r0, r0, r7
 8001954:	4540      	cmp	r0, r8
 8001956:	d9f5      	bls.n	8001944 <HAL_RCC_ClockConfig+0xe8>
 8001958:	e7e7      	b.n	800192a <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195a:	f7ff fbf7 	bl	800114c <HAL_GetTick>
 800195e:	1bc0      	subs	r0, r0, r7
 8001960:	4540      	cmp	r0, r8
 8001962:	d8e2      	bhi.n	800192a <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001964:	6863      	ldr	r3, [r4, #4]
 8001966:	f013 0f0c 	tst.w	r3, #12
 800196a:	d1f6      	bne.n	800195a <HAL_RCC_ClockConfig+0xfe>
 800196c:	e785      	b.n	800187a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	6813      	ldr	r3, [r2, #0]
 8001970:	f023 0307 	bic.w	r3, r3, #7
 8001974:	4333      	orrs	r3, r6
 8001976:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001978:	6813      	ldr	r3, [r2, #0]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	429e      	cmp	r6, r3
 8001980:	d1a9      	bne.n	80018d6 <HAL_RCC_ClockConfig+0x7a>
 8001982:	e780      	b.n	8001886 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001984:	6863      	ldr	r3, [r4, #4]
 8001986:	68e9      	ldr	r1, [r5, #12]
 8001988:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800198c:	430b      	orrs	r3, r1
 800198e:	6063      	str	r3, [r4, #4]
 8001990:	e77e      	b.n	8001890 <HAL_RCC_ClockConfig+0x34>
 8001992:	bf00      	nop
 8001994:	40022000 	.word	0x40022000
 8001998:	40021000 	.word	0x40021000
 800199c:	0800471f 	.word	0x0800471f
 80019a0:	2000000c 	.word	0x2000000c

080019a4 <HAL_RCC_GetHCLKFreq>:
}
 80019a4:	4b01      	ldr	r3, [pc, #4]	; (80019ac <HAL_RCC_GetHCLKFreq+0x8>)
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	2000000c 	.word	0x2000000c

080019b0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80019ba:	5cd3      	ldrb	r3, [r2, r3]
 80019bc:	4a03      	ldr	r2, [pc, #12]	; (80019cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80019be:	6810      	ldr	r0, [r2, #0]
}    
 80019c0:	40d8      	lsrs	r0, r3
 80019c2:	4770      	bx	lr
 80019c4:	40021000 	.word	0x40021000
 80019c8:	0800472f 	.word	0x0800472f
 80019cc:	2000000c 	.word	0x2000000c

080019d0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80019d2:	4a05      	ldr	r2, [pc, #20]	; (80019e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80019da:	5cd3      	ldrb	r3, [r2, r3]
 80019dc:	4a03      	ldr	r2, [pc, #12]	; (80019ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80019de:	6810      	ldr	r0, [r2, #0]
} 
 80019e0:	40d8      	lsrs	r0, r3
 80019e2:	4770      	bx	lr
 80019e4:	40021000 	.word	0x40021000
 80019e8:	0800472f 	.word	0x0800472f
 80019ec:	2000000c 	.word	0x2000000c

080019f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80019f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019f4:	4604      	mov	r4, r0
 80019f6:	4688      	mov	r8, r1
 80019f8:	4617      	mov	r7, r2
 80019fa:	461d      	mov	r5, r3
 80019fc:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80019fe:	6822      	ldr	r2, [r4, #0]
 8001a00:	6893      	ldr	r3, [r2, #8]
 8001a02:	ea38 0303 	bics.w	r3, r8, r3
 8001a06:	bf0c      	ite	eq
 8001a08:	2301      	moveq	r3, #1
 8001a0a:	2300      	movne	r3, #0
 8001a0c:	429f      	cmp	r7, r3
 8001a0e:	d102      	bne.n	8001a16 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001a10:	2000      	movs	r0, #0
}
 8001a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001a16:	1c6b      	adds	r3, r5, #1
 8001a18:	d0f2      	beq.n	8001a00 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001a1a:	bb55      	cbnz	r5, 8001a72 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001a24:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001a26:	6862      	ldr	r2, [r4, #4]
 8001a28:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001a2c:	d10a      	bne.n	8001a44 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001a2e:	68a2      	ldr	r2, [r4, #8]
 8001a30:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001a34:	d002      	beq.n	8001a3c <SPI_WaitFlagStateUntilTimeout+0x4c>
 8001a36:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001a3a:	d103      	bne.n	8001a44 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a42:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001a44:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a46:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001a4a:	d109      	bne.n	8001a60 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a52:	0412      	lsls	r2, r2, #16
 8001a54:	0c12      	lsrs	r2, r2, #16
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a5e:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8001a60:	2301      	movs	r3, #1
 8001a62:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001a66:	2300      	movs	r3, #0
 8001a68:	2003      	movs	r0, #3
 8001a6a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001a72:	f7ff fb6b 	bl	800114c <HAL_GetTick>
 8001a76:	1b80      	subs	r0, r0, r6
 8001a78:	4285      	cmp	r5, r0
 8001a7a:	d8c0      	bhi.n	80019fe <SPI_WaitFlagStateUntilTimeout+0xe>
 8001a7c:	e7ce      	b.n	8001a1c <SPI_WaitFlagStateUntilTimeout+0x2c>

08001a7e <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001a7e:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a80:	460b      	mov	r3, r1
 8001a82:	9200      	str	r2, [sp, #0]
 8001a84:	2180      	movs	r1, #128	; 0x80
 8001a86:	2200      	movs	r2, #0
{
 8001a88:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a8a:	f7ff ffb1 	bl	80019f0 <SPI_WaitFlagStateUntilTimeout>
 8001a8e:	b120      	cbz	r0, 8001a9a <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8001a90:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a92:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a94:	f043 0320 	orr.w	r3, r3, #32
 8001a98:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8001a9a:	b002      	add	sp, #8
 8001a9c:	bd10      	pop	{r4, pc}

08001a9e <HAL_SPI_Transmit>:
{
 8001a9e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001aa2:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001aa4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001aa8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001aaa:	2b01      	cmp	r3, #1
{
 8001aac:	460d      	mov	r5, r1
 8001aae:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001ab0:	f000 809c 	beq.w	8001bec <HAL_SPI_Transmit+0x14e>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001aba:	f7ff fb47 	bl	800114c <HAL_GetTick>
 8001abe:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8001ac0:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001ac4:	b2c0      	uxtb	r0, r0
 8001ac6:	2801      	cmp	r0, #1
 8001ac8:	f040 808e 	bne.w	8001be8 <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0U))
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d04e      	beq.n	8001b6e <HAL_SPI_Transmit+0xd0>
 8001ad0:	f1b8 0f00 	cmp.w	r8, #0
 8001ad4:	d04b      	beq.n	8001b6e <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ae0:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001ae2:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001ae6:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ae8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001aea:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001aec:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001aee:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001af0:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001af6:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8001af8:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001afc:	bf02      	ittt	eq
 8001afe:	681a      	ldreq	r2, [r3, #0]
 8001b00:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8001b04:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001b0a:	bf5e      	ittt	pl
 8001b0c:	681a      	ldrpl	r2, [r3, #0]
 8001b0e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001b12:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b14:	68e2      	ldr	r2, [r4, #12]
 8001b16:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001b1a:	6862      	ldr	r2, [r4, #4]
 8001b1c:	d138      	bne.n	8001b90 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001b1e:	b11a      	cbz	r2, 8001b28 <HAL_SPI_Transmit+0x8a>
 8001b20:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001b22:	b292      	uxth	r2, r2
 8001b24:	2a01      	cmp	r2, #1
 8001b26:	d106      	bne.n	8001b36 <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8001b28:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001b2c:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8001b2e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001b36:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	b993      	cbnz	r3, 8001b62 <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001b3c:	9700      	str	r7, [sp, #0]
 8001b3e:	4633      	mov	r3, r6
 8001b40:	2201      	movs	r2, #1
 8001b42:	2102      	movs	r1, #2
 8001b44:	4620      	mov	r0, r4
 8001b46:	f7ff ff53 	bl	80019f0 <SPI_WaitFlagStateUntilTimeout>
 8001b4a:	b978      	cbnz	r0, 8001b6c <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001b4c:	463a      	mov	r2, r7
 8001b4e:	4631      	mov	r1, r6
 8001b50:	4620      	mov	r0, r4
 8001b52:	f7ff ff94 	bl	8001a7e <SPI_CheckFlag_BSY>
 8001b56:	2800      	cmp	r0, #0
 8001b58:	d038      	beq.n	8001bcc <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b5a:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8001b5c:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b5e:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8001b60:	e005      	b.n	8001b6e <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b62:	6823      	ldr	r3, [r4, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	0790      	lsls	r0, r2, #30
 8001b68:	d4de      	bmi.n	8001b28 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001b6a:	b94e      	cbnz	r6, 8001b80 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8001b6c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001b74:	2300      	movs	r3, #0
 8001b76:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001b7a:	b004      	add	sp, #16
 8001b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001b80:	1c71      	adds	r1, r6, #1
 8001b82:	d0d8      	beq.n	8001b36 <HAL_SPI_Transmit+0x98>
 8001b84:	f7ff fae2 	bl	800114c <HAL_GetTick>
 8001b88:	1bc0      	subs	r0, r0, r7
 8001b8a:	4286      	cmp	r6, r0
 8001b8c:	d8d3      	bhi.n	8001b36 <HAL_SPI_Transmit+0x98>
 8001b8e:	e7ed      	b.n	8001b6c <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001b90:	b11a      	cbz	r2, 8001b9a <HAL_SPI_Transmit+0xfc>
 8001b92:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001b94:	b292      	uxth	r2, r2
 8001b96:	2a01      	cmp	r2, #1
 8001b98:	d106      	bne.n	8001ba8 <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001b9a:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001b9e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001ba0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001ba8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0c5      	beq.n	8001b3c <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bb0:	6823      	ldr	r3, [r4, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	0792      	lsls	r2, r2, #30
 8001bb6:	d4f0      	bmi.n	8001b9a <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001bb8:	2e00      	cmp	r6, #0
 8001bba:	d0d7      	beq.n	8001b6c <HAL_SPI_Transmit+0xce>
 8001bbc:	1c73      	adds	r3, r6, #1
 8001bbe:	d0f3      	beq.n	8001ba8 <HAL_SPI_Transmit+0x10a>
 8001bc0:	f7ff fac4 	bl	800114c <HAL_GetTick>
 8001bc4:	1bc0      	subs	r0, r0, r7
 8001bc6:	4286      	cmp	r6, r0
 8001bc8:	d8ee      	bhi.n	8001ba8 <HAL_SPI_Transmit+0x10a>
 8001bca:	e7cf      	b.n	8001b6c <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001bcc:	68a3      	ldr	r3, [r4, #8]
 8001bce:	b933      	cbnz	r3, 8001bde <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bd0:	9303      	str	r3, [sp, #12]
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	9203      	str	r2, [sp, #12]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	9303      	str	r3, [sp, #12]
 8001bdc:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bde:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001be0:	3000      	adds	r0, #0
 8001be2:	bf18      	it	ne
 8001be4:	2001      	movne	r0, #1
 8001be6:	e7c2      	b.n	8001b6e <HAL_SPI_Transmit+0xd0>
 8001be8:	2002      	movs	r0, #2
 8001bea:	e7c0      	b.n	8001b6e <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8001bec:	2002      	movs	r0, #2
 8001bee:	e7c4      	b.n	8001b7a <HAL_SPI_Transmit+0xdc>

08001bf0 <HAL_SPI_TransmitReceive>:
{
 8001bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bf4:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8001bf6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001bfa:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8001bfc:	2b01      	cmp	r3, #1
{
 8001bfe:	4604      	mov	r4, r0
 8001c00:	460d      	mov	r5, r1
 8001c02:	4616      	mov	r6, r2
 8001c04:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8001c06:	f000 80ee 	beq.w	8001de6 <HAL_SPI_TransmitReceive+0x1f6>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001c10:	f7ff fa9c 	bl	800114c <HAL_GetTick>
  tmp  = hspi->State;
 8001c14:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8001c18:	4680      	mov	r8, r0
  tmp  = hspi->State;
 8001c1a:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001c1c:	2b01      	cmp	r3, #1
  tmp1 = hspi->Init.Mode;
 8001c1e:	6861      	ldr	r1, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001c20:	d00a      	beq.n	8001c38 <HAL_SPI_TransmitReceive+0x48>
 8001c22:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001c26:	f040 80dc 	bne.w	8001de2 <HAL_SPI_TransmitReceive+0x1f2>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001c2a:	68a2      	ldr	r2, [r4, #8]
 8001c2c:	2a00      	cmp	r2, #0
 8001c2e:	f040 80d8 	bne.w	8001de2 <HAL_SPI_TransmitReceive+0x1f2>
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	f040 80d5 	bne.w	8001de2 <HAL_SPI_TransmitReceive+0x1f2>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c38:	2d00      	cmp	r5, #0
 8001c3a:	d04e      	beq.n	8001cda <HAL_SPI_TransmitReceive+0xea>
 8001c3c:	2e00      	cmp	r6, #0
 8001c3e:	d04c      	beq.n	8001cda <HAL_SPI_TransmitReceive+0xea>
 8001c40:	f1b9 0f00 	cmp.w	r9, #0
 8001c44:	d049      	beq.n	8001cda <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8001c46:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c4a:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8001c4c:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c4e:	bf04      	itt	eq
 8001c50:	2305      	moveq	r3, #5
 8001c52:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001c5a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c5c:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c5e:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001c60:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001c64:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c68:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001c6a:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c6e:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001c70:	bf58      	it	pl
 8001c72:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c74:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001c76:	bf58      	it	pl
 8001c78:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001c7c:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001c80:	bf58      	it	pl
 8001c82:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c84:	68e2      	ldr	r2, [r4, #12]
 8001c86:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001c8a:	d15d      	bne.n	8001d48 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001c8c:	b119      	cbz	r1, 8001c96 <HAL_SPI_TransmitReceive+0xa6>
 8001c8e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001c90:	b292      	uxth	r2, r2
 8001c92:	2a01      	cmp	r2, #1
 8001c94:	d106      	bne.n	8001ca4 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001c96:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001c9a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001c9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001ca4:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ca8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	b9bb      	cbnz	r3, 8001cde <HAL_SPI_TransmitReceive+0xee>
 8001cae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	b9a3      	cbnz	r3, 8001cde <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001cb4:	f8cd 8000 	str.w	r8, [sp]
 8001cb8:	463b      	mov	r3, r7
 8001cba:	2201      	movs	r2, #1
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f7ff fe96 	bl	80019f0 <SPI_WaitFlagStateUntilTimeout>
 8001cc4:	2800      	cmp	r0, #0
 8001cc6:	d135      	bne.n	8001d34 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001cc8:	4642      	mov	r2, r8
 8001cca:	4639      	mov	r1, r7
 8001ccc:	4620      	mov	r0, r4
 8001cce:	f7ff fed6 	bl	8001a7e <SPI_CheckFlag_BSY>
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	d07a      	beq.n	8001dcc <HAL_SPI_TransmitReceive+0x1dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cd6:	2320      	movs	r3, #32
 8001cd8:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001cda:	2001      	movs	r0, #1
 8001cdc:	e02b      	b.n	8001d36 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001cde:	f1b9 0f00 	cmp.w	r9, #0
 8001ce2:	d00f      	beq.n	8001d04 <HAL_SPI_TransmitReceive+0x114>
 8001ce4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b163      	cbz	r3, 8001d04 <HAL_SPI_TransmitReceive+0x114>
 8001cea:	6823      	ldr	r3, [r4, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	0791      	lsls	r1, r2, #30
 8001cf0:	d508      	bpl.n	8001d04 <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 8001cf2:	f04f 0900 	mov.w	r9, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001cf6:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001cfa:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001cfc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001d04:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	b163      	cbz	r3, 8001d24 <HAL_SPI_TransmitReceive+0x134>
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	07d2      	lsls	r2, r2, #31
 8001d10:	d508      	bpl.n	8001d24 <HAL_SPI_TransmitReceive+0x134>
        txallowed = 1U;
 8001d12:	f04f 0901 	mov.w	r9, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8001d1c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001d24:	1c78      	adds	r0, r7, #1
 8001d26:	d0bf      	beq.n	8001ca8 <HAL_SPI_TransmitReceive+0xb8>
 8001d28:	f7ff fa10 	bl	800114c <HAL_GetTick>
 8001d2c:	eba0 0008 	sub.w	r0, r0, r8
 8001d30:	4287      	cmp	r7, r0
 8001d32:	d8b9      	bhi.n	8001ca8 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8001d34:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001d36:	2301      	movs	r3, #1
 8001d38:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001d42:	b005      	add	sp, #20
 8001d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001d48:	b119      	cbz	r1, 8001d52 <HAL_SPI_TransmitReceive+0x162>
 8001d4a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001d4c:	b292      	uxth	r2, r2
 8001d4e:	2a01      	cmp	r2, #1
 8001d50:	d106      	bne.n	8001d60 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8001d52:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001d56:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8001d58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001d60:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d64:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	b91b      	cbnz	r3, 8001d72 <HAL_SPI_TransmitReceive+0x182>
 8001d6a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0a0      	beq.n	8001cb4 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001d72:	f1b9 0f00 	cmp.w	r9, #0
 8001d76:	d00f      	beq.n	8001d98 <HAL_SPI_TransmitReceive+0x1a8>
 8001d78:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	b163      	cbz	r3, 8001d98 <HAL_SPI_TransmitReceive+0x1a8>
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	0791      	lsls	r1, r2, #30
 8001d84:	d508      	bpl.n	8001d98 <HAL_SPI_TransmitReceive+0x1a8>
        txallowed = 0U;
 8001d86:	f04f 0900 	mov.w	r9, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001d8a:	782a      	ldrb	r2, [r5, #0]
 8001d8c:	3501      	adds	r5, #1
 8001d8e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001d90:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001d98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	b16b      	cbz	r3, 8001dba <HAL_SPI_TransmitReceive+0x1ca>
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	07d2      	lsls	r2, r2, #31
 8001da4:	d509      	bpl.n	8001dba <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8001da6:	f04f 0901 	mov.w	r9, #1
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	3601      	adds	r6, #1
 8001dae:	f806 3c01 	strb.w	r3, [r6, #-1]
        hspi->RxXferCount--;
 8001db2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001dba:	1c7b      	adds	r3, r7, #1
 8001dbc:	d0d2      	beq.n	8001d64 <HAL_SPI_TransmitReceive+0x174>
 8001dbe:	f7ff f9c5 	bl	800114c <HAL_GetTick>
 8001dc2:	eba0 0008 	sub.w	r0, r0, r8
 8001dc6:	4287      	cmp	r7, r0
 8001dc8:	d8cc      	bhi.n	8001d64 <HAL_SPI_TransmitReceive+0x174>
 8001dca:	e7b3      	b.n	8001d34 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dcc:	68a3      	ldr	r3, [r4, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1b1      	bne.n	8001d36 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	9003      	str	r0, [sp, #12]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	9203      	str	r2, [sp, #12]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	9303      	str	r3, [sp, #12]
 8001dde:	9b03      	ldr	r3, [sp, #12]
 8001de0:	e7a9      	b.n	8001d36 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8001de2:	2002      	movs	r0, #2
 8001de4:	e7a7      	b.n	8001d36 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8001de6:	2002      	movs	r0, #2
 8001de8:	e7ab      	b.n	8001d42 <HAL_SPI_TransmitReceive+0x152>

08001dea <HAL_SPI_Receive>:
{
 8001dea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001dee:	461e      	mov	r6, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001df0:	6843      	ldr	r3, [r0, #4]
{
 8001df2:	4604      	mov	r4, r0
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001df4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8001df8:	460d      	mov	r5, r1
 8001dfa:	4690      	mov	r8, r2
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001dfc:	d10c      	bne.n	8001e18 <HAL_SPI_Receive+0x2e>
 8001dfe:	6883      	ldr	r3, [r0, #8]
 8001e00:	b953      	cbnz	r3, 8001e18 <HAL_SPI_Receive+0x2e>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001e02:	2304      	movs	r3, #4
 8001e04:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 8001e08:	4613      	mov	r3, r2
 8001e0a:	9600      	str	r6, [sp, #0]
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	f7ff feef 	bl	8001bf0 <HAL_SPI_TransmitReceive>
}
 8001e12:	b002      	add	sp, #8
 8001e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8001e18:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	f000 8081 	beq.w	8001f24 <HAL_SPI_Receive+0x13a>
 8001e22:	2301      	movs	r3, #1
 8001e24:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001e28:	f7ff f990 	bl	800114c <HAL_GetTick>
 8001e2c:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8001e2e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001e32:	b2c0      	uxtb	r0, r0
 8001e34:	2801      	cmp	r0, #1
 8001e36:	d173      	bne.n	8001f20 <HAL_SPI_Receive+0x136>
  if((pData == NULL ) || (Size == 0U))
 8001e38:	2d00      	cmp	r5, #0
 8001e3a:	d058      	beq.n	8001eee <HAL_SPI_Receive+0x104>
 8001e3c:	f1b8 0f00 	cmp.w	r8, #0
 8001e40:	d055      	beq.n	8001eee <HAL_SPI_Receive+0x104>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e42:	2304      	movs	r3, #4
 8001e44:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e4c:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8001e4e:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8001e52:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001e54:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001e56:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e58:	6463      	str	r3, [r4, #68]	; 0x44
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e5a:	68a3      	ldr	r3, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e5c:	63a5      	str	r5, [r4, #56]	; 0x38
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e62:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferSize  = Size;
 8001e64:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 8001e68:	bf02      	ittt	eq
 8001e6a:	681a      	ldreq	r2, [r3, #0]
 8001e6c:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8001e70:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001e76:	bf5e      	ittt	pl
 8001e78:	681a      	ldrpl	r2, [r3, #0]
 8001e7a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001e7e:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001e80:	68e3      	ldr	r3, [r4, #12]
 8001e82:	b1cb      	cbz	r3, 8001eb8 <HAL_SPI_Receive+0xce>
    while(hspi->RxXferCount > 0U)
 8001e84:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	b1d3      	cbz	r3, 8001ec0 <HAL_SPI_Receive+0xd6>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	07d2      	lsls	r2, r2, #31
 8001e90:	d53c      	bpl.n	8001f0c <HAL_SPI_Receive+0x122>
        *((uint16_t*)pData) = hspi->Instance->DR;
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 8001e98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001ea0:	e7f0      	b.n	8001e84 <HAL_SPI_Receive+0x9a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ea2:	6823      	ldr	r3, [r4, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	07d0      	lsls	r0, r2, #31
 8001ea8:	d51f      	bpl.n	8001eea <HAL_SPI_Receive+0x100>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8001eaa:	7b1b      	ldrb	r3, [r3, #12]
 8001eac:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 8001eb0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while(hspi->RxXferCount > 0U)
 8001eb8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_SPI_Receive+0xb8>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ec0:	6863      	ldr	r3, [r4, #4]
 8001ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ec6:	d10b      	bne.n	8001ee0 <HAL_SPI_Receive+0xf6>
 8001ec8:	68a3      	ldr	r3, [r4, #8]
 8001eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ece:	d002      	beq.n	8001ed6 <HAL_SPI_Receive+0xec>
 8001ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed4:	d104      	bne.n	8001ee0 <HAL_SPI_Receive+0xf6>
    __HAL_SPI_DISABLE(hspi);
 8001ed6:	6822      	ldr	r2, [r4, #0]
 8001ed8:	6813      	ldr	r3, [r2, #0]
 8001eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ede:	6013      	str	r3, [r2, #0]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ee0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001ee2:	3000      	adds	r0, #0
 8001ee4:	bf18      	it	ne
 8001ee6:	2001      	movne	r0, #1
 8001ee8:	e001      	b.n	8001eee <HAL_SPI_Receive+0x104>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001eea:	b93e      	cbnz	r6, 8001efc <HAL_SPI_Receive+0x112>
          errorcode = HAL_TIMEOUT;
 8001eec:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8001efa:	e78a      	b.n	8001e12 <HAL_SPI_Receive+0x28>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001efc:	1c71      	adds	r1, r6, #1
 8001efe:	d0db      	beq.n	8001eb8 <HAL_SPI_Receive+0xce>
 8001f00:	f7ff f924 	bl	800114c <HAL_GetTick>
 8001f04:	1bc0      	subs	r0, r0, r7
 8001f06:	4286      	cmp	r6, r0
 8001f08:	d8d6      	bhi.n	8001eb8 <HAL_SPI_Receive+0xce>
 8001f0a:	e7ef      	b.n	8001eec <HAL_SPI_Receive+0x102>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001f0c:	2e00      	cmp	r6, #0
 8001f0e:	d0ed      	beq.n	8001eec <HAL_SPI_Receive+0x102>
 8001f10:	1c73      	adds	r3, r6, #1
 8001f12:	d0b7      	beq.n	8001e84 <HAL_SPI_Receive+0x9a>
 8001f14:	f7ff f91a 	bl	800114c <HAL_GetTick>
 8001f18:	1bc0      	subs	r0, r0, r7
 8001f1a:	4286      	cmp	r6, r0
 8001f1c:	d8b2      	bhi.n	8001e84 <HAL_SPI_Receive+0x9a>
 8001f1e:	e7e5      	b.n	8001eec <HAL_SPI_Receive+0x102>
    errorcode = HAL_BUSY;
 8001f20:	2002      	movs	r0, #2
 8001f22:	e7e4      	b.n	8001eee <HAL_SPI_Receive+0x104>
  __HAL_LOCK(hspi);
 8001f24:	2002      	movs	r0, #2
 8001f26:	e774      	b.n	8001e12 <HAL_SPI_Receive+0x28>

08001f28 <HAL_SPI_GetState>:
  return hspi->State;
 8001f28:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8001f2c:	4770      	bx	lr

08001f2e <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f2e:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001f30:	4604      	mov	r4, r0
 8001f32:	2800      	cmp	r0, #0
 8001f34:	d034      	beq.n	8001fa0 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001f3a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001f3e:	b90b      	cbnz	r3, 8001f44 <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f40:	f001 fcb4 	bl	80038ac <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f44:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f46:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f48:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001f4c:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f4e:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f54:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f56:	6863      	ldr	r3, [r4, #4]
 8001f58:	69a2      	ldr	r2, [r4, #24]
 8001f5a:	4303      	orrs	r3, r0
 8001f5c:	68e0      	ldr	r0, [r4, #12]
 8001f5e:	4303      	orrs	r3, r0
 8001f60:	6920      	ldr	r0, [r4, #16]
 8001f62:	4303      	orrs	r3, r0
 8001f64:	6960      	ldr	r0, [r4, #20]
 8001f66:	4303      	orrs	r3, r0
 8001f68:	69e0      	ldr	r0, [r4, #28]
 8001f6a:	4303      	orrs	r3, r0
 8001f6c:	6a20      	ldr	r0, [r4, #32]
 8001f6e:	4303      	orrs	r3, r0
 8001f70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001f72:	4303      	orrs	r3, r0
 8001f74:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001f78:	4303      	orrs	r3, r0
 8001f7a:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001f7c:	0c12      	lsrs	r2, r2, #16
 8001f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f80:	f002 0204 	and.w	r2, r2, #4
 8001f84:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001f86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001f88:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001f8a:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f8c:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f8e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f94:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001f96:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f98:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001f9a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8001f9e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001fa0:	2001      	movs	r0, #1
}
 8001fa2:	bd10      	pop	{r4, pc}

08001fa4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fa4:	6803      	ldr	r3, [r0, #0]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001fac:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	f022 0201 	bic.w	r2, r2, #1
 8001fb4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001fb6:	2320      	movs	r3, #32
 8001fb8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001fbc:	4770      	bx	lr
	...

08001fc0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fc4:	6805      	ldr	r5, [r0, #0]
 8001fc6:	68c2      	ldr	r2, [r0, #12]
 8001fc8:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fca:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fd4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001fd6:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001fdc:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001fe0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fe4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fea:	696b      	ldr	r3, [r5, #20]
 8001fec:	6982      	ldr	r2, [r0, #24]
 8001fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001ff6:	4b40      	ldr	r3, [pc, #256]	; (80020f8 <UART_SetConfig+0x138>)
{
 8001ff8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8001ffa:	429d      	cmp	r5, r3
 8001ffc:	f04f 0419 	mov.w	r4, #25
 8002000:	d146      	bne.n	8002090 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002002:	f7ff fce5 	bl	80019d0 <HAL_RCC_GetPCLK2Freq>
 8002006:	fb04 f300 	mul.w	r3, r4, r0
 800200a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800200e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002012:	00b6      	lsls	r6, r6, #2
 8002014:	fbb3 f3f6 	udiv	r3, r3, r6
 8002018:	fbb3 f3f8 	udiv	r3, r3, r8
 800201c:	011e      	lsls	r6, r3, #4
 800201e:	f7ff fcd7 	bl	80019d0 <HAL_RCC_GetPCLK2Freq>
 8002022:	4360      	muls	r0, r4
 8002024:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	fbb0 f7f3 	udiv	r7, r0, r3
 800202e:	f7ff fccf 	bl	80019d0 <HAL_RCC_GetPCLK2Freq>
 8002032:	4360      	muls	r0, r4
 8002034:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	fbb0 f3f3 	udiv	r3, r0, r3
 800203e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002042:	fb08 7313 	mls	r3, r8, r3, r7
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	3332      	adds	r3, #50	; 0x32
 800204a:	fbb3 f3f8 	udiv	r3, r3, r8
 800204e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002052:	f7ff fcbd 	bl	80019d0 <HAL_RCC_GetPCLK2Freq>
 8002056:	4360      	muls	r0, r4
 8002058:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800205c:	0092      	lsls	r2, r2, #2
 800205e:	fbb0 faf2 	udiv	sl, r0, r2
 8002062:	f7ff fcb5 	bl	80019d0 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002066:	4360      	muls	r0, r4
 8002068:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002072:	fbb3 f3f8 	udiv	r3, r3, r8
 8002076:	fb08 a313 	mls	r3, r8, r3, sl
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	3332      	adds	r3, #50	; 0x32
 800207e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	433b      	orrs	r3, r7
 8002088:	4433      	add	r3, r6
 800208a:	60ab      	str	r3, [r5, #8]
 800208c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002090:	f7ff fc8e 	bl	80019b0 <HAL_RCC_GetPCLK1Freq>
 8002094:	fb04 f300 	mul.w	r3, r4, r0
 8002098:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800209c:	f04f 0864 	mov.w	r8, #100	; 0x64
 80020a0:	00b6      	lsls	r6, r6, #2
 80020a2:	fbb3 f3f6 	udiv	r3, r3, r6
 80020a6:	fbb3 f3f8 	udiv	r3, r3, r8
 80020aa:	011e      	lsls	r6, r3, #4
 80020ac:	f7ff fc80 	bl	80019b0 <HAL_RCC_GetPCLK1Freq>
 80020b0:	4360      	muls	r0, r4
 80020b2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	fbb0 f7f3 	udiv	r7, r0, r3
 80020bc:	f7ff fc78 	bl	80019b0 <HAL_RCC_GetPCLK1Freq>
 80020c0:	4360      	muls	r0, r4
 80020c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020cc:	fbb3 f3f8 	udiv	r3, r3, r8
 80020d0:	fb08 7313 	mls	r3, r8, r3, r7
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	3332      	adds	r3, #50	; 0x32
 80020d8:	fbb3 f3f8 	udiv	r3, r3, r8
 80020dc:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80020e0:	f7ff fc66 	bl	80019b0 <HAL_RCC_GetPCLK1Freq>
 80020e4:	4360      	muls	r0, r4
 80020e6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80020ea:	0092      	lsls	r2, r2, #2
 80020ec:	fbb0 faf2 	udiv	sl, r0, r2
 80020f0:	f7ff fc5e 	bl	80019b0 <HAL_RCC_GetPCLK1Freq>
 80020f4:	e7b7      	b.n	8002066 <UART_SetConfig+0xa6>
 80020f6:	bf00      	nop
 80020f8:	40013800 	.word	0x40013800

080020fc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fe:	4604      	mov	r4, r0
 8002100:	460e      	mov	r6, r1
 8002102:	4617      	mov	r7, r2
 8002104:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002106:	6821      	ldr	r1, [r4, #0]
 8002108:	680b      	ldr	r3, [r1, #0]
 800210a:	ea36 0303 	bics.w	r3, r6, r3
 800210e:	d101      	bne.n	8002114 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002110:	2000      	movs	r0, #0
}
 8002112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002114:	1c6b      	adds	r3, r5, #1
 8002116:	d0f7      	beq.n	8002108 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002118:	b995      	cbnz	r5, 8002140 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800211a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800211c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002124:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002126:	695a      	ldr	r2, [r3, #20]
 8002128:	f022 0201 	bic.w	r2, r2, #1
 800212c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800212e:	2320      	movs	r3, #32
 8002130:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002134:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002138:	2300      	movs	r3, #0
 800213a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800213e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002140:	f7ff f804 	bl	800114c <HAL_GetTick>
 8002144:	1bc0      	subs	r0, r0, r7
 8002146:	4285      	cmp	r5, r0
 8002148:	d2dd      	bcs.n	8002106 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800214a:	e7e6      	b.n	800211a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800214c <HAL_UART_Init>:
{
 800214c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800214e:	4604      	mov	r4, r0
 8002150:	b340      	cbz	r0, 80021a4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002152:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002156:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800215a:	b91b      	cbnz	r3, 8002164 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800215c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002160:	f001 fbd8 	bl	8003914 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002164:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002166:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002168:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800216c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800216e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002174:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002176:	f7ff ff23 	bl	8001fc0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800217a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800217c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800218c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002194:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002196:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002198:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800219a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800219e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80021a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021a4:	2001      	movs	r0, #1
}
 80021a6:	bd10      	pop	{r4, pc}

080021a8 <HAL_UART_Transmit>:
{
 80021a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021ac:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80021ae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80021b2:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80021b4:	2b20      	cmp	r3, #32
{
 80021b6:	460d      	mov	r5, r1
 80021b8:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80021ba:	d14e      	bne.n	800225a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 80021bc:	2900      	cmp	r1, #0
 80021be:	d049      	beq.n	8002254 <HAL_UART_Transmit+0xac>
 80021c0:	2a00      	cmp	r2, #0
 80021c2:	d047      	beq.n	8002254 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80021c4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d046      	beq.n	800225a <HAL_UART_Transmit+0xb2>
 80021cc:	2301      	movs	r3, #1
 80021ce:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021d6:	2321      	movs	r3, #33	; 0x21
 80021d8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80021dc:	f7fe ffb6 	bl	800114c <HAL_GetTick>
 80021e0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80021e2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80021e6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80021ea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	b96b      	cbnz	r3, 800220c <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021f0:	463b      	mov	r3, r7
 80021f2:	4632      	mov	r2, r6
 80021f4:	2140      	movs	r1, #64	; 0x40
 80021f6:	4620      	mov	r0, r4
 80021f8:	f7ff ff80 	bl	80020fc <UART_WaitOnFlagUntilTimeout.constprop.3>
 80021fc:	b9a8      	cbnz	r0, 800222a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80021fe:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002200:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8002204:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 800220c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800220e:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002210:	3b01      	subs	r3, #1
 8002212:	b29b      	uxth	r3, r3
 8002214:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002216:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002218:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800221a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800221e:	4620      	mov	r0, r4
 8002220:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002222:	d10e      	bne.n	8002242 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002224:	f7ff ff6a 	bl	80020fc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002228:	b110      	cbz	r0, 8002230 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800222a:	2003      	movs	r0, #3
 800222c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002230:	882b      	ldrh	r3, [r5, #0]
 8002232:	6822      	ldr	r2, [r4, #0]
 8002234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002238:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800223a:	6923      	ldr	r3, [r4, #16]
 800223c:	b943      	cbnz	r3, 8002250 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 800223e:	3502      	adds	r5, #2
 8002240:	e7d3      	b.n	80021ea <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002242:	f7ff ff5b 	bl	80020fc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002246:	2800      	cmp	r0, #0
 8002248:	d1ef      	bne.n	800222a <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	782a      	ldrb	r2, [r5, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	3501      	adds	r5, #1
 8002252:	e7ca      	b.n	80021ea <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002254:	2001      	movs	r0, #1
 8002256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800225a:	2002      	movs	r0, #2
}
 800225c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002260 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8002260:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002264:	2b20      	cmp	r3, #32
 8002266:	d120      	bne.n	80022aa <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 8002268:	b1e9      	cbz	r1, 80022a6 <HAL_UART_Receive_IT+0x46>
 800226a:	b1e2      	cbz	r2, 80022a6 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 800226c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002270:	2b01      	cmp	r3, #1
 8002272:	d01a      	beq.n	80022aa <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8002274:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8002276:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002278:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800227a:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800227c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800227e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002282:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8002284:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002286:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8002288:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800228c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002290:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002292:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8002294:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002296:	f041 0101 	orr.w	r1, r1, #1
 800229a:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800229c:	68d1      	ldr	r1, [r2, #12]
 800229e:	f041 0120 	orr.w	r1, r1, #32
 80022a2:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80022a4:	4770      	bx	lr
      return HAL_ERROR;
 80022a6:	2001      	movs	r0, #1
 80022a8:	4770      	bx	lr
    return HAL_BUSY;
 80022aa:	2002      	movs	r0, #2
}
 80022ac:	4770      	bx	lr

080022ae <HAL_UART_TxCpltCallback>:
 80022ae:	4770      	bx	lr

080022b0 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80022b0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80022b4:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80022b6:	2b22      	cmp	r3, #34	; 0x22
 80022b8:	d136      	bne.n	8002328 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022ba:	6883      	ldr	r3, [r0, #8]
 80022bc:	6901      	ldr	r1, [r0, #16]
 80022be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c2:	6802      	ldr	r2, [r0, #0]
 80022c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80022c6:	d123      	bne.n	8002310 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80022c8:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80022ca:	b9e9      	cbnz	r1, 8002308 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80022cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022d0:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80022d4:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 80022d6:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80022d8:	3c01      	subs	r4, #1
 80022da:	b2a4      	uxth	r4, r4
 80022dc:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80022de:	b98c      	cbnz	r4, 8002304 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80022e0:	6803      	ldr	r3, [r0, #0]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	f022 0220 	bic.w	r2, r2, #32
 80022e8:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f0:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80022fa:	2320      	movs	r3, #32
 80022fc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002300:	f000 fc1a 	bl	8002b38 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8002304:	2000      	movs	r0, #0
}
 8002306:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	f823 2b01 	strh.w	r2, [r3], #1
 800230e:	e7e1      	b.n	80022d4 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002310:	b921      	cbnz	r1, 800231c <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002312:	1c59      	adds	r1, r3, #1
 8002314:	6852      	ldr	r2, [r2, #4]
 8002316:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002318:	701a      	strb	r2, [r3, #0]
 800231a:	e7dc      	b.n	80022d6 <UART_Receive_IT+0x26>
 800231c:	6852      	ldr	r2, [r2, #4]
 800231e:	1c59      	adds	r1, r3, #1
 8002320:	6281      	str	r1, [r0, #40]	; 0x28
 8002322:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002326:	e7f7      	b.n	8002318 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002328:	2002      	movs	r0, #2
 800232a:	bd10      	pop	{r4, pc}

0800232c <HAL_UART_ErrorCallback>:
 800232c:	4770      	bx	lr
	...

08002330 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002330:	6803      	ldr	r3, [r0, #0]
{
 8002332:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002334:	681a      	ldr	r2, [r3, #0]
{
 8002336:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8002338:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800233a:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800233c:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 800233e:	d107      	bne.n	8002350 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002340:	0696      	lsls	r6, r2, #26
 8002342:	d55a      	bpl.n	80023fa <HAL_UART_IRQHandler+0xca>
 8002344:	068d      	lsls	r5, r1, #26
 8002346:	d558      	bpl.n	80023fa <HAL_UART_IRQHandler+0xca>
}
 8002348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800234c:	f7ff bfb0 	b.w	80022b0 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002350:	f015 0501 	ands.w	r5, r5, #1
 8002354:	d102      	bne.n	800235c <HAL_UART_IRQHandler+0x2c>
 8002356:	f411 7f90 	tst.w	r1, #288	; 0x120
 800235a:	d04e      	beq.n	80023fa <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800235c:	07d3      	lsls	r3, r2, #31
 800235e:	d505      	bpl.n	800236c <HAL_UART_IRQHandler+0x3c>
 8002360:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002362:	bf42      	ittt	mi
 8002364:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002366:	f043 0301 	orrmi.w	r3, r3, #1
 800236a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800236c:	0750      	lsls	r0, r2, #29
 800236e:	d504      	bpl.n	800237a <HAL_UART_IRQHandler+0x4a>
 8002370:	b11d      	cbz	r5, 800237a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002372:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800237a:	0793      	lsls	r3, r2, #30
 800237c:	d504      	bpl.n	8002388 <HAL_UART_IRQHandler+0x58>
 800237e:	b11d      	cbz	r5, 8002388 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002380:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002382:	f043 0304 	orr.w	r3, r3, #4
 8002386:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002388:	0716      	lsls	r6, r2, #28
 800238a:	d504      	bpl.n	8002396 <HAL_UART_IRQHandler+0x66>
 800238c:	b11d      	cbz	r5, 8002396 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800238e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002390:	f043 0308 	orr.w	r3, r3, #8
 8002394:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002396:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002398:	2b00      	cmp	r3, #0
 800239a:	d066      	beq.n	800246a <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800239c:	0695      	lsls	r5, r2, #26
 800239e:	d504      	bpl.n	80023aa <HAL_UART_IRQHandler+0x7a>
 80023a0:	0688      	lsls	r0, r1, #26
 80023a2:	d502      	bpl.n	80023aa <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80023a4:	4620      	mov	r0, r4
 80023a6:	f7ff ff83 	bl	80022b0 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023aa:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 80023ac:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023ae:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80023b2:	0711      	lsls	r1, r2, #28
 80023b4:	d402      	bmi.n	80023bc <HAL_UART_IRQHandler+0x8c>
 80023b6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80023ba:	d01a      	beq.n	80023f2 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80023bc:	f7ff fdf2 	bl	8001fa4 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	0652      	lsls	r2, r2, #25
 80023c6:	d510      	bpl.n	80023ea <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023c8:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80023ca:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d0:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80023d2:	b150      	cbz	r0, 80023ea <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023d4:	4b25      	ldr	r3, [pc, #148]	; (800246c <HAL_UART_IRQHandler+0x13c>)
 80023d6:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023d8:	f7fe ff4a 	bl	8001270 <HAL_DMA_Abort_IT>
 80023dc:	2800      	cmp	r0, #0
 80023de:	d044      	beq.n	800246a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023e0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80023e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80023e8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80023ea:	4620      	mov	r0, r4
 80023ec:	f7ff ff9e 	bl	800232c <HAL_UART_ErrorCallback>
 80023f0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80023f2:	f7ff ff9b 	bl	800232c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f6:	63e5      	str	r5, [r4, #60]	; 0x3c
 80023f8:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023fa:	0616      	lsls	r6, r2, #24
 80023fc:	d527      	bpl.n	800244e <HAL_UART_IRQHandler+0x11e>
 80023fe:	060d      	lsls	r5, r1, #24
 8002400:	d525      	bpl.n	800244e <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002402:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002406:	2a21      	cmp	r2, #33	; 0x21
 8002408:	d12f      	bne.n	800246a <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800240a:	68a2      	ldr	r2, [r4, #8]
 800240c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002410:	6a22      	ldr	r2, [r4, #32]
 8002412:	d117      	bne.n	8002444 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002414:	8811      	ldrh	r1, [r2, #0]
 8002416:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800241a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800241c:	6921      	ldr	r1, [r4, #16]
 800241e:	b979      	cbnz	r1, 8002440 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002420:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002422:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002424:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002426:	3a01      	subs	r2, #1
 8002428:	b292      	uxth	r2, r2
 800242a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800242c:	b9ea      	cbnz	r2, 800246a <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002434:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002440:	3201      	adds	r2, #1
 8002442:	e7ee      	b.n	8002422 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002444:	1c51      	adds	r1, r2, #1
 8002446:	6221      	str	r1, [r4, #32]
 8002448:	7812      	ldrb	r2, [r2, #0]
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	e7ea      	b.n	8002424 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800244e:	0650      	lsls	r0, r2, #25
 8002450:	d50b      	bpl.n	800246a <HAL_UART_IRQHandler+0x13a>
 8002452:	064a      	lsls	r2, r1, #25
 8002454:	d509      	bpl.n	800246a <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002456:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002458:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800245a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800245e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002460:	2320      	movs	r3, #32
 8002462:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002466:	f7ff ff22 	bl	80022ae <HAL_UART_TxCpltCallback>
 800246a:	bd70      	pop	{r4, r5, r6, pc}
 800246c:	08002471 	.word	0x08002471

08002470 <UART_DMAAbortOnError>:
{
 8002470:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002472:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002474:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002476:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002478:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800247a:	f7ff ff57 	bl	800232c <HAL_UART_ErrorCallback>
 800247e:	bd08      	pop	{r3, pc}

08002480 <DBG_print_c>:
/*---------------------------------------------
 * Brief: send string
 *--------------------------------------------*/
void DBG_print_c(U8 c)
{
	if (DBG_printcCB != NULL)
 8002480:	4b02      	ldr	r3, [pc, #8]	; (800248c <DBG_print_c+0xc>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	b10a      	cbz	r2, 800248a <DBG_print_c+0xa>
	{
		DBG_printcCB(c);
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4718      	bx	r3
 800248a:	4770      	bx	lr
 800248c:	20000200 	.word	0x20000200

08002490 <DBG_print_u>:
}
/*---------------------------------------------
 * Brief: send number
 *--------------------------------------------*/
void DBG_print_u(U32 num, U8 len)
{
 8002490:	2300      	movs	r3, #0
	U8 s[11];
	U8 l = 0, n = 0, i = 0;

	for (i = 0; i <= 10; i++)
	{
		s[i] = 0;
 8002492:	461a      	mov	r2, r3
{
 8002494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002496:	b085      	sub	sp, #20
		s[i] = 0;
 8002498:	ad01      	add	r5, sp, #4
 800249a:	555a      	strb	r2, [r3, r5]
 800249c:	3301      	adds	r3, #1
	for (i = 0; i <= 10; i++)
 800249e:	2b0b      	cmp	r3, #11
 80024a0:	d1fb      	bne.n	800249a <DBG_print_u+0xa>
 80024a2:	2300      	movs	r3, #0
	}
	for (i = 0; i <= 10; i++)
	{
		n = num % 10;
 80024a4:	260a      	movs	r6, #10
 80024a6:	fbb0 f7f6 	udiv	r7, r0, r6
 80024aa:	fb06 0017 	mls	r0, r6, r7, r0
 80024ae:	1c5a      	adds	r2, r3, #1
		num /= 10;
		s[l++] = n + '0';
 80024b0:	3030      	adds	r0, #48	; 0x30
 80024b2:	54e8      	strb	r0, [r5, r3]
 80024b4:	b2d4      	uxtb	r4, r2
		if (!num)
 80024b6:	4638      	mov	r0, r7
 80024b8:	b11f      	cbz	r7, 80024c2 <DBG_print_u+0x32>
	for (i = 0; i <= 10; i++)
 80024ba:	2a0b      	cmp	r2, #11
 80024bc:	4613      	mov	r3, r2
 80024be:	d1f2      	bne.n	80024a6 <DBG_print_u+0x16>
 80024c0:	4614      	mov	r4, r2
		{
			break;
		}
	}

	if (len > l)
 80024c2:	428c      	cmp	r4, r1
 80024c4:	d206      	bcs.n	80024d4 <DBG_print_u+0x44>
 80024c6:	2600      	movs	r6, #0
	{
		for (i = 0; i < (len - l); i++)
 80024c8:	1b0c      	subs	r4, r1, r4
 80024ca:	b2f3      	uxtb	r3, r6
 80024cc:	42a3      	cmp	r3, r4
 80024ce:	f106 0601 	add.w	r6, r6, #1
 80024d2:	db0b      	blt.n	80024ec <DBG_print_u+0x5c>
 80024d4:	2400      	movs	r4, #0
		}
	}
	i = 10;
	while (1)
	{
		if (s[i])
 80024d6:	192b      	adds	r3, r5, r4
 80024d8:	7a98      	ldrb	r0, [r3, #10]
 80024da:	b108      	cbz	r0, 80024e0 <DBG_print_u+0x50>
		{
			DBG_print_c(s[i]);
 80024dc:	f7ff ffd0 	bl	8002480 <DBG_print_c>
 80024e0:	3c01      	subs	r4, #1
		}
		if (!i)
 80024e2:	f114 0f0b 	cmn.w	r4, #11
 80024e6:	d1f6      	bne.n	80024d6 <DBG_print_u+0x46>
		{
			break;
		}
		i--;
	}
}
 80024e8:	b005      	add	sp, #20
 80024ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DBG_print_c('0');
 80024ec:	2030      	movs	r0, #48	; 0x30
 80024ee:	f7ff ffc7 	bl	8002480 <DBG_print_c>
 80024f2:	e7ea      	b.n	80024ca <DBG_print_u+0x3a>

080024f4 <DBG_print_h>:
}
/*---------------------------------------------
 * Brief: send hex number
 *--------------------------------------------*/
void DBG_print_h(U8 upcase, U32 hexnum, U8 len)
{
 80024f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f6:	4605      	mov	r5, r0
 80024f8:	b085      	sub	sp, #20
	U8 s[9], i = 0, tmp = 0, l = 0;

	if (!hexnum)
 80024fa:	4608      	mov	r0, r1
 80024fc:	b929      	cbnz	r1, 800250a <DBG_print_h+0x16>
	{
		DBG_print_u(0, len);
 80024fe:	4611      	mov	r1, r2
		{
			break;
		}
		i--;
	}
}
 8002500:	b005      	add	sp, #20
 8002502:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		DBG_print_u(0, len);
 8002506:	f7ff bfc3 	b.w	8002490 <DBG_print_u>
	memset(s, 0, 9);
 800250a:	2300      	movs	r3, #0
 800250c:	429d      	cmp	r5, r3
			s[i] = tmp - 10 + ((upcase) ? 'A' : 'a');
 800250e:	bf14      	ite	ne
 8002510:	2537      	movne	r5, #55	; 0x37
 8002512:	2557      	moveq	r5, #87	; 0x57
	memset(s, 0, 9);
 8002514:	ac01      	add	r4, sp, #4
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	6063      	str	r3, [r4, #4]
 800251a:	7223      	strb	r3, [r4, #8]
		tmp = hexnum % 16;
 800251c:	f000 010f 	and.w	r1, r0, #15
		if ((tmp >= 0) && (tmp <= 9))
 8002520:	2909      	cmp	r1, #9
			s[i] = tmp + '0';
 8002522:	bf94      	ite	ls
 8002524:	3130      	addls	r1, #48	; 0x30
			s[i] = tmp - 10 + ((upcase) ? 'A' : 'a');
 8002526:	1949      	addhi	r1, r1, r5
 8002528:	54e1      	strb	r1, [r4, r3]
	for (i = 0; i < 8; i++)
 800252a:	2b07      	cmp	r3, #7
 800252c:	f103 0101 	add.w	r1, r3, #1
		hexnum /= 16;
 8002530:	ea4f 1010 	mov.w	r0, r0, lsr #4
 8002534:	b2ce      	uxtb	r6, r1
	for (i = 0; i < 8; i++)
 8002536:	d101      	bne.n	800253c <DBG_print_h+0x48>
 8002538:	2608      	movs	r6, #8
 800253a:	e002      	b.n	8002542 <DBG_print_h+0x4e>
 800253c:	460b      	mov	r3, r1
		if (!hexnum)
 800253e:	2800      	cmp	r0, #0
 8002540:	d1ec      	bne.n	800251c <DBG_print_h+0x28>
	if (len > l)
 8002542:	42b2      	cmp	r2, r6
 8002544:	d906      	bls.n	8002554 <DBG_print_h+0x60>
 8002546:	2700      	movs	r7, #0
		for (i = 0; i < (len - l); i++)
 8002548:	1b95      	subs	r5, r2, r6
 800254a:	b2fb      	uxtb	r3, r7
 800254c:	42ab      	cmp	r3, r5
 800254e:	f107 0701 	add.w	r7, r7, #1
 8002552:	db0b      	blt.n	800256c <DBG_print_h+0x78>
 8002554:	4434      	add	r4, r6
 8002556:	f10d 0503 	add.w	r5, sp, #3
		if (s[i])
 800255a:	f814 0901 	ldrb.w	r0, [r4], #-1
 800255e:	b108      	cbz	r0, 8002564 <DBG_print_h+0x70>
			DBG_print_c(s[i]);
 8002560:	f7ff ff8e 	bl	8002480 <DBG_print_c>
		if (!i)
 8002564:	42ac      	cmp	r4, r5
 8002566:	d1f8      	bne.n	800255a <DBG_print_h+0x66>
}
 8002568:	b005      	add	sp, #20
 800256a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DBG_print_c('0');
 800256c:	2030      	movs	r0, #48	; 0x30
 800256e:	f7ff ff87 	bl	8002480 <DBG_print_c>
 8002572:	e7ea      	b.n	800254a <DBG_print_h+0x56>

08002574 <DBG_print_hs>:
/*---------------------------------------------
 * Brief: print hex string
 *--------------------------------------------*/
void DBG_print_hs(U8 upcase, const U8 *buf, U16 len )
{
 8002574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002576:	4607      	mov	r7, r0
 8002578:	4616      	mov	r6, r2
	U16 i = 0;

	if (buf == NULL)
 800257a:	460d      	mov	r5, r1
 800257c:	b179      	cbz	r1, 800259e <DBG_print_hs+0x2a>
 800257e:	460c      	mov	r4, r1
		DBG_print_c('?');
		return;
	}
	while (1)
	{
		DBG_print_h(upcase, *buf, 2);
 8002580:	2202      	movs	r2, #2
 8002582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002586:	4638      	mov	r0, r7
 8002588:	f7ff ffb4 	bl	80024f4 <DBG_print_h>
		i++;
		*buf++;
		if (!len)
 800258c:	b966      	cbnz	r6, 80025a8 <DBG_print_hs+0x34>
		{
			if (*buf == 0)
 800258e:	7823      	ldrb	r3, [r4, #0]
 8002590:	b173      	cbz	r3, 80025b0 <DBG_print_hs+0x3c>
			{
				break;
			}
			else if (i >= 4096)
 8002592:	1b63      	subs	r3, r4, r5
 8002594:	b29b      	uxth	r3, r3
 8002596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800259a:	d3f1      	bcc.n	8002580 <DBG_print_hs+0xc>
 800259c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		DBG_print_c('?');
 800259e:	203f      	movs	r0, #63	; 0x3f
				break;
			}

		}
	}
}
 80025a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		DBG_print_c('?');
 80025a4:	f7ff bf6c 	b.w	8002480 <DBG_print_c>
			if (i >= len)
 80025a8:	1b63      	subs	r3, r4, r5
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	429e      	cmp	r6, r3
 80025ae:	d8e7      	bhi.n	8002580 <DBG_print_hs+0xc>
 80025b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080025b4 <DBG_setup>:
	while (DBGbusy);
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <DBG_setup+0x18>)
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80025bc:	2a00      	cmp	r2, #0
 80025be:	d1fa      	bne.n	80025b6 <DBG_setup+0x2>
	DBGbusy = 1;
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
	DBG_printcCB = cb;
 80025c4:	4a02      	ldr	r2, [pc, #8]	; (80025d0 <DBG_setup+0x1c>)
 80025c6:	6010      	str	r0, [r2, #0]
	DBGbusy = 0;
 80025c8:	7019      	strb	r1, [r3, #0]
 80025ca:	4770      	bx	lr
 80025cc:	20000204 	.word	0x20000204
 80025d0:	20000200 	.word	0x20000200

080025d4 <DBG_print>:
 * + d: signed integer.
 * + u: unsigned integer.
 * + x: hex number.
 *--------------------------------------------*/
void DBG_print(const U8 *s, ...)
{
 80025d4:	b40f      	push	{r0, r1, r2, r3}
	va_list vl;
	U32 timepass = 0;
	U8 len = 0;

	while (DBGbusy && (timepass++ < 1000000));
 80025d6:	4a9c      	ldr	r2, [pc, #624]	; (8002848 <DBG_print+0x274>)
{
 80025d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025dc:	4690      	mov	r8, r2
 80025de:	b08b      	sub	sp, #44	; 0x2c
 80025e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
	while (DBGbusy && (timepass++ < 1000000));
 80025e2:	4b9a      	ldr	r3, [pc, #616]	; (800284c <DBG_print+0x278>)
 80025e4:	7811      	ldrb	r1, [r2, #0]
 80025e6:	b109      	cbz	r1, 80025ec <DBG_print+0x18>
 80025e8:	3b01      	subs	r3, #1
 80025ea:	d1fb      	bne.n	80025e4 <DBG_print+0x10>
	DBGbusy = 1;
 80025ec:	2301      	movs	r3, #1
		if ((dbnum == 0) && step)
 80025ee:	f04f 0a00 	mov.w	sl, #0
 80025f2:	f04f 0b00 	mov.w	fp, #0
	DBGbusy = 1;
 80025f6:	f888 3000 	strb.w	r3, [r8]
	va_start(vl, s);
 80025fa:	ab15      	add	r3, sp, #84	; 0x54
 80025fc:	9301      	str	r3, [sp, #4]
	//va_arg(vl, u8*);
	while(*s)
 80025fe:	7823      	ldrb	r3, [r4, #0]
 8002600:	b933      	cbnz	r3, 8002610 <DBG_print+0x3c>
		DBG_PRINT_NORMAL://
		DBG_print_c(*s);
		*s++;
	}
	va_end(vl);
	DBGbusy = 0;
 8002602:	f888 3000 	strb.w	r3, [r8]
}
 8002606:	b00b      	add	sp, #44	; 0x2c
 8002608:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800260c:	b004      	add	sp, #16
 800260e:	4770      	bx	lr
		if(*s == '%')
 8002610:	2b25      	cmp	r3, #37	; 0x25
 8002612:	d11d      	bne.n	8002650 <DBG_print+0x7c>
			if ((*s >= '0') && (*s <= '9'))
 8002614:	7865      	ldrb	r5, [r4, #1]
 8002616:	3d30      	subs	r5, #48	; 0x30
 8002618:	b2eb      	uxtb	r3, r5
 800261a:	2b09      	cmp	r3, #9
				len += *s - '0';
 800261c:	bf9d      	ittte	ls
 800261e:	78a3      	ldrbls	r3, [r4, #2]
				len = (*s - '0') * 10;
 8002620:	eb05 0585 	addls.w	r5, r5, r5, lsl #2
				len += *s - '0';
 8002624:	3b30      	subls	r3, #48	; 0x30
			*s++;
 8002626:	3401      	addhi	r4, #1
				*s++;
 8002628:	bf9c      	itt	ls
 800262a:	3403      	addls	r4, #3
				len += *s - '0';
 800262c:	eb03 0545 	addls.w	r5, r3, r5, lsl #1
			switch(*s)
 8002630:	7823      	ldrb	r3, [r4, #0]
			len = 0;
 8002632:	bf8c      	ite	hi
 8002634:	2500      	movhi	r5, #0
				len += *s - '0';
 8002636:	f005 05ff 	andls.w	r5, r5, #255	; 0xff
			switch(*s)
 800263a:	2b64      	cmp	r3, #100	; 0x64
 800263c:	d05a      	beq.n	80026f4 <DBG_print+0x120>
 800263e:	d815      	bhi.n	800266c <DBG_print+0x98>
 8002640:	2b58      	cmp	r3, #88	; 0x58
 8002642:	f000 80a6 	beq.w	8002792 <DBG_print+0x1be>
 8002646:	d808      	bhi.n	800265a <DBG_print+0x86>
 8002648:	2b48      	cmp	r3, #72	; 0x48
 800264a:	f000 80f6 	beq.w	800283a <DBG_print+0x266>
					*s--;
 800264e:	3c01      	subs	r4, #1
		DBG_print_c(*s);
 8002650:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002654:	f7ff ff14 	bl	8002480 <DBG_print_c>
 8002658:	e7d1      	b.n	80025fe <DBG_print+0x2a>
			switch(*s)
 800265a:	2b62      	cmp	r3, #98	; 0x62
 800265c:	d05f      	beq.n	800271e <DBG_print+0x14a>
 800265e:	2b63      	cmp	r3, #99	; 0x63
 8002660:	d1f5      	bne.n	800264e <DBG_print+0x7a>
					DBG_print_c(va_arg(vl, U8*));
 8002662:	9b01      	ldr	r3, [sp, #4]
 8002664:	1d1a      	adds	r2, r3, #4
 8002666:	9201      	str	r2, [sp, #4]
 8002668:	7818      	ldrb	r0, [r3, #0]
 800266a:	e033      	b.n	80026d4 <DBG_print+0x100>
			switch(*s)
 800266c:	2b73      	cmp	r3, #115	; 0x73
 800266e:	d01b      	beq.n	80026a8 <DBG_print+0xd4>
 8002670:	d80d      	bhi.n	800268e <DBG_print+0xba>
 8002672:	2b66      	cmp	r3, #102	; 0x66
 8002674:	f000 8094 	beq.w	80027a0 <DBG_print+0x1cc>
 8002678:	2b68      	cmp	r3, #104	; 0x68
 800267a:	d1e8      	bne.n	800264e <DBG_print+0x7a>
					DBG_print_hs(0, va_arg(vl, U8*), len);
 800267c:	9b01      	ldr	r3, [sp, #4]
 800267e:	2000      	movs	r0, #0
 8002680:	1d1a      	adds	r2, r3, #4
 8002682:	9201      	str	r2, [sp, #4]
 8002684:	462a      	mov	r2, r5
 8002686:	6819      	ldr	r1, [r3, #0]
					DBG_print_hs(1, va_arg(vl, U8*), len);
 8002688:	f7ff ff74 	bl	8002574 <DBG_print_hs>
					break;
 800268c:	e02c      	b.n	80026e8 <DBG_print+0x114>
			switch(*s)
 800268e:	2b75      	cmp	r3, #117	; 0x75
 8002690:	d03f      	beq.n	8002712 <DBG_print+0x13e>
 8002692:	2b78      	cmp	r3, #120	; 0x78
 8002694:	d1db      	bne.n	800264e <DBG_print+0x7a>
					DBG_print_h(0, va_arg(vl, U32), len);
 8002696:	9b01      	ldr	r3, [sp, #4]
 8002698:	2000      	movs	r0, #0
 800269a:	1d1a      	adds	r2, r3, #4
 800269c:	9201      	str	r2, [sp, #4]
 800269e:	462a      	mov	r2, r5
 80026a0:	6819      	ldr	r1, [r3, #0]
					DBG_print_h(1, va_arg(vl, U32), len);
 80026a2:	f7ff ff27 	bl	80024f4 <DBG_print_h>
					break;
 80026a6:	e01f      	b.n	80026e8 <DBG_print+0x114>
					DBG_print_s(va_arg(vl, U8*), len);
 80026a8:	9b01      	ldr	r3, [sp, #4]
 80026aa:	b2ae      	uxth	r6, r5
 80026ac:	1d1a      	adds	r2, r3, #4
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	9201      	str	r2, [sp, #4]
	if (buf == NULL)
 80026b2:	b173      	cbz	r3, 80026d2 <DBG_print+0xfe>
 80026b4:	2700      	movs	r7, #0
 80026b6:	f103 39ff 	add.w	r9, r3, #4294967295
	while (*buf)
 80026ba:	f819 0f01 	ldrb.w	r0, [r9, #1]!
 80026be:	b960      	cbnz	r0, 80026da <DBG_print+0x106>
	if (len)
 80026c0:	b195      	cbz	r5, 80026e8 <DBG_print+0x114>
		while (i++ < len)
 80026c2:	42be      	cmp	r6, r7
 80026c4:	d910      	bls.n	80026e8 <DBG_print+0x114>
			DBG_print_c(' ');
 80026c6:	2020      	movs	r0, #32
 80026c8:	3701      	adds	r7, #1
 80026ca:	f7ff fed9 	bl	8002480 <DBG_print_c>
 80026ce:	b2bf      	uxth	r7, r7
 80026d0:	e7f7      	b.n	80026c2 <DBG_print+0xee>
		DBG_print_c('?');
 80026d2:	203f      	movs	r0, #63	; 0x3f
					DBG_print_c(va_arg(vl, U8*));
 80026d4:	f7ff fed4 	bl	8002480 <DBG_print_c>
					break;
 80026d8:	e006      	b.n	80026e8 <DBG_print+0x114>
		i++;
 80026da:	3701      	adds	r7, #1
		DBG_print_c(*buf);
 80026dc:	f7ff fed0 	bl	8002480 <DBG_print_c>
		i++;
 80026e0:	b2bf      	uxth	r7, r7
		if (len && (i >= len))
 80026e2:	b11d      	cbz	r5, 80026ec <DBG_print+0x118>
 80026e4:	42be      	cmp	r6, r7
 80026e6:	d8e8      	bhi.n	80026ba <DBG_print+0xe6>
			*s++;
 80026e8:	3401      	adds	r4, #1
			continue;
 80026ea:	e788      	b.n	80025fe <DBG_print+0x2a>
		else if (i >= 4096)
 80026ec:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 80026f0:	d1e3      	bne.n	80026ba <DBG_print+0xe6>
 80026f2:	e7f9      	b.n	80026e8 <DBG_print+0x114>
					DBG_print_d(va_arg(vl, int32_t), len);
 80026f4:	9b01      	ldr	r3, [sp, #4]
 80026f6:	681e      	ldr	r6, [r3, #0]
 80026f8:	1d1a      	adds	r2, r3, #4
	if (num < 0)
 80026fa:	2e00      	cmp	r6, #0
					DBG_print_d(va_arg(vl, int32_t), len);
 80026fc:	9201      	str	r2, [sp, #4]
	if (num < 0)
 80026fe:	da03      	bge.n	8002708 <DBG_print+0x134>
		DBG_print_c('-');
 8002700:	202d      	movs	r0, #45	; 0x2d
 8002702:	f7ff febd 	bl	8002480 <DBG_print_c>
		num = -num;
 8002706:	4276      	negs	r6, r6
	DBG_print_u(num, len);
 8002708:	4629      	mov	r1, r5
 800270a:	4630      	mov	r0, r6
		DBG_print_u(0, len);
 800270c:	f7ff fec0 	bl	8002490 <DBG_print_u>
 8002710:	e7ea      	b.n	80026e8 <DBG_print+0x114>
					DBG_print_u(va_arg(vl, U32), len);
 8002712:	9b01      	ldr	r3, [sp, #4]
 8002714:	4629      	mov	r1, r5
 8002716:	1d1a      	adds	r2, r3, #4
 8002718:	9201      	str	r2, [sp, #4]
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	e7f6      	b.n	800270c <DBG_print+0x138>
					DBG_print_b(va_arg(vl, U32), len);
 800271e:	9b01      	ldr	r3, [sp, #4]
 8002720:	681f      	ldr	r7, [r3, #0]
 8002722:	1d1a      	adds	r2, r3, #4
 8002724:	9201      	str	r2, [sp, #4]
	if (!num)
 8002726:	b917      	cbnz	r7, 800272e <DBG_print+0x15a>
		DBG_print_u(0, len);
 8002728:	4629      	mov	r1, r5
 800272a:	4638      	mov	r0, r7
 800272c:	e7ee      	b.n	800270c <DBG_print+0x138>
	memset(s, 0, 32);
 800272e:	ae02      	add	r6, sp, #8
 8002730:	2220      	movs	r2, #32
 8002732:	2100      	movs	r1, #0
 8002734:	4630      	mov	r0, r6
 8002736:	f001 f9b6 	bl	8003aa6 <memset>
 800273a:	2300      	movs	r3, #0
		tmp = num % 2;
 800273c:	f007 0201 	and.w	r2, r7, #1
		s[i] = tmp + '0';
 8002740:	3230      	adds	r2, #48	; 0x30
 8002742:	54f2      	strb	r2, [r6, r3]
	for (i = 0; i < 32; i++)
 8002744:	2b1f      	cmp	r3, #31
 8002746:	f103 0201 	add.w	r2, r3, #1
		num /= 2;
 800274a:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800274e:	fa5f f982 	uxtb.w	r9, r2
	for (i = 0; i < 32; i++)
 8002752:	d102      	bne.n	800275a <DBG_print+0x186>
 8002754:	f04f 0920 	mov.w	r9, #32
 8002758:	e002      	b.n	8002760 <DBG_print+0x18c>
 800275a:	4613      	mov	r3, r2
		if (!num)
 800275c:	2f00      	cmp	r7, #0
 800275e:	d1ed      	bne.n	800273c <DBG_print+0x168>
	if (len > l)
 8002760:	454d      	cmp	r5, r9
 8002762:	d907      	bls.n	8002774 <DBG_print+0x1a0>
 8002764:	2700      	movs	r7, #0
		for (i = 0; i < (len - l); i++)
 8002766:	eba5 0509 	sub.w	r5, r5, r9
 800276a:	b2fb      	uxtb	r3, r7
 800276c:	42ab      	cmp	r3, r5
 800276e:	f107 0701 	add.w	r7, r7, #1
 8002772:	db0a      	blt.n	800278a <DBG_print+0x1b6>
 8002774:	444e      	add	r6, r9
 8002776:	f10d 0507 	add.w	r5, sp, #7
		if (s[i])
 800277a:	f816 0901 	ldrb.w	r0, [r6], #-1
 800277e:	b108      	cbz	r0, 8002784 <DBG_print+0x1b0>
			DBG_print_c(s[i]);
 8002780:	f7ff fe7e 	bl	8002480 <DBG_print_c>
		if (!i)
 8002784:	42ae      	cmp	r6, r5
 8002786:	d1f8      	bne.n	800277a <DBG_print+0x1a6>
 8002788:	e7ae      	b.n	80026e8 <DBG_print+0x114>
			DBG_print_c('0');
 800278a:	2030      	movs	r0, #48	; 0x30
 800278c:	f7ff fe78 	bl	8002480 <DBG_print_c>
 8002790:	e7eb      	b.n	800276a <DBG_print+0x196>
					DBG_print_h(1, va_arg(vl, U32), len);
 8002792:	9b01      	ldr	r3, [sp, #4]
 8002794:	2001      	movs	r0, #1
 8002796:	1d1a      	adds	r2, r3, #4
 8002798:	9201      	str	r2, [sp, #4]
 800279a:	6819      	ldr	r1, [r3, #0]
 800279c:	462a      	mov	r2, r5
 800279e:	e780      	b.n	80026a2 <DBG_print+0xce>
					DBG_print_f(va_arg(vl, double));
 80027a0:	9b01      	ldr	r3, [sp, #4]
 80027a2:	3307      	adds	r3, #7
 80027a4:	f023 0307 	bic.w	r3, r3, #7
 80027a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80027ac:	f103 0208 	add.w	r2, r3, #8
	integer = (int)dbnum;
 80027b0:	4639      	mov	r1, r7
 80027b2:	4630      	mov	r0, r6
					DBG_print_f(va_arg(vl, double));
 80027b4:	9201      	str	r2, [sp, #4]
	integer = (int)dbnum;
 80027b6:	f7fe f93b 	bl	8000a30 <__aeabi_d2iz>
 80027ba:	4605      	mov	r5, r0
	dbnum -= integer;
 80027bc:	f7fd fe22 	bl	8000404 <__aeabi_i2d>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4630      	mov	r0, r6
 80027c6:	4639      	mov	r1, r7
 80027c8:	f7fd fcce 	bl	8000168 <__aeabi_dsub>
	if (num < 0)
 80027cc:	2d00      	cmp	r5, #0
	dbnum -= integer;
 80027ce:	4606      	mov	r6, r0
 80027d0:	460f      	mov	r7, r1
	if (num < 0)
 80027d2:	da30      	bge.n	8002836 <DBG_print+0x262>
		DBG_print_c('-');
 80027d4:	202d      	movs	r0, #45	; 0x2d
 80027d6:	f7ff fe53 	bl	8002480 <DBG_print_c>
		num = -num;
 80027da:	4268      	negs	r0, r5
	DBG_print_u(num, len);
 80027dc:	2100      	movs	r1, #0
 80027de:	f7ff fe57 	bl	8002490 <DBG_print_u>
	DBG_print_c('.');
 80027e2:	202e      	movs	r0, #46	; 0x2e
 80027e4:	f7ff fe4c 	bl	8002480 <DBG_print_c>
	for (step = 0; step < 6; step++)
 80027e8:	2500      	movs	r5, #0
		dbnum *= 10;
 80027ea:	2200      	movs	r2, #0
 80027ec:	4b18      	ldr	r3, [pc, #96]	; (8002850 <DBG_print+0x27c>)
 80027ee:	4630      	mov	r0, r6
 80027f0:	4639      	mov	r1, r7
 80027f2:	f7fd fe6d 	bl	80004d0 <__aeabi_dmul>
 80027f6:	460f      	mov	r7, r1
 80027f8:	4606      	mov	r6, r0
		integer = (int)dbnum;
 80027fa:	f7fe f919 	bl	8000a30 <__aeabi_d2iz>
 80027fe:	4681      	mov	r9, r0
		dbnum -= integer;
 8002800:	f7fd fe00 	bl	8000404 <__aeabi_i2d>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4630      	mov	r0, r6
 800280a:	4639      	mov	r1, r7
 800280c:	f7fd fcac 	bl	8000168 <__aeabi_dsub>
		if ((dbnum == 0) && step)
 8002810:	4652      	mov	r2, sl
 8002812:	465b      	mov	r3, fp
		dbnum -= integer;
 8002814:	4606      	mov	r6, r0
 8002816:	460f      	mov	r7, r1
		if ((dbnum == 0) && step)
 8002818:	f7fe f8c2 	bl	80009a0 <__aeabi_dcmpeq>
 800281c:	b110      	cbz	r0, 8002824 <DBG_print+0x250>
 800281e:	2d00      	cmp	r5, #0
 8002820:	f47f af62 	bne.w	80026e8 <DBG_print+0x114>
	for (step = 0; step < 6; step++)
 8002824:	3501      	adds	r5, #1
		DBG_print_u(integer, 0);
 8002826:	2100      	movs	r1, #0
 8002828:	4648      	mov	r0, r9
	for (step = 0; step < 6; step++)
 800282a:	b2ed      	uxtb	r5, r5
		DBG_print_u(integer, 0);
 800282c:	f7ff fe30 	bl	8002490 <DBG_print_u>
	for (step = 0; step < 6; step++)
 8002830:	2d06      	cmp	r5, #6
 8002832:	d1da      	bne.n	80027ea <DBG_print+0x216>
 8002834:	e758      	b.n	80026e8 <DBG_print+0x114>
	if (num < 0)
 8002836:	4628      	mov	r0, r5
 8002838:	e7d0      	b.n	80027dc <DBG_print+0x208>
					DBG_print_hs(1, va_arg(vl, U8*), len);
 800283a:	9b01      	ldr	r3, [sp, #4]
 800283c:	2001      	movs	r0, #1
 800283e:	1d1a      	adds	r2, r3, #4
 8002840:	9201      	str	r2, [sp, #4]
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	462a      	mov	r2, r5
 8002846:	e71f      	b.n	8002688 <DBG_print+0xb4>
 8002848:	20000204 	.word	0x20000204
 800284c:	000f4241 	.word	0x000f4241
 8002850:	40240000 	.word	0x40240000

08002854 <printchar>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void printchar (uint8_t c)
{
 8002854:	b507      	push	{r0, r1, r2, lr}
 8002856:	a902      	add	r1, sp, #8
 8002858:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_UART_Transmit(&huart2, &c, 1, 1000);
 800285c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002860:	2201      	movs	r2, #1
 8002862:	4803      	ldr	r0, [pc, #12]	; (8002870 <printchar+0x1c>)
 8002864:	f7ff fca0 	bl	80021a8 <HAL_UART_Transmit>
}
 8002868:	b003      	add	sp, #12
 800286a:	f85d fb04 	ldr.w	pc, [sp], #4
 800286e:	bf00      	nop
 8002870:	20000470 	.word	0x20000470

08002874 <spi_write>:

//Cac function phuc vu cho viec doc tin hieu nhiet do tu MAX31865
void spi_write(uint8_t *data, uint8_t len)
{
	HAL_SPI_Transmit(&hspi1, data, len, HAL_MAX_DELAY);
 8002874:	460a      	mov	r2, r1
 8002876:	f04f 33ff 	mov.w	r3, #4294967295
 800287a:	4601      	mov	r1, r0
 800287c:	4801      	ldr	r0, [pc, #4]	; (8002884 <spi_write+0x10>)
 800287e:	f7ff b90e 	b.w	8001a9e <HAL_SPI_Transmit>
 8002882:	bf00      	nop
 8002884:	200003e4 	.word	0x200003e4

08002888 <spi_read>:
}
void spi_read(uint8_t *buffer, uint8_t len)
{
	HAL_SPI_Receive(&hspi1, buffer, len, HAL_MAX_DELAY);
 8002888:	460a      	mov	r2, r1
 800288a:	f04f 33ff 	mov.w	r3, #4294967295
 800288e:	4601      	mov	r1, r0
 8002890:	4801      	ldr	r0, [pc, #4]	; (8002898 <spi_read+0x10>)
 8002892:	f7ff baaa 	b.w	8001dea <HAL_SPI_Receive>
 8002896:	bf00      	nop
 8002898:	200003e4 	.word	0x200003e4

0800289c <MAX31865_read>:
}
void MAX31865_read(uint8_t addr, uint8_t *buffer, uint8_t len)
{
 800289c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800289e:	ac02      	add	r4, sp, #8
 80028a0:	f804 0d01 	strb.w	r0, [r4, #-1]!
 80028a4:	460d      	mov	r5, r1
    addr &= ~MAX31865_READ;                                     // Force read bit on address

    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_RESET);          // Enable CE
 80028a6:	480f      	ldr	r0, [pc, #60]	; (80028e4 <MAX31865_read+0x48>)
 80028a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
 80028ac:	4616      	mov	r6, r2
    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_RESET);          // Enable CE
 80028ae:	2200      	movs	r2, #0
 80028b0:	f7fe fe06 	bl	80014c0 <HAL_GPIO_WritePin>
    spi_write(&addr, 1);                                        // Write addr
 80028b4:	2101      	movs	r1, #1
 80028b6:	4620      	mov	r0, r4
 80028b8:	f7ff ffdc 	bl	8002874 <spi_write>
    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80028bc:	4f0a      	ldr	r7, [pc, #40]	; (80028e8 <MAX31865_read+0x4c>)
 80028be:	4638      	mov	r0, r7
 80028c0:	f7ff fb32 	bl	8001f28 <HAL_SPI_GetState>
 80028c4:	2801      	cmp	r0, #1
 80028c6:	4604      	mov	r4, r0
 80028c8:	d1f9      	bne.n	80028be <MAX31865_read+0x22>
    spi_read(buffer, len);                                      // Read data
 80028ca:	4631      	mov	r1, r6
 80028cc:	4628      	mov	r0, r5
 80028ce:	f7ff ffdb 	bl	8002888 <spi_read>
    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_SET);         // Disable CE
 80028d2:	4622      	mov	r2, r4
 80028d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028d8:	4802      	ldr	r0, [pc, #8]	; (80028e4 <MAX31865_read+0x48>)
 80028da:	f7fe fdf1 	bl	80014c0 <HAL_GPIO_WritePin>

}
 80028de:	b003      	add	sp, #12
 80028e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40010800 	.word	0x40010800
 80028e8:	200003e4 	.word	0x200003e4

080028ec <MAX31865_write>:
void MAX31865_write(uint8_t addr, uint8_t data)
{
 80028ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    addr |= MAX31865_WRITE;                                 // Force write bit on address

    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_RESET);      // Enable CE
 80028ee:	4d0f      	ldr	r5, [pc, #60]	; (800292c <MAX31865_write+0x40>)
    addr |= MAX31865_WRITE;                                 // Force write bit on address
 80028f0:	ac02      	add	r4, sp, #8
 80028f2:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80028f6:	f804 0d01 	strb.w	r0, [r4, #-1]!
    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_RESET);      // Enable CE
 80028fa:	2200      	movs	r2, #0
{
 80028fc:	f88d 1006 	strb.w	r1, [sp, #6]
    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_RESET);      // Enable CE
 8002900:	4628      	mov	r0, r5
 8002902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002906:	f7fe fddb 	bl	80014c0 <HAL_GPIO_WritePin>
    spi_write(&addr, 1);                                    // Write addr
 800290a:	4620      	mov	r0, r4
 800290c:	2101      	movs	r1, #1
 800290e:	f7ff ffb1 	bl	8002874 <spi_write>
    spi_write(&data, 1);                                    // Write data
 8002912:	f10d 0006 	add.w	r0, sp, #6
 8002916:	2101      	movs	r1, #1
 8002918:	f7ff ffac 	bl	8002874 <spi_write>
    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_SET);     // Disable CE
 800291c:	2201      	movs	r2, #1
 800291e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002922:	4628      	mov	r0, r5
 8002924:	f7fe fdcc 	bl	80014c0 <HAL_GPIO_WritePin>
}
 8002928:	b003      	add	sp, #12
 800292a:	bd30      	pop	{r4, r5, pc}
 800292c:	40010800 	.word	0x40010800

08002930 <temperature>:

float  temperature(float RTDnominal, float refResistor, float data) {
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	460c      	mov	r4, r1
 8002934:	4606      	mov	r6, r0

  float Z1, Z2, Z3, Z4, Rt, temp;

  Rt = data;
  Rt /= 32768;
 8002936:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 800293a:	4610      	mov	r0, r2
 800293c:	f7fe f9fe 	bl	8000d3c <__aeabi_fmul>
  Rt *= refResistor;
 8002940:	4621      	mov	r1, r4
 8002942:	f7fe f9fb 	bl	8000d3c <__aeabi_fmul>
 8002946:	4605      	mov	r5, r0

  Z1 = -RTD_A;
  Z2 = RTD_A * RTD_A - (4 * RTD_B);
  Z3 = (4 * RTD_B) / RTDnominal;
 8002948:	4630      	mov	r0, r6
 800294a:	f7fd fd6d 	bl	8000428 <__aeabi_f2d>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	a155      	add	r1, pc, #340	; (adr r1, 8002aa8 <temperature+0x178>)
 8002954:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002958:	f7fd fee4 	bl	8000724 <__aeabi_ddiv>
 800295c:	f7fe f890 	bl	8000a80 <__aeabi_d2f>
  Z4 = 2 * RTD_B;

  temp = Z2 + (Z3 * Rt);
 8002960:	4629      	mov	r1, r5
 8002962:	f7fe f9eb 	bl	8000d3c <__aeabi_fmul>
 8002966:	4962      	ldr	r1, [pc, #392]	; (8002af0 <temperature+0x1c0>)
 8002968:	f7fe f8e0 	bl	8000b2c <__addsf3>
  temp = (sqrt(temp) + Z1) / Z4;
 800296c:	f7fd fd5c 	bl	8000428 <__aeabi_f2d>
 8002970:	f001 fd8c 	bl	800448c <sqrt>
 8002974:	a34e      	add	r3, pc, #312	; (adr r3, 8002ab0 <temperature+0x180>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f7fd fbf5 	bl	8000168 <__aeabi_dsub>
 800297e:	a34e      	add	r3, pc, #312	; (adr r3, 8002ab8 <temperature+0x188>)
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	f7fd fece 	bl	8000724 <__aeabi_ddiv>
 8002988:	f7fe f87a 	bl	8000a80 <__aeabi_d2f>

  if (temp >= 0) return temp;
 800298c:	2100      	movs	r1, #0
  temp = (sqrt(temp) + Z1) / Z4;
 800298e:	4604      	mov	r4, r0
  if (temp >= 0) return temp;
 8002990:	f7fe fb86 	bl	80010a0 <__aeabi_fcmpge>
 8002994:	2800      	cmp	r0, #0
 8002996:	f040 8085 	bne.w	8002aa4 <temperature+0x174>

  // ugh.
  Rt /= RTDnominal;
 800299a:	4631      	mov	r1, r6
 800299c:	4628      	mov	r0, r5
 800299e:	f7fe fa81 	bl	8000ea4 <__aeabi_fdiv>
  Rt *= 100;      // normalize to 100 ohm
 80029a2:	4954      	ldr	r1, [pc, #336]	; (8002af4 <temperature+0x1c4>)
 80029a4:	f7fe f9ca 	bl	8000d3c <__aeabi_fmul>

  float rpoly = Rt;

  temp = -242.02;
  temp += 2.2228 * rpoly;
  rpoly *= Rt;  // square
 80029a8:	4601      	mov	r1, r0
  Rt *= 100;      // normalize to 100 ohm
 80029aa:	4604      	mov	r4, r0
  rpoly *= Rt;  // square
 80029ac:	f7fe f9c6 	bl	8000d3c <__aeabi_fmul>
 80029b0:	4605      	mov	r5, r0
  temp += 2.2228 * rpoly;
 80029b2:	4620      	mov	r0, r4
 80029b4:	f7fd fd38 	bl	8000428 <__aeabi_f2d>
 80029b8:	a341      	add	r3, pc, #260	; (adr r3, 8002ac0 <temperature+0x190>)
 80029ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029be:	f7fd fd87 	bl	80004d0 <__aeabi_dmul>
 80029c2:	a341      	add	r3, pc, #260	; (adr r3, 8002ac8 <temperature+0x198>)
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	f7fd fbce 	bl	8000168 <__aeabi_dsub>
 80029cc:	f7fe f858 	bl	8000a80 <__aeabi_d2f>
  temp += 2.5859e-3 * rpoly;
 80029d0:	f7fd fd2a 	bl	8000428 <__aeabi_f2d>
 80029d4:	4606      	mov	r6, r0
 80029d6:	4628      	mov	r0, r5
 80029d8:	460f      	mov	r7, r1
 80029da:	f7fd fd25 	bl	8000428 <__aeabi_f2d>
 80029de:	a33c      	add	r3, pc, #240	; (adr r3, 8002ad0 <temperature+0x1a0>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fd fd74 	bl	80004d0 <__aeabi_dmul>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4630      	mov	r0, r6
 80029ee:	4639      	mov	r1, r7
 80029f0:	f7fd fbbc 	bl	800016c <__adddf3>
 80029f4:	4606      	mov	r6, r0
 80029f6:	460f      	mov	r7, r1
  rpoly *= Rt;  // ^3
 80029f8:	4620      	mov	r0, r4
 80029fa:	4629      	mov	r1, r5
 80029fc:	f7fe f99e 	bl	8000d3c <__aeabi_fmul>
  temp += 2.5859e-3 * rpoly;
 8002a00:	4639      	mov	r1, r7
  rpoly *= Rt;  // ^3
 8002a02:	4605      	mov	r5, r0
  temp += 2.5859e-3 * rpoly;
 8002a04:	4630      	mov	r0, r6
 8002a06:	f7fe f83b 	bl	8000a80 <__aeabi_d2f>
  temp -= 4.8260e-6 * rpoly;
 8002a0a:	f7fd fd0d 	bl	8000428 <__aeabi_f2d>
 8002a0e:	4606      	mov	r6, r0
 8002a10:	4628      	mov	r0, r5
 8002a12:	460f      	mov	r7, r1
 8002a14:	f7fd fd08 	bl	8000428 <__aeabi_f2d>
 8002a18:	a32f      	add	r3, pc, #188	; (adr r3, 8002ad8 <temperature+0x1a8>)
 8002a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1e:	f7fd fd57 	bl	80004d0 <__aeabi_dmul>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4630      	mov	r0, r6
 8002a28:	4639      	mov	r1, r7
 8002a2a:	f7fd fb9d 	bl	8000168 <__aeabi_dsub>
 8002a2e:	4606      	mov	r6, r0
 8002a30:	460f      	mov	r7, r1
  rpoly *= Rt;  // ^4
 8002a32:	4620      	mov	r0, r4
 8002a34:	4629      	mov	r1, r5
 8002a36:	f7fe f981 	bl	8000d3c <__aeabi_fmul>
  temp -= 4.8260e-6 * rpoly;
 8002a3a:	4639      	mov	r1, r7
  rpoly *= Rt;  // ^4
 8002a3c:	4605      	mov	r5, r0
  temp -= 4.8260e-6 * rpoly;
 8002a3e:	4630      	mov	r0, r6
 8002a40:	f7fe f81e 	bl	8000a80 <__aeabi_d2f>
  temp -= 2.8183e-8 * rpoly;
 8002a44:	f7fd fcf0 	bl	8000428 <__aeabi_f2d>
 8002a48:	4606      	mov	r6, r0
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	460f      	mov	r7, r1
 8002a4e:	f7fd fceb 	bl	8000428 <__aeabi_f2d>
 8002a52:	a323      	add	r3, pc, #140	; (adr r3, 8002ae0 <temperature+0x1b0>)
 8002a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a58:	f7fd fd3a 	bl	80004d0 <__aeabi_dmul>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4630      	mov	r0, r6
 8002a62:	4639      	mov	r1, r7
 8002a64:	f7fd fb80 	bl	8000168 <__aeabi_dsub>
 8002a68:	4606      	mov	r6, r0
 8002a6a:	460f      	mov	r7, r1
  rpoly *= Rt;  // ^5
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	4629      	mov	r1, r5
 8002a70:	f7fe f964 	bl	8000d3c <__aeabi_fmul>
  temp += 1.5243e-10 * rpoly;
 8002a74:	f7fd fcd8 	bl	8000428 <__aeabi_f2d>
 8002a78:	a31b      	add	r3, pc, #108	; (adr r3, 8002ae8 <temperature+0x1b8>)
 8002a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7e:	f7fd fd27 	bl	80004d0 <__aeabi_dmul>
 8002a82:	4604      	mov	r4, r0
 8002a84:	460d      	mov	r5, r1
  temp -= 2.8183e-8 * rpoly;
 8002a86:	4630      	mov	r0, r6
 8002a88:	4639      	mov	r1, r7
 8002a8a:	f7fd fff9 	bl	8000a80 <__aeabi_d2f>
  temp += 1.5243e-10 * rpoly;
 8002a8e:	f7fd fccb 	bl	8000428 <__aeabi_f2d>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4620      	mov	r0, r4
 8002a98:	4629      	mov	r1, r5
 8002a9a:	f7fd fb67 	bl	800016c <__adddf3>
 8002a9e:	f7fd ffef 	bl	8000a80 <__aeabi_d2f>
 8002aa2:	4604      	mov	r4, r0

  return temp;
}
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002aa8:	ee19ce88 	.word	0xee19ce88
 8002aac:	bec360af 	.word	0xbec360af
 8002ab0:	40000000 	.word	0x40000000
 8002ab4:	3f700226 	.word	0x3f700226
 8002ab8:	e0000000 	.word	0xe0000000
 8002abc:	beb360af 	.word	0xbeb360af
 8002ac0:	5dcc63f1 	.word	0x5dcc63f1
 8002ac4:	4001c84b 	.word	0x4001c84b
 8002ac8:	e0000000 	.word	0xe0000000
 8002acc:	406e40a3 	.word	0x406e40a3
 8002ad0:	7dc882bb 	.word	0x7dc882bb
 8002ad4:	3f652f06 	.word	0x3f652f06
 8002ad8:	c766c293 	.word	0xc766c293
 8002adc:	3ed43de0 	.word	0x3ed43de0
 8002ae0:	513156ce 	.word	0x513156ce
 8002ae4:	3e5e42e2 	.word	0x3e5e42e2
 8002ae8:	61e4fa3e 	.word	0x61e4fa3e
 8002aec:	3de4f327 	.word	0x3de4f327
 8002af0:	37938317 	.word	0x37938317
 8002af4:	42c80000 	.word	0x42c80000

08002af8 <MAX31865_readTemp>:

float MAX31865_readTemp()
{
 8002af8:	b507      	push	{r0, r1, r2, lr}
	MAX31865_write(0, 0xB2);
 8002afa:	21b2      	movs	r1, #178	; 0xb2
 8002afc:	2000      	movs	r0, #0
 8002afe:	f7ff fef5 	bl	80028ec <MAX31865_write>
	HAL_Delay(100);
 8002b02:	2064      	movs	r0, #100	; 0x64
 8002b04:	f7fe fb28 	bl	8001158 <HAL_Delay>

    // Read data from max31865 data registers
    uint8_t max3[2];
    MAX31865_read(MAX31856_RTDMSB_REG, max3, 2);
 8002b08:	a901      	add	r1, sp, #4
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	f7ff fec5 	bl	800289c <MAX31865_read>
 8002b12:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002b16:	ba40      	rev16	r0, r0
    data |= max3[1];
    data >>= 1;
//  DBG_print("data=%02x \r\n",data);

    // Calculate the temperature from the measured resistance
    float temp = temperature(100, 430, (float) data );
 8002b18:	f3c0 004e 	ubfx	r0, r0, #1, #15
 8002b1c:	f7fe f8b6 	bl	8000c8c <__aeabi_ui2f>
 8002b20:	4903      	ldr	r1, [pc, #12]	; (8002b30 <MAX31865_readTemp+0x38>)
 8002b22:	4602      	mov	r2, r0
 8002b24:	4803      	ldr	r0, [pc, #12]	; (8002b34 <MAX31865_readTemp+0x3c>)
 8002b26:	f7ff ff03 	bl	8002930 <temperature>

    return temp;
}
 8002b2a:	b003      	add	sp, #12
 8002b2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b30:	43d70000 	.word	0x43d70000
 8002b34:	42c80000 	.word	0x42c80000

08002b38 <HAL_UART_RxCpltCallback>:
uint8_t checksum[16];
uint32_t Delay = 1000;	//Default 1s

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == USART2)
 8002b38:	6802      	ldr	r2, [r0, #0]
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <HAL_UART_RxCpltCallback+0x24>)
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d107      	bne.n	8002b50 <HAL_UART_RxCpltCallback+0x18>
	{
		rx_buffer[rx_index++] = rx_data;
 8002b40:	4a07      	ldr	r2, [pc, #28]	; (8002b60 <HAL_UART_RxCpltCallback+0x28>)
 8002b42:	7813      	ldrb	r3, [r2, #0]
 8002b44:	1c59      	adds	r1, r3, #1
 8002b46:	7011      	strb	r1, [r2, #0]
 8002b48:	4a06      	ldr	r2, [pc, #24]	; (8002b64 <HAL_UART_RxCpltCallback+0x2c>)
 8002b4a:	7811      	ldrb	r1, [r2, #0]
 8002b4c:	4a06      	ldr	r2, [pc, #24]	; (8002b68 <HAL_UART_RxCpltCallback+0x30>)
 8002b4e:	54d1      	strb	r1, [r2, r3]
	}
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8002b50:	2201      	movs	r2, #1
 8002b52:	4904      	ldr	r1, [pc, #16]	; (8002b64 <HAL_UART_RxCpltCallback+0x2c>)
 8002b54:	4805      	ldr	r0, [pc, #20]	; (8002b6c <HAL_UART_RxCpltCallback+0x34>)
 8002b56:	f7ff bb83 	b.w	8002260 <HAL_UART_Receive_IT>
 8002b5a:	bf00      	nop
 8002b5c:	40004400 	.word	0x40004400
 8002b60:	20000286 	.word	0x20000286
 8002b64:	200003e2 	.word	0x200003e2
 8002b68:	20000206 	.word	0x20000206
 8002b6c:	20000470 	.word	0x20000470

08002b70 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8002b74:	b510      	push	{r4, lr}
 8002b76:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b78:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b7a:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b7c:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b7e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b80:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b82:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b84:	f7fe fca2 	bl	80014cc <HAL_RCC_OscConfig>
 8002b88:	4601      	mov	r1, r0
 8002b8a:	b100      	cbz	r0, 8002b8e <SystemClock_Config+0x1e>
 8002b8c:	e7fe      	b.n	8002b8c <SystemClock_Config+0x1c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b8e:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b90:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b92:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b94:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b96:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002b98:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b9a:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b9c:	f7fe fe5e 	bl	800185c <HAL_RCC_ClockConfig>
 8002ba0:	4604      	mov	r4, r0
 8002ba2:	b100      	cbz	r0, 8002ba6 <SystemClock_Config+0x36>
 8002ba4:	e7fe      	b.n	8002ba4 <SystemClock_Config+0x34>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002ba6:	f7fe fefd 	bl	80019a4 <HAL_RCC_GetHCLKFreq>
 8002baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bae:	fbb0 f0f3 	udiv	r0, r0, r3
 8002bb2:	f7fe fb35 	bl	8001220 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002bb6:	2004      	movs	r0, #4
 8002bb8:	f7fe fb48 	bl	800124c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002bbc:	4622      	mov	r2, r4
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	f7fe faec 	bl	80011a0 <HAL_NVIC_SetPriority>
}
 8002bc8:	b010      	add	sp, #64	; 0x40
 8002bca:	bd10      	pop	{r4, pc}

08002bcc <main>:
{
 8002bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd0:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8002bd2:	f7fe fa9d 	bl	8001110 <HAL_Init>
  SystemClock_Config();
 8002bd6:	f7ff ffcb 	bl	8002b70 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bda:	4bb4      	ldr	r3, [pc, #720]	; (8002eac <main+0x2e0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002bdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002be0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002be2:	48b3      	ldr	r0, [pc, #716]	; (8002eb0 <main+0x2e4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002be4:	f042 0220 	orr.w	r2, r2, #32
 8002be8:	619a      	str	r2, [r3, #24]
 8002bea:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bec:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bee:	f002 0220 	and.w	r2, r2, #32
 8002bf2:	9200      	str	r2, [sp, #0]
 8002bf4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf6:	699a      	ldr	r2, [r3, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bf8:	f44f 7782 	mov.w	r7, #260	; 0x104
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfc:	f042 0204 	orr.w	r2, r2, #4
 8002c00:	619a      	str	r2, [r3, #24]
 8002c02:	699a      	ldr	r2, [r3, #24]
 8002c04:	f002 0204 	and.w	r2, r2, #4
 8002c08:	9201      	str	r2, [sp, #4]
 8002c0a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	f042 0208 	orr.w	r2, r2, #8
 8002c12:	619a      	str	r2, [r3, #24]
 8002c14:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002c16:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	9302      	str	r3, [sp, #8]
 8002c1e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002c20:	f7fe fc4e 	bl	80014c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002c24:	2200      	movs	r2, #0
 8002c26:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002c2a:	48a2      	ldr	r0, [pc, #648]	; (8002eb4 <main+0x2e8>)
 8002c2c:	f7fe fc48 	bl	80014c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c34:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c36:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c38:	a907      	add	r1, sp, #28
 8002c3a:	489d      	ldr	r0, [pc, #628]	; (8002eb0 <main+0x2e4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c3c:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c3e:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c40:	f7fe fb5e 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c48:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4c:	4899      	ldr	r0, [pc, #612]	; (8002eb4 <main+0x2e8>)
 8002c4e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c50:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c52:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c54:	f7fe fb54 	bl	8001300 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 8002c58:	4897      	ldr	r0, [pc, #604]	; (8002eb8 <main+0x2ec>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c5a:	4b98      	ldr	r3, [pc, #608]	; (8002ebc <main+0x2f0>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c60:	e880 0088 	stmia.w	r0, {r3, r7}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c64:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c66:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c68:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c6a:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c6c:	6103      	str	r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002c6e:	2238      	movs	r2, #56	; 0x38
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c70:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c72:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c74:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c76:	230a      	movs	r3, #10
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002c78:	6145      	str	r5, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002c7a:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 8002c7c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c7e:	f7ff f956 	bl	8001f2e <HAL_SPI_Init>
 8002c82:	b100      	cbz	r0, 8002c86 <main+0xba>
 8002c84:	e7fe      	b.n	8002c84 <main+0xb8>
  huart2.Init.BaudRate = 9600;
 8002c86:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart2.Instance = USART2;
 8002c8a:	4c8d      	ldr	r4, [pc, #564]	; (8002ec0 <main+0x2f4>)
  huart2.Init.BaudRate = 9600;
 8002c8c:	4a8d      	ldr	r2, [pc, #564]	; (8002ec4 <main+0x2f8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c8e:	60a0      	str	r0, [r4, #8]
  huart2.Init.BaudRate = 9600;
 8002c90:	e884 000c 	stmia.w	r4, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c94:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c96:	60e0      	str	r0, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c98:	6120      	str	r0, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c9a:	61a0      	str	r0, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c9c:	61e0      	str	r0, [r4, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c9e:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ca0:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ca2:	f7ff fa53 	bl	800214c <HAL_UART_Init>
 8002ca6:	4607      	mov	r7, r0
 8002ca8:	b100      	cbz	r0, 8002cac <main+0xe0>
 8002caa:	e7fe      	b.n	8002caa <main+0xde>
  DBG_setup(printchar);
 8002cac:	4886      	ldr	r0, [pc, #536]	; (8002ec8 <main+0x2fc>)
 8002cae:	f7ff fc81 	bl	80025b4 <DBG_setup>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8002cb2:	462a      	mov	r2, r5
 8002cb4:	4985      	ldr	r1, [pc, #532]	; (8002ecc <main+0x300>)
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	f7ff fad2 	bl	8002260 <HAL_UART_Receive_IT>
	  for (uint8_t k=0; k < strlen(rx_buffer); k++)
 8002cbc:	f8df 9248 	ldr.w	r9, [pc, #584]	; 8002f08 <main+0x33c>
					memcpy(lhs, rx_buffer+(count-1), index);
 8002cc0:	f8df 8248 	ldr.w	r8, [pc, #584]	; 8002f0c <main+0x340>
	  MD5_Init(&context);
 8002cc4:	4882      	ldr	r0, [pc, #520]	; (8002ed0 <main+0x304>)
 8002cc6:	f000 fceb 	bl	80036a0 <MD5_Init>
	  for (uint8_t k=0; k < strlen(rx_buffer); k++)
 8002cca:	4648      	mov	r0, r9
 8002ccc:	f7fd fa40 	bl	8000150 <strlen>
 8002cd0:	2400      	movs	r4, #0
 8002cd2:	4605      	mov	r5, r0
			if (strncmp(&rx_buffer[k], "ATEMP", 5) == 0) {
 8002cd4:	f8df a238 	ldr.w	sl, [pc, #568]	; 8002f10 <main+0x344>
	  for (uint8_t k=0; k < strlen(rx_buffer); k++)
 8002cd8:	42ac      	cmp	r4, r5
 8002cda:	4620      	mov	r0, r4
 8002cdc:	d218      	bcs.n	8002d10 <main+0x144>
			count++;
 8002cde:	3401      	adds	r4, #1
			if (strncmp(&rx_buffer[k], "ATEMP", 5) == 0) {
 8002ce0:	2205      	movs	r2, #5
 8002ce2:	4651      	mov	r1, sl
 8002ce4:	4448      	add	r0, r9
			count++;
 8002ce6:	b2e4      	uxtb	r4, r4
			if (strncmp(&rx_buffer[k], "ATEMP", 5) == 0) {
 8002ce8:	f000 ff0a 	bl	8003b00 <strncmp>
 8002cec:	2800      	cmp	r0, #0
 8002cee:	d1f3      	bne.n	8002cd8 <main+0x10c>
 8002cf0:	463d      	mov	r5, r7
					memcpy(lhs, rx_buffer+(count-1), index);
 8002cf2:	f104 3aff 	add.w	sl, r4, #4294967295
 8002cf6:	44ca      	add	sl, r9
				for (uint8_t i=count; rx_buffer[i] != '\n'; i++)
 8002cf8:	1be3      	subs	r3, r4, r7
 8002cfa:	442b      	add	r3, r5
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	f819 3003 	ldrb.w	r3, [r9, r3]
 8002d02:	2b0a      	cmp	r3, #10
 8002d04:	f040 8086 	bne.w	8002e14 <main+0x248>
				proceed_flag = 1;
 8002d08:	2201      	movs	r2, #1
				break;
 8002d0a:	462f      	mov	r7, r5
				proceed_flag = 1;
 8002d0c:	4b71      	ldr	r3, [pc, #452]	; (8002ed4 <main+0x308>)
 8002d0e:	701a      	strb	r2, [r3, #0]
	  DBG_print(lhs);
 8002d10:	4640      	mov	r0, r8
 8002d12:	f7ff fc5f 	bl	80025d4 <DBG_print>
	  DBG_print("\r\n");
 8002d16:	4870      	ldr	r0, [pc, #448]	; (8002ed8 <main+0x30c>)
 8002d18:	f7ff fc5c 	bl	80025d4 <DBG_print>
	  	for (uint8_t j=1; lhs[j] != 0; j++)
 8002d1c:	2200      	movs	r2, #0
				memcpy(rhs, lhs + (j + 1), dem - 1);
 8002d1e:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 8002ee4 <main+0x318>
 8002d22:	1c55      	adds	r5, r2, #1
 8002d24:	b2ed      	uxtb	r5, r5
	  	for (uint8_t j=1; lhs[j] != 0; j++)
 8002d26:	f818 4005 	ldrb.w	r4, [r8, r5]
 8002d2a:	2c00      	cmp	r4, #0
 8002d2c:	d17a      	bne.n	8002e24 <main+0x258>
	  	memcpy(checksum, lhs + count2 + 1, count1);
 8002d2e:	1c71      	adds	r1, r6, #1
 8002d30:	4441      	add	r1, r8
 8002d32:	486a      	ldr	r0, [pc, #424]	; (8002edc <main+0x310>)
 8002d34:	f000 feac 	bl	8003a90 <memcpy>
	  	DBG_print(checksum);
 8002d38:	4868      	ldr	r0, [pc, #416]	; (8002edc <main+0x310>)
 8002d3a:	f7ff fc4b 	bl	80025d4 <DBG_print>
	  	DBG_print("\r\n");
 8002d3e:	4866      	ldr	r0, [pc, #408]	; (8002ed8 <main+0x30c>)
 8002d40:	f7ff fc48 	bl	80025d4 <DBG_print>
		MD5_Update(&context, readData, strlen(readData));
 8002d44:	4866      	ldr	r0, [pc, #408]	; (8002ee0 <main+0x314>)
 8002d46:	f7fd fa03 	bl	8000150 <strlen>
 8002d4a:	4965      	ldr	r1, [pc, #404]	; (8002ee0 <main+0x314>)
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	4860      	ldr	r0, [pc, #384]	; (8002ed0 <main+0x304>)
 8002d50:	f000 fcbc 	bl	80036cc <MD5_Update>
		MD5_Final(digest, &context);
 8002d54:	495e      	ldr	r1, [pc, #376]	; (8002ed0 <main+0x304>)
 8002d56:	a803      	add	r0, sp, #12
 8002d58:	f000 fcf5 	bl	8003746 <MD5_Final>
			DBG_print("Checksum=%02x \r\n",digest[i]);
 8002d5c:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8002f14 <main+0x348>
			sprintf(&md5string[i*2], "%02x", digest[i]);
 8002d60:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8002f18 <main+0x34c>
 8002d64:	f10d 050b 	add.w	r5, sp, #11
			DBG_print("Checksum=%02x \r\n",digest[i]);
 8002d68:	7869      	ldrb	r1, [r5, #1]
 8002d6a:	4658      	mov	r0, fp
 8002d6c:	f7ff fc32 	bl	80025d4 <DBG_print>
			sprintf(&md5string[i*2], "%02x", digest[i]);
 8002d70:	ab07      	add	r3, sp, #28
 8002d72:	1918      	adds	r0, r3, r4
 8002d74:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8002d78:	4651      	mov	r1, sl
 8002d7a:	3402      	adds	r4, #2
 8002d7c:	f000 fe9c 	bl	8003ab8 <siprintf>
		for(uint8_t i = 0; i < 16; i++) {
 8002d80:	2c20      	cmp	r4, #32
 8002d82:	d1f1      	bne.n	8002d68 <main+0x19c>
		DBG_print(md5string);
 8002d84:	a807      	add	r0, sp, #28
 8002d86:	f7ff fc25 	bl	80025d4 <DBG_print>
		DBG_print("\r\n");
 8002d8a:	4853      	ldr	r0, [pc, #332]	; (8002ed8 <main+0x30c>)
 8002d8c:	f7ff fc22 	bl	80025d4 <DBG_print>
		Time = atol (rhs); //Doi sang kieu so nguyen
 8002d90:	4854      	ldr	r0, [pc, #336]	; (8002ee4 <main+0x318>)
 8002d92:	f000 fe54 	bl	8003a3e <atol>
 8002d96:	4604      	mov	r4, r0
		DBG_print("Time=%d \r\n",Time);
 8002d98:	4601      	mov	r1, r0
 8002d9a:	4853      	ldr	r0, [pc, #332]	; (8002ee8 <main+0x31c>)
 8002d9c:	f7ff fc1a 	bl	80025d4 <DBG_print>
 8002da0:	f8df a130 	ldr.w	sl, [pc, #304]	; 8002ed4 <main+0x308>
 8002da4:	4d51      	ldr	r5, [pc, #324]	; (8002eec <main+0x320>)
		if (Time == 0)
 8002da6:	2c00      	cmp	r4, #0
 8002da8:	d15a      	bne.n	8002e60 <main+0x294>
			Delay = 1000;
 8002daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
			proceed_flag = 0;
 8002dae:	f88a 4000 	strb.w	r4, [sl]
			Delay = 1000;
 8002db2:	602b      	str	r3, [r5, #0]
	  if (proceed_flag != 0)
 8002db4:	f89a 3000 	ldrb.w	r3, [sl]
 8002db8:	b30b      	cbz	r3, 8002dfe <main+0x232>
		  float temp = MAX31865_readTemp();
 8002dba:	f7ff fe9d 	bl	8002af8 <MAX31865_readTemp>
		  if (temp > 0 && temp < 850) {
 8002dbe:	2100      	movs	r1, #0
		  float temp = MAX31865_readTemp();
 8002dc0:	4604      	mov	r4, r0
		  if (temp > 0 && temp < 850) {
 8002dc2:	f7fe f977 	bl	80010b4 <__aeabi_fcmpgt>
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	d050      	beq.n	8002e6c <main+0x2a0>
 8002dca:	4949      	ldr	r1, [pc, #292]	; (8002ef0 <main+0x324>)
 8002dcc:	4620      	mov	r0, r4
 8002dce:	f7fe f953 	bl	8001078 <__aeabi_fcmplt>
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	d04a      	beq.n	8002e6c <main+0x2a0>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);	//Led Do sang
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ddc:	4835      	ldr	r0, [pc, #212]	; (8002eb4 <main+0x2e8>)
 8002dde:	f7fe fb6f 	bl	80014c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);	//Led Xanh tat
 8002de2:	2200      	movs	r2, #0
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);	//Led Xanh sang
 8002de4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002de8:	4832      	ldr	r0, [pc, #200]	; (8002eb4 <main+0x2e8>)
 8002dea:	f7fe fb69 	bl	80014c0 <HAL_GPIO_WritePin>
			  DBG_print("$TEMP,%f \r\n",temp);
 8002dee:	4620      	mov	r0, r4
 8002df0:	f7fd fb1a 	bl	8000428 <__aeabi_f2d>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	483e      	ldr	r0, [pc, #248]	; (8002ef4 <main+0x328>)
 8002dfa:	f7ff fbeb 	bl	80025d4 <DBG_print>
	  rx_index = 0;
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4b3d      	ldr	r3, [pc, #244]	; (8002ef8 <main+0x32c>)
	  memset(rx_buffer, 0, 128);
 8002e02:	2280      	movs	r2, #128	; 0x80
 8002e04:	4648      	mov	r0, r9
	  rx_index = 0;
 8002e06:	7019      	strb	r1, [r3, #0]
	  memset(rx_buffer, 0, 128);
 8002e08:	f000 fe4d 	bl	8003aa6 <memset>
	  HAL_Delay(Delay);
 8002e0c:	6828      	ldr	r0, [r5, #0]
 8002e0e:	f7fe f9a3 	bl	8001158 <HAL_Delay>
  {
 8002e12:	e757      	b.n	8002cc4 <main+0xf8>
					index ++;
 8002e14:	3501      	adds	r5, #1
 8002e16:	b2ed      	uxtb	r5, r5
					memcpy(lhs, rx_buffer+(count-1), index);
 8002e18:	462a      	mov	r2, r5
 8002e1a:	4651      	mov	r1, sl
 8002e1c:	4640      	mov	r0, r8
 8002e1e:	f000 fe37 	bl	8003a90 <memcpy>
 8002e22:	e769      	b.n	8002cf8 <main+0x12c>
			if (lhs[j] == '*')
 8002e24:	2c2a      	cmp	r4, #42	; 0x2a
 8002e26:	d107      	bne.n	8002e38 <main+0x26c>
				memcpy(readData, lhs + 1, count1 - 1);
 8002e28:	1e6a      	subs	r2, r5, #1
 8002e2a:	4934      	ldr	r1, [pc, #208]	; (8002efc <main+0x330>)
 8002e2c:	482c      	ldr	r0, [pc, #176]	; (8002ee0 <main+0x314>)
 8002e2e:	f000 fe2f 	bl	8003a90 <memcpy>
				count2 = count1;
 8002e32:	462e      	mov	r6, r5
			count1++;
 8002e34:	462a      	mov	r2, r5
 8002e36:	e774      	b.n	8002d22 <main+0x156>
			if (lhs[j] == ',')
 8002e38:	2c2c      	cmp	r4, #44	; 0x2c
 8002e3a:	d1fb      	bne.n	8002e34 <main+0x268>
 8002e3c:	2200      	movs	r2, #0
				for (uint8_t m=j; lhs[m] != '*'; m++)
 8002e3e:	18ab      	adds	r3, r5, r2
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	f818 3003 	ldrb.w	r3, [r8, r3]
 8002e46:	1c51      	adds	r1, r2, #1
 8002e48:	2b2a      	cmp	r3, #42	; 0x2a
 8002e4a:	d107      	bne.n	8002e5c <main+0x290>
				memcpy(rhs, lhs + (j + 1), dem - 1);
 8002e4c:	1c69      	adds	r1, r5, #1
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	3a01      	subs	r2, #1
 8002e52:	4441      	add	r1, r8
 8002e54:	4650      	mov	r0, sl
 8002e56:	f000 fe1b 	bl	8003a90 <memcpy>
 8002e5a:	e7eb      	b.n	8002e34 <main+0x268>
 8002e5c:	460a      	mov	r2, r1
 8002e5e:	e7ee      	b.n	8002e3e <main+0x272>
			DBG_print("Delay=%d \r\n",Delay);
 8002e60:	4621      	mov	r1, r4
 8002e62:	4827      	ldr	r0, [pc, #156]	; (8002f00 <main+0x334>)
			Delay = Time;
 8002e64:	602c      	str	r4, [r5, #0]
			DBG_print("Delay=%d \r\n",Delay);
 8002e66:	f7ff fbb5 	bl	80025d4 <DBG_print>
 8002e6a:	e7a3      	b.n	8002db4 <main+0x1e8>
		  } else if (temp > -200 && temp < 0) {
 8002e6c:	4925      	ldr	r1, [pc, #148]	; (8002f04 <main+0x338>)
 8002e6e:	4620      	mov	r0, r4
 8002e70:	f7fe f920 	bl	80010b4 <__aeabi_fcmpgt>
 8002e74:	b160      	cbz	r0, 8002e90 <main+0x2c4>
 8002e76:	2100      	movs	r1, #0
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f7fe f8fd 	bl	8001078 <__aeabi_fcmplt>
 8002e7e:	b138      	cbz	r0, 8002e90 <main+0x2c4>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);	//Led Do tat
 8002e80:	2200      	movs	r2, #0
 8002e82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e86:	480b      	ldr	r0, [pc, #44]	; (8002eb4 <main+0x2e8>)
 8002e88:	f7fe fb1a 	bl	80014c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);	//Led Xanh sang
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	e7a9      	b.n	8002de4 <main+0x218>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002e90:	2200      	movs	r2, #0
 8002e92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e96:	4807      	ldr	r0, [pc, #28]	; (8002eb4 <main+0x2e8>)
 8002e98:	f7fe fb12 	bl	80014c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ea2:	4804      	ldr	r0, [pc, #16]	; (8002eb4 <main+0x2e8>)
 8002ea4:	f7fe fb0c 	bl	80014c0 <HAL_GPIO_WritePin>
 8002ea8:	e7a9      	b.n	8002dfe <main+0x232>
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40010800 	.word	0x40010800
 8002eb4:	40010c00 	.word	0x40010c00
 8002eb8:	200003e4 	.word	0x200003e4
 8002ebc:	40013000 	.word	0x40013000
 8002ec0:	20000470 	.word	0x20000470
 8002ec4:	40004400 	.word	0x40004400
 8002ec8:	08002855 	.word	0x08002855
 8002ecc:	200003e2 	.word	0x200003e2
 8002ed0:	20000298 	.word	0x20000298
 8002ed4:	20000205 	.word	0x20000205
 8002ed8:	08004704 	.word	0x08004704
 8002edc:	200004b0 	.word	0x200004b0
 8002ee0:	2000043c 	.word	0x2000043c
 8002ee4:	200003b0 	.word	0x200003b0
 8002ee8:	080046fc 	.word	0x080046fc
 8002eec:	20000008 	.word	0x20000008
 8002ef0:	44548000 	.word	0x44548000
 8002ef4:	08004713 	.word	0x08004713
 8002ef8:	20000286 	.word	0x20000286
 8002efc:	20000331 	.word	0x20000331
 8002f00:	08004707 	.word	0x08004707
 8002f04:	c3480000 	.word	0xc3480000
 8002f08:	20000206 	.word	0x20000206
 8002f0c:	20000330 	.word	0x20000330
 8002f10:	080046e0 	.word	0x080046e0
 8002f14:	080046e6 	.word	0x080046e6
 8002f18:	080046f7 	.word	0x080046f7

08002f1c <body>:
/*
 * This processes one or more 64-byte data blocks, but does NOT update the bit
 * counters.  There are no alignment requirements.
 */
static const void *body(MD5_CTX *ctx, const void *data, unsigned long size)
{
 8002f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f20:	b093      	sub	sp, #76	; 0x4c
 8002f22:	9211      	str	r2, [sp, #68]	; 0x44
	MD5_u32plus a, b, c, d;
	MD5_u32plus saved_a, saved_b, saved_c, saved_d;

	ptr = (const unsigned char *)data;

	a = ctx->a;
 8002f24:	6882      	ldr	r2, [r0, #8]
{
 8002f26:	4603      	mov	r3, r0
	a = ctx->a;
 8002f28:	920f      	str	r2, [sp, #60]	; 0x3c
	b = ctx->b;
 8002f2a:	68c2      	ldr	r2, [r0, #12]
{
 8002f2c:	9110      	str	r1, [sp, #64]	; 0x40
	b = ctx->b;
 8002f2e:	9201      	str	r2, [sp, #4]
	c = ctx->c;
 8002f30:	6902      	ldr	r2, [r0, #16]
 8002f32:	9202      	str	r2, [sp, #8]
	d = ctx->d;
 8002f34:	6942      	ldr	r2, [r0, #20]
	ptr = (const unsigned char *)data;
 8002f36:	4608      	mov	r0, r1
	d = ctx->d;
 8002f38:	9203      	str	r2, [sp, #12]
		saved_b = b;
		saved_c = c;
		saved_d = d;

/* Round 1 */
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
 8002f3a:	6802      	ldr	r2, [r0, #0]
 8002f3c:	9c03      	ldr	r4, [sp, #12]
 8002f3e:	659a      	str	r2, [r3, #88]	; 0x58
 8002f40:	9204      	str	r2, [sp, #16]
 8002f42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002f44:	9904      	ldr	r1, [sp, #16]
 8002f46:	f102 4257 	add.w	r2, r2, #3607101440	; 0xd7000000
 8002f4a:	f502 02d5 	add.w	r2, r2, #6979584	; 0x6a8000
 8002f4e:	f502 5211 	add.w	r2, r2, #9280	; 0x2440
 8002f52:	3238      	adds	r2, #56	; 0x38
 8002f54:	440a      	add	r2, r1
 8002f56:	9902      	ldr	r1, [sp, #8]
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
 8002f58:	9d01      	ldr	r5, [sp, #4]
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
 8002f5a:	4061      	eors	r1, r4
 8002f5c:	9c01      	ldr	r4, [sp, #4]
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
 8002f5e:	9e01      	ldr	r6, [sp, #4]
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
 8002f60:	4021      	ands	r1, r4
 8002f62:	9c03      	ldr	r4, [sp, #12]
 8002f64:	f8df a3ac 	ldr.w	sl, [pc, #940]	; 8003314 <body+0x3f8>
 8002f68:	4061      	eors	r1, r4
 8002f6a:	4411      	add	r1, r2
 8002f6c:	9a01      	ldr	r2, [sp, #4]
 8002f6e:	4ce1      	ldr	r4, [pc, #900]	; (80032f4 <body+0x3d8>)
 8002f70:	eb02 6171 	add.w	r1, r2, r1, ror #25
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
 8002f74:	6842      	ldr	r2, [r0, #4]
		a += saved_a;
		b += saved_b;
		c += saved_c;
		d += saved_d;

		ptr += 64;
 8002f76:	3040      	adds	r0, #64	; 0x40
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
 8002f78:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f7a:	9205      	str	r2, [sp, #20]
 8002f7c:	9a03      	ldr	r2, [sp, #12]
 8002f7e:	4414      	add	r4, r2
 8002f80:	9a05      	ldr	r2, [sp, #20]
 8002f82:	4414      	add	r4, r2
 8002f84:	9a02      	ldr	r2, [sp, #8]
 8002f86:	406a      	eors	r2, r5
 8002f88:	9d02      	ldr	r5, [sp, #8]
 8002f8a:	400a      	ands	r2, r1
 8002f8c:	406a      	eors	r2, r5
 8002f8e:	4422      	add	r2, r4
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
 8002f90:	f850 4c38 	ldr.w	r4, [r0, #-56]
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
 8002f94:	eb01 5232 	add.w	r2, r1, r2, ror #20
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
 8002f98:	661c      	str	r4, [r3, #96]	; 0x60
 8002f9a:	9406      	str	r4, [sp, #24]
 8002f9c:	f105 5410 	add.w	r4, r5, #603979776	; 0x24000000
 8002fa0:	f504 1401 	add.w	r4, r4, #2113536	; 0x204000
 8002fa4:	9d06      	ldr	r5, [sp, #24]
 8002fa6:	f504 5443 	add.w	r4, r4, #12480	; 0x30c0
 8002faa:	341b      	adds	r4, #27
 8002fac:	442c      	add	r4, r5
 8002fae:	9d01      	ldr	r5, [sp, #4]
 8002fb0:	404d      	eors	r5, r1
 8002fb2:	4015      	ands	r5, r2
 8002fb4:	4075      	eors	r5, r6
 8002fb6:	4425      	add	r5, r4
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
 8002fb8:	f850 4c34 	ldr.w	r4, [r0, #-52]
 8002fbc:	4ece      	ldr	r6, [pc, #824]	; (80032f8 <body+0x3dc>)
 8002fbe:	9407      	str	r4, [sp, #28]
 8002fc0:	665c      	str	r4, [r3, #100]	; 0x64
 8002fc2:	9c01      	ldr	r4, [sp, #4]
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
 8002fc4:	eb02 35f5 	add.w	r5, r2, r5, ror #15
 8002fc8:	4426      	add	r6, r4
 8002fca:	9c07      	ldr	r4, [sp, #28]
 8002fcc:	4426      	add	r6, r4
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
 8002fce:	ea81 0402 	eor.w	r4, r1, r2
 8002fd2:	402c      	ands	r4, r5
 8002fd4:	404c      	eors	r4, r1
 8002fd6:	4434      	add	r4, r6
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
 8002fd8:	f850 6c30 	ldr.w	r6, [r0, #-48]
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
 8002fdc:	eb05 24b4 	add.w	r4, r5, r4, ror #10
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
 8002fe0:	9608      	str	r6, [sp, #32]
 8002fe2:	669e      	str	r6, [r3, #104]	; 0x68
 8002fe4:	9f08      	ldr	r7, [sp, #32]
 8002fe6:	4ec5      	ldr	r6, [pc, #788]	; (80032fc <body+0x3e0>)
 8002fe8:	443e      	add	r6, r7
 8002fea:	440e      	add	r6, r1
 8002fec:	ea82 0105 	eor.w	r1, r2, r5
 8002ff0:	4021      	ands	r1, r4
 8002ff2:	4051      	eors	r1, r2
 8002ff4:	4431      	add	r1, r6
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
 8002ff6:	f850 6c2c 	ldr.w	r6, [r0, #-44]
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
 8002ffa:	eb04 6171 	add.w	r1, r4, r1, ror #25
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
 8002ffe:	9609      	str	r6, [sp, #36]	; 0x24
 8003000:	66de      	str	r6, [r3, #108]	; 0x6c
 8003002:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003004:	4ebe      	ldr	r6, [pc, #760]	; (8003300 <body+0x3e4>)
 8003006:	443e      	add	r6, r7
 8003008:	4416      	add	r6, r2
 800300a:	ea85 0204 	eor.w	r2, r5, r4
 800300e:	400a      	ands	r2, r1
 8003010:	406a      	eors	r2, r5
 8003012:	4432      	add	r2, r6
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
 8003014:	f850 6c28 	ldr.w	r6, [r0, #-40]
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
 8003018:	eb01 5232 	add.w	r2, r1, r2, ror #20
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
 800301c:	960a      	str	r6, [sp, #40]	; 0x28
 800301e:	671e      	str	r6, [r3, #112]	; 0x70
 8003020:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003022:	4eb8      	ldr	r6, [pc, #736]	; (8003304 <body+0x3e8>)
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
 8003024:	f850 9c24 	ldr.w	r9, [r0, #-36]
 8003028:	443e      	add	r6, r7
 800302a:	442e      	add	r6, r5
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
 800302c:	ea84 0501 	eor.w	r5, r4, r1
 8003030:	4015      	ands	r5, r2
 8003032:	4065      	eors	r5, r4
 8003034:	4435      	add	r5, r6
 8003036:	4eb4      	ldr	r6, [pc, #720]	; (8003308 <body+0x3ec>)
 8003038:	eb02 35f5 	add.w	r5, r2, r5, ror #15
 800303c:	444e      	add	r6, r9
 800303e:	4426      	add	r6, r4
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
 8003040:	ea81 0402 	eor.w	r4, r1, r2
 8003044:	402c      	ands	r4, r5
 8003046:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
 800304a:	404c      	eors	r4, r1
 800304c:	4434      	add	r4, r6
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
 800304e:	f850 6c20 	ldr.w	r6, [r0, #-32]
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
 8003052:	eb05 24b4 	add.w	r4, r5, r4, ror #10
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
 8003056:	960b      	str	r6, [sp, #44]	; 0x2c
 8003058:	679e      	str	r6, [r3, #120]	; 0x78
 800305a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800305c:	4eab      	ldr	r6, [pc, #684]	; (800330c <body+0x3f0>)
 800305e:	443e      	add	r6, r7
 8003060:	440e      	add	r6, r1
 8003062:	ea82 0105 	eor.w	r1, r2, r5
 8003066:	4021      	ands	r1, r4
 8003068:	4051      	eors	r1, r2
 800306a:	4431      	add	r1, r6
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
 800306c:	f850 6c1c 	ldr.w	r6, [r0, #-28]
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
 8003070:	eb04 6171 	add.w	r1, r4, r1, ror #25
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
 8003074:	960c      	str	r6, [sp, #48]	; 0x30
 8003076:	67de      	str	r6, [r3, #124]	; 0x7c
 8003078:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800307a:	4ea5      	ldr	r6, [pc, #660]	; (8003310 <body+0x3f4>)
 800307c:	443e      	add	r6, r7
 800307e:	4416      	add	r6, r2
 8003080:	ea85 0204 	eor.w	r2, r5, r4
 8003084:	400a      	ands	r2, r1
 8003086:	406a      	eors	r2, r5
 8003088:	4432      	add	r2, r6
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
 800308a:	f850 6c18 	ldr.w	r6, [r0, #-24]
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
 800308e:	eb01 5232 	add.w	r2, r1, r2, ror #20
 8003092:	f5a6 4e24 	sub.w	lr, r6, #41984	; 0xa400
 8003096:	f1ae 0e4f 	sub.w	lr, lr, #79	; 0x4f
 800309a:	44ae      	add	lr, r5
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
 800309c:	ea84 0501 	eor.w	r5, r4, r1
 80030a0:	4015      	ands	r5, r2
 80030a2:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
 80030a6:	4065      	eors	r5, r4
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
 80030a8:	f850 7c14 	ldr.w	r7, [r0, #-20]
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
 80030ac:	4475      	add	r5, lr
 80030ae:	f8df e268 	ldr.w	lr, [pc, #616]	; 8003318 <body+0x3fc>
 80030b2:	eb02 35f5 	add.w	r5, r2, r5, ror #15
 80030b6:	44be      	add	lr, r7
 80030b8:	4474      	add	r4, lr
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
 80030ba:	ea81 0e02 	eor.w	lr, r1, r2
 80030be:	ea0e 0e05 	and.w	lr, lr, r5
 80030c2:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
 80030c6:	ea8e 0e01 	eor.w	lr, lr, r1
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
 80030ca:	f850 cc10 	ldr.w	ip, [r0, #-16]
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
 80030ce:	4474      	add	r4, lr
 80030d0:	f8df e248 	ldr.w	lr, [pc, #584]	; 800331c <body+0x400>
 80030d4:	eb05 24b4 	add.w	r4, r5, r4, ror #10
 80030d8:	44e6      	add	lr, ip
 80030da:	4471      	add	r1, lr
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
 80030dc:	ea82 0e05 	eor.w	lr, r2, r5
 80030e0:	ea0e 0e04 	and.w	lr, lr, r4
 80030e4:	f8c3 c088 	str.w	ip, [r3, #136]	; 0x88
 80030e8:	ea8e 0e02 	eor.w	lr, lr, r2
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
 80030ec:	970d      	str	r7, [sp, #52]	; 0x34
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
 80030ee:	4471      	add	r1, lr
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
 80030f0:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 80030f4:	f8df e228 	ldr.w	lr, [pc, #552]	; 8003320 <body+0x404>
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
 80030f8:	eb04 6171 	add.w	r1, r4, r1, ror #25
 80030fc:	44be      	add	lr, r7
 80030fe:	4496      	add	lr, r2
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
 8003100:	ea85 0204 	eor.w	r2, r5, r4
 8003104:	400a      	ands	r2, r1
 8003106:	f8c3 708c 	str.w	r7, [r3, #140]	; 0x8c
 800310a:	406a      	eors	r2, r5
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
 800310c:	f850 8c08 	ldr.w	r8, [r0, #-8]
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
 8003110:	4472      	add	r2, lr
 8003112:	f8df e210 	ldr.w	lr, [pc, #528]	; 8003324 <body+0x408>
 8003116:	eb01 5232 	add.w	r2, r1, r2, ror #20
 800311a:	44c6      	add	lr, r8
 800311c:	44ae      	add	lr, r5
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
 800311e:	ea84 0501 	eor.w	r5, r4, r1
 8003122:	4015      	ands	r5, r2
 8003124:	f8c3 8090 	str.w	r8, [r3, #144]	; 0x90
 8003128:	4065      	eors	r5, r4
 800312a:	4475      	add	r5, lr
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
 800312c:	f850 ec04 	ldr.w	lr, [r0, #-4]
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
 8003130:	eb02 35f5 	add.w	r5, r2, r5, ror #15
 8003134:	44f2      	add	sl, lr
 8003136:	44a2      	add	sl, r4
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
 8003138:	ea81 0402 	eor.w	r4, r1, r2
 800313c:	402c      	ands	r4, r5
 800313e:	404c      	eors	r4, r1
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
 8003140:	970e      	str	r7, [sp, #56]	; 0x38
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
 8003142:	4454      	add	r4, sl
 8003144:	f8c3 e094 	str.w	lr, [r3, #148]	; 0x94
 8003148:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8003328 <body+0x40c>
 800314c:	9f05      	ldr	r7, [sp, #20]
 800314e:	eb05 24b4 	add.w	r4, r5, r4, ror #10
 8003152:	44ba      	add	sl, r7
 8003154:	448a      	add	sl, r1
		STEP(G, a, b, c, d, GET(1), 0xf61e2562, 5)
 8003156:	ea85 0104 	eor.w	r1, r5, r4
 800315a:	4011      	ands	r1, r2
 800315c:	4069      	eors	r1, r5
 800315e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003160:	4451      	add	r1, sl
 8003162:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 800332c <body+0x410>
 8003166:	eb04 61f1 	add.w	r1, r4, r1, ror #27
 800316a:	44ba      	add	sl, r7
 800316c:	4492      	add	sl, r2
		STEP(G, d, a, b, c, GET(6), 0xc040b340, 9)
 800316e:	ea84 0201 	eor.w	r2, r4, r1
 8003172:	402a      	ands	r2, r5
 8003174:	4062      	eors	r2, r4
 8003176:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003178:	4452      	add	r2, sl
 800317a:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8003330 <body+0x414>
 800317e:	eb01 52f2 	add.w	r2, r1, r2, ror #23
 8003182:	44ba      	add	sl, r7
 8003184:	4455      	add	r5, sl
		STEP(G, c, d, a, b, GET(11), 0x265e5a51, 14)
 8003186:	ea81 0a02 	eor.w	sl, r1, r2
 800318a:	ea0a 0a04 	and.w	sl, sl, r4
 800318e:	ea8a 0a01 	eor.w	sl, sl, r1
 8003192:	9f04      	ldr	r7, [sp, #16]
 8003194:	4455      	add	r5, sl
 8003196:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8003334 <body+0x418>
 800319a:	eb02 45b5 	add.w	r5, r2, r5, ror #18
 800319e:	44ba      	add	sl, r7
 80031a0:	44a2      	add	sl, r4
		STEP(G, b, c, d, a, GET(0), 0xe9b6c7aa, 20)
 80031a2:	ea82 0405 	eor.w	r4, r2, r5
 80031a6:	400c      	ands	r4, r1
 80031a8:	4054      	eors	r4, r2
 80031aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80031ac:	4454      	add	r4, sl
 80031ae:	f8df a188 	ldr.w	sl, [pc, #392]	; 8003338 <body+0x41c>
 80031b2:	eb05 3434 	add.w	r4, r5, r4, ror #12
 80031b6:	44ba      	add	sl, r7
 80031b8:	448a      	add	sl, r1
		STEP(G, a, b, c, d, GET(5), 0xd62f105d, 5)
 80031ba:	ea85 0104 	eor.w	r1, r5, r4
 80031be:	4011      	ands	r1, r2
 80031c0:	4069      	eors	r1, r5
 80031c2:	4451      	add	r1, sl
 80031c4:	f8df a174 	ldr.w	sl, [pc, #372]	; 800333c <body+0x420>
 80031c8:	eb04 61f1 	add.w	r1, r4, r1, ror #27
 80031cc:	44b2      	add	sl, r6
 80031ce:	4492      	add	sl, r2
		STEP(G, d, a, b, c, GET(10), 0x02441453, 9)
 80031d0:	ea84 0201 	eor.w	r2, r4, r1
 80031d4:	402a      	ands	r2, r5
 80031d6:	4062      	eors	r2, r4
 80031d8:	4452      	add	r2, sl
 80031da:	f8df a164 	ldr.w	sl, [pc, #356]	; 8003340 <body+0x424>
 80031de:	eb01 52f2 	add.w	r2, r1, r2, ror #23
 80031e2:	44f2      	add	sl, lr
 80031e4:	4455      	add	r5, sl
		STEP(G, c, d, a, b, GET(15), 0xd8a1e681, 14)
 80031e6:	ea81 0a02 	eor.w	sl, r1, r2
 80031ea:	ea0a 0a04 	and.w	sl, sl, r4
 80031ee:	ea8a 0a01 	eor.w	sl, sl, r1
 80031f2:	9f08      	ldr	r7, [sp, #32]
 80031f4:	4455      	add	r5, sl
 80031f6:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8003344 <body+0x428>
 80031fa:	eb02 45b5 	add.w	r5, r2, r5, ror #18
 80031fe:	44ba      	add	sl, r7
 8003200:	44a2      	add	sl, r4
		STEP(G, b, c, d, a, GET(4), 0xe7d3fbc8, 20)
 8003202:	ea82 0405 	eor.w	r4, r2, r5
 8003206:	400c      	ands	r4, r1
 8003208:	4054      	eors	r4, r2
 800320a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800320c:	4454      	add	r4, sl
 800320e:	f8df a138 	ldr.w	sl, [pc, #312]	; 8003348 <body+0x42c>
 8003212:	eb05 3434 	add.w	r4, r5, r4, ror #12
 8003216:	44ba      	add	sl, r7
 8003218:	448a      	add	sl, r1
		STEP(G, a, b, c, d, GET(9), 0x21e1cde6, 5)
 800321a:	ea85 0104 	eor.w	r1, r5, r4
 800321e:	4011      	ands	r1, r2
 8003220:	4069      	eors	r1, r5
 8003222:	4451      	add	r1, sl
 8003224:	f8df a124 	ldr.w	sl, [pc, #292]	; 800334c <body+0x430>
 8003228:	eb04 61f1 	add.w	r1, r4, r1, ror #27
 800322c:	44c2      	add	sl, r8
 800322e:	4492      	add	sl, r2
		STEP(G, d, a, b, c, GET(14), 0xc33707d6, 9)
 8003230:	ea84 0201 	eor.w	r2, r4, r1
 8003234:	402a      	ands	r2, r5
 8003236:	4062      	eors	r2, r4
 8003238:	9f07      	ldr	r7, [sp, #28]
 800323a:	4452      	add	r2, sl
 800323c:	f8df a110 	ldr.w	sl, [pc, #272]	; 8003350 <body+0x434>
 8003240:	eb01 52f2 	add.w	r2, r1, r2, ror #23
 8003244:	44ba      	add	sl, r7
 8003246:	44aa      	add	sl, r5
		STEP(G, c, d, a, b, GET(3), 0xf4d50d87, 14)
 8003248:	ea81 0502 	eor.w	r5, r1, r2
 800324c:	4025      	ands	r5, r4
 800324e:	404d      	eors	r5, r1
 8003250:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8003252:	4455      	add	r5, sl
 8003254:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8003354 <body+0x438>
 8003258:	eb02 45b5 	add.w	r5, r2, r5, ror #18
 800325c:	44ba      	add	sl, r7
 800325e:	4454      	add	r4, sl
		STEP(G, b, c, d, a, GET(8), 0x455a14ed, 20)
 8003260:	ea82 0a05 	eor.w	sl, r2, r5
 8003264:	ea0a 0a01 	and.w	sl, sl, r1
 8003268:	ea8a 0a02 	eor.w	sl, sl, r2
 800326c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800326e:	4454      	add	r4, sl
 8003270:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003358 <body+0x43c>
 8003274:	eb05 3434 	add.w	r4, r5, r4, ror #12
 8003278:	44ba      	add	sl, r7
 800327a:	4451      	add	r1, sl
		STEP(G, a, b, c, d, GET(13), 0xa9e3e905, 5)
 800327c:	ea85 0a04 	eor.w	sl, r5, r4
 8003280:	ea0a 0a02 	and.w	sl, sl, r2
 8003284:	ea8a 0a05 	eor.w	sl, sl, r5
 8003288:	9f06      	ldr	r7, [sp, #24]
 800328a:	4451      	add	r1, sl
 800328c:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800335c <body+0x440>
 8003290:	eb04 61f1 	add.w	r1, r4, r1, ror #27
 8003294:	44ba      	add	sl, r7
 8003296:	4452      	add	r2, sl
		STEP(G, d, a, b, c, GET(2), 0xfcefa3f8, 9)
 8003298:	ea84 0a01 	eor.w	sl, r4, r1
 800329c:	ea0a 0a05 	and.w	sl, sl, r5
 80032a0:	ea8a 0a04 	eor.w	sl, sl, r4
 80032a4:	4452      	add	r2, sl
 80032a6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003360 <body+0x444>
 80032aa:	eb01 52f2 	add.w	r2, r1, r2, ror #23
 80032ae:	44ca      	add	sl, r9
 80032b0:	4455      	add	r5, sl
		STEP(G, c, d, a, b, GET(7), 0x676f02d9, 14)
 80032b2:	ea81 0a02 	eor.w	sl, r1, r2
 80032b6:	ea0a 0a04 	and.w	sl, sl, r4
 80032ba:	ea8a 0a01 	eor.w	sl, sl, r1
 80032be:	4455      	add	r5, sl
 80032c0:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8003364 <body+0x448>
 80032c4:	eb02 45b5 	add.w	r5, r2, r5, ror #18
 80032c8:	44e2      	add	sl, ip
 80032ca:	4454      	add	r4, sl
		STEP(G, b, c, d, a, GET(12), 0x8d2a4c8a, 20)
 80032cc:	ea82 0a05 	eor.w	sl, r2, r5
 80032d0:	ea0a 0a01 	and.w	sl, sl, r1
 80032d4:	ea8a 0a02 	eor.w	sl, sl, r2
 80032d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80032da:	4454      	add	r4, sl
 80032dc:	eb05 3434 	add.w	r4, r5, r4, ror #12
 80032e0:	f5a7 2bb8 	sub.w	fp, r7, #376832	; 0x5c000
		STEP(H, a, b, c, d, GET(5), 0xfffa3942, 4)
 80032e4:	ea85 0a04 	eor.w	sl, r5, r4
 80032e8:	f2ab 6bbe 	subw	fp, fp, #1726	; 0x6be
 80032ec:	4459      	add	r1, fp
 80032ee:	ea82 0b0a 	eor.w	fp, r2, sl
 80032f2:	e039      	b.n	8003368 <body+0x44c>
 80032f4:	e8c7b756 	.word	0xe8c7b756
 80032f8:	c1bdceee 	.word	0xc1bdceee
 80032fc:	f57c0faf 	.word	0xf57c0faf
 8003300:	4787c62a 	.word	0x4787c62a
 8003304:	a8304613 	.word	0xa8304613
 8003308:	fd469501 	.word	0xfd469501
 800330c:	698098d8 	.word	0x698098d8
 8003310:	8b44f7af 	.word	0x8b44f7af
 8003314:	49b40821 	.word	0x49b40821
 8003318:	895cd7be 	.word	0x895cd7be
 800331c:	6b901122 	.word	0x6b901122
 8003320:	fd987193 	.word	0xfd987193
 8003324:	a679438e 	.word	0xa679438e
 8003328:	f61e2562 	.word	0xf61e2562
 800332c:	c040b340 	.word	0xc040b340
 8003330:	265e5a51 	.word	0x265e5a51
 8003334:	e9b6c7aa 	.word	0xe9b6c7aa
 8003338:	d62f105d 	.word	0xd62f105d
 800333c:	02441453 	.word	0x02441453
 8003340:	d8a1e681 	.word	0xd8a1e681
 8003344:	e7d3fbc8 	.word	0xe7d3fbc8
 8003348:	21e1cde6 	.word	0x21e1cde6
 800334c:	c33707d6 	.word	0xc33707d6
 8003350:	f4d50d87 	.word	0xf4d50d87
 8003354:	455a14ed 	.word	0x455a14ed
 8003358:	a9e3e905 	.word	0xa9e3e905
 800335c:	fcefa3f8 	.word	0xfcefa3f8
 8003360:	676f02d9 	.word	0x676f02d9
 8003364:	8d2a4c8a 	.word	0x8d2a4c8a
 8003368:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800336a:	448b      	add	fp, r1
 800336c:	49af      	ldr	r1, [pc, #700]	; (800362c <body+0x710>)
 800336e:	eb04 7b3b 	add.w	fp, r4, fp, ror #28
 8003372:	4439      	add	r1, r7
 8003374:	440a      	add	r2, r1
		STEP(H2, d, a, b, c, GET(8), 0x8771f681, 11)
 8003376:	ea8a 0a0b 	eor.w	sl, sl, fp
 800337a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800337c:	4492      	add	sl, r2
 800337e:	49ac      	ldr	r1, [pc, #688]	; (8003630 <body+0x714>)
 8003380:	eb0b 5a7a 	add.w	sl, fp, sl, ror #21
		STEP(H, c, d, a, b, GET(11), 0x6d9d6122, 16)
 8003384:	ea8b 020a 	eor.w	r2, fp, sl
 8003388:	4439      	add	r1, r7
 800338a:	440d      	add	r5, r1
 800338c:	ea84 0102 	eor.w	r1, r4, r2
 8003390:	440d      	add	r5, r1
 8003392:	49a8      	ldr	r1, [pc, #672]	; (8003634 <body+0x718>)
 8003394:	eb0a 4535 	add.w	r5, sl, r5, ror #16
 8003398:	4441      	add	r1, r8
 800339a:	440c      	add	r4, r1
 800339c:	9905      	ldr	r1, [sp, #20]
		STEP(H2, b, c, d, a, GET(14), 0xfde5380c, 23)
 800339e:	406a      	eors	r2, r5
 80033a0:	f101 4124 	add.w	r1, r1, #2751463424	; 0xa4000000
 80033a4:	4414      	add	r4, r2
 80033a6:	f501 013e 	add.w	r1, r1, #12451840	; 0xbe0000
 80033aa:	eb05 2474 	add.w	r4, r5, r4, ror #9
 80033ae:	f501 416a 	add.w	r1, r1, #59904	; 0xea00
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
 80033b2:	ea85 0204 	eor.w	r2, r5, r4
 80033b6:	3144      	adds	r1, #68	; 0x44
 80033b8:	4459      	add	r1, fp
 80033ba:	ea8a 0b02 	eor.w	fp, sl, r2
 80033be:	9f08      	ldr	r7, [sp, #32]
 80033c0:	448b      	add	fp, r1
 80033c2:	499d      	ldr	r1, [pc, #628]	; (8003638 <body+0x71c>)
 80033c4:	eb04 7b3b 	add.w	fp, r4, fp, ror #28
 80033c8:	4439      	add	r1, r7
		STEP(H2, d, a, b, c, GET(4), 0x4bdecfa9, 11)
 80033ca:	ea82 020b 	eor.w	r2, r2, fp
 80033ce:	448a      	add	sl, r1
 80033d0:	eb02 010a 	add.w	r1, r2, sl
 80033d4:	4a99      	ldr	r2, [pc, #612]	; (800363c <body+0x720>)
 80033d6:	eb0b 5171 	add.w	r1, fp, r1, ror #21
		STEP(H, c, d, a, b, GET(7), 0xf6bb4b60, 16)
 80033da:	ea8b 0a01 	eor.w	sl, fp, r1
 80033de:	444a      	add	r2, r9
 80033e0:	4415      	add	r5, r2
 80033e2:	ea84 020a 	eor.w	r2, r4, sl
 80033e6:	4415      	add	r5, r2
 80033e8:	4a95      	ldr	r2, [pc, #596]	; (8003640 <body+0x724>)
 80033ea:	eb01 4535 	add.w	r5, r1, r5, ror #16
 80033ee:	4432      	add	r2, r6
		STEP(H2, b, c, d, a, GET(10), 0xbebfbc70, 23)
 80033f0:	ea8a 0a05 	eor.w	sl, sl, r5
 80033f4:	4414      	add	r4, r2
 80033f6:	eb0a 0204 	add.w	r2, sl, r4
 80033fa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80033fc:	f8df a288 	ldr.w	sl, [pc, #648]	; 8003688 <body+0x76c>
 8003400:	eb05 2272 	add.w	r2, r5, r2, ror #9
		STEP(H, a, b, c, d, GET(13), 0x289b7ec6, 4)
 8003404:	ea85 0402 	eor.w	r4, r5, r2
 8003408:	44ba      	add	sl, r7
 800340a:	44d3      	add	fp, sl
 800340c:	ea81 0a04 	eor.w	sl, r1, r4
 8003410:	9f04      	ldr	r7, [sp, #16]
 8003412:	44da      	add	sl, fp
 8003414:	f8df b274 	ldr.w	fp, [pc, #628]	; 800368c <body+0x770>
 8003418:	eb02 7a3a 	add.w	sl, r2, sl, ror #28
 800341c:	44bb      	add	fp, r7
		STEP(H2, d, a, b, c, GET(0), 0xeaa127fa, 11)
 800341e:	ea84 040a 	eor.w	r4, r4, sl
 8003422:	4459      	add	r1, fp
 8003424:	9f07      	ldr	r7, [sp, #28]
 8003426:	4421      	add	r1, r4
 8003428:	4c86      	ldr	r4, [pc, #536]	; (8003644 <body+0x728>)
 800342a:	eb0a 5171 	add.w	r1, sl, r1, ror #21
		STEP(H, c, d, a, b, GET(3), 0xd4ef3085, 16)
 800342e:	ea8a 0b01 	eor.w	fp, sl, r1
 8003432:	443c      	add	r4, r7
 8003434:	4425      	add	r5, r4
 8003436:	ea82 040b 	eor.w	r4, r2, fp
 800343a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800343c:	4425      	add	r5, r4
 800343e:	4c82      	ldr	r4, [pc, #520]	; (8003648 <body+0x72c>)
 8003440:	eb01 4535 	add.w	r5, r1, r5, ror #16
 8003444:	443c      	add	r4, r7
		STEP(H2, b, c, d, a, GET(6), 0x04881d05, 23)
 8003446:	ea8b 0b05 	eor.w	fp, fp, r5
 800344a:	4422      	add	r2, r4
 800344c:	eb0b 0402 	add.w	r4, fp, r2
 8003450:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8003452:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8003690 <body+0x774>
 8003456:	eb05 2474 	add.w	r4, r5, r4, ror #9
		STEP(H, a, b, c, d, GET(9), 0xd9d4d039, 4)
 800345a:	ea85 0204 	eor.w	r2, r5, r4
 800345e:	44bb      	add	fp, r7
 8003460:	44da      	add	sl, fp
 8003462:	ea81 0b02 	eor.w	fp, r1, r2
 8003466:	44da      	add	sl, fp
 8003468:	f8df b228 	ldr.w	fp, [pc, #552]	; 8003694 <body+0x778>
 800346c:	eb04 7a3a 	add.w	sl, r4, sl, ror #28
 8003470:	44e3      	add	fp, ip
		STEP(H2, d, a, b, c, GET(12), 0xe6db99e5, 11)
 8003472:	ea82 020a 	eor.w	r2, r2, sl
 8003476:	4459      	add	r1, fp
 8003478:	4411      	add	r1, r2
 800347a:	f8df b21c 	ldr.w	fp, [pc, #540]	; 8003698 <body+0x77c>
 800347e:	eb0a 5171 	add.w	r1, sl, r1, ror #21
		STEP(H, c, d, a, b, GET(15), 0x1fa27cf8, 16)
 8003482:	ea8a 0201 	eor.w	r2, sl, r1
 8003486:	44f3      	add	fp, lr
 8003488:	44ab      	add	fp, r5
 800348a:	ea84 0502 	eor.w	r5, r4, r2
 800348e:	9f06      	ldr	r7, [sp, #24]
 8003490:	445d      	add	r5, fp
 8003492:	f8df b208 	ldr.w	fp, [pc, #520]	; 800369c <body+0x780>
 8003496:	eb01 4535 	add.w	r5, r1, r5, ror #16
 800349a:	44bb      	add	fp, r7
		STEP(H2, b, c, d, a, GET(2), 0xc4ac5665, 23)
 800349c:	406a      	eors	r2, r5
 800349e:	445c      	add	r4, fp
 80034a0:	9f04      	ldr	r7, [sp, #16]
 80034a2:	4414      	add	r4, r2
 80034a4:	4a69      	ldr	r2, [pc, #420]	; (800364c <body+0x730>)
 80034a6:	eb05 2474 	add.w	r4, r5, r4, ror #9
 80034aa:	443a      	add	r2, r7
 80034ac:	4492      	add	sl, r2
		STEP(I, a, b, c, d, GET(0), 0xf4292244, 6)
 80034ae:	ea64 0201 	orn	r2, r4, r1
 80034b2:	406a      	eors	r2, r5
 80034b4:	4492      	add	sl, r2
 80034b6:	4a66      	ldr	r2, [pc, #408]	; (8003650 <body+0x734>)
 80034b8:	eb04 6aba 	add.w	sl, r4, sl, ror #26
 80034bc:	444a      	add	r2, r9
		STEP(I, d, a, b, c, GET(7), 0x432aff97, 10)
 80034be:	ea6a 0905 	orn	r9, sl, r5
 80034c2:	4411      	add	r1, r2
 80034c4:	ea89 0904 	eor.w	r9, r9, r4
 80034c8:	4449      	add	r1, r9
 80034ca:	4a62      	ldr	r2, [pc, #392]	; (8003654 <body+0x738>)
 80034cc:	eb0a 51b1 	add.w	r1, sl, r1, ror #22
 80034d0:	4442      	add	r2, r8
		STEP(I, c, d, a, b, GET(14), 0xab9423a7, 15)
 80034d2:	ea61 0804 	orn	r8, r1, r4
 80034d6:	ea88 080a 	eor.w	r8, r8, sl
 80034da:	4415      	add	r5, r2
 80034dc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80034de:	4445      	add	r5, r8
 80034e0:	4a5d      	ldr	r2, [pc, #372]	; (8003658 <body+0x73c>)
 80034e2:	eb01 4575 	add.w	r5, r1, r5, ror #17
 80034e6:	443a      	add	r2, r7
		STEP(I, b, c, d, a, GET(5), 0xfc93a039, 21)
 80034e8:	ea65 080a 	orn	r8, r5, sl
 80034ec:	4414      	add	r4, r2
 80034ee:	ea88 0801 	eor.w	r8, r8, r1
 80034f2:	4444      	add	r4, r8
 80034f4:	4a59      	ldr	r2, [pc, #356]	; (800365c <body+0x740>)
 80034f6:	eb05 24f4 	add.w	r4, r5, r4, ror #11
 80034fa:	4462      	add	r2, ip
		STEP(I, a, b, c, d, GET(12), 0x655b59c3, 6)
 80034fc:	ea64 0c01 	orn	ip, r4, r1
 8003500:	ea8c 0c05 	eor.w	ip, ip, r5
 8003504:	4492      	add	sl, r2
 8003506:	44e2      	add	sl, ip
 8003508:	9f07      	ldr	r7, [sp, #28]
 800350a:	4a55      	ldr	r2, [pc, #340]	; (8003660 <body+0x744>)
 800350c:	eb04 6aba 	add.w	sl, r4, sl, ror #26
		STEP(I, d, a, b, c, GET(3), 0x8f0ccc92, 10)
 8003510:	ea6a 0c05 	orn	ip, sl, r5
 8003514:	443a      	add	r2, r7
 8003516:	4411      	add	r1, r2
 8003518:	ea8c 0c04 	eor.w	ip, ip, r4
 800351c:	4461      	add	r1, ip
 800351e:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8003522:	eb0a 51b1 	add.w	r1, sl, r1, ror #22
 8003526:	f6a6 3683 	subw	r6, r6, #2947	; 0xb83
 800352a:	442e      	add	r6, r5
		STEP(I, c, d, a, b, GET(10), 0xffeff47d, 15)
 800352c:	ea61 0504 	orn	r5, r1, r4
 8003530:	ea85 050a 	eor.w	r5, r5, sl
 8003534:	4435      	add	r5, r6
 8003536:	4a4b      	ldr	r2, [pc, #300]	; (8003664 <body+0x748>)
 8003538:	9e05      	ldr	r6, [sp, #20]
 800353a:	eb01 4575 	add.w	r5, r1, r5, ror #17
 800353e:	4432      	add	r2, r6
 8003540:	4422      	add	r2, r4
		STEP(I, b, c, d, a, GET(1), 0x85845dd1, 21)
 8003542:	ea65 040a 	orn	r4, r5, sl
 8003546:	404c      	eors	r4, r1
 8003548:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800354a:	4414      	add	r4, r2
 800354c:	4a46      	ldr	r2, [pc, #280]	; (8003668 <body+0x74c>)
 800354e:	eb05 24f4 	add.w	r4, r5, r4, ror #11
 8003552:	4432      	add	r2, r6
		STEP(I, a, b, c, d, GET(8), 0x6fa87e4f, 6)
 8003554:	ea64 0601 	orn	r6, r4, r1
 8003558:	406e      	eors	r6, r5
 800355a:	4492      	add	sl, r2
 800355c:	44b2      	add	sl, r6
 800355e:	4a43      	ldr	r2, [pc, #268]	; (800366c <body+0x750>)
 8003560:	eb04 6aba 	add.w	sl, r4, sl, ror #26
		STEP(I, d, a, b, c, GET(15), 0xfe2ce6e0, 10)
 8003564:	ea6a 0605 	orn	r6, sl, r5
 8003568:	4472      	add	r2, lr
 800356a:	4066      	eors	r6, r4
 800356c:	4411      	add	r1, r2
 800356e:	4431      	add	r1, r6
 8003570:	4a3f      	ldr	r2, [pc, #252]	; (8003670 <body+0x754>)
 8003572:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003574:	eb0a 51b1 	add.w	r1, sl, r1, ror #22
 8003578:	4432      	add	r2, r6
		STEP(I, c, d, a, b, GET(6), 0xa3014314, 15)
 800357a:	ea61 0604 	orn	r6, r1, r4
 800357e:	ea86 060a 	eor.w	r6, r6, sl
 8003582:	4415      	add	r5, r2
 8003584:	4435      	add	r5, r6
 8003586:	4a3b      	ldr	r2, [pc, #236]	; (8003674 <body+0x758>)
 8003588:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800358a:	eb01 4575 	add.w	r5, r1, r5, ror #17
 800358e:	4432      	add	r2, r6
		STEP(I, b, c, d, a, GET(13), 0x4e0811a1, 21)
 8003590:	ea65 060a 	orn	r6, r5, sl
 8003594:	404e      	eors	r6, r1
 8003596:	4414      	add	r4, r2
 8003598:	4434      	add	r4, r6
 800359a:	4a37      	ldr	r2, [pc, #220]	; (8003678 <body+0x75c>)
 800359c:	9e08      	ldr	r6, [sp, #32]
 800359e:	eb05 24f4 	add.w	r4, r5, r4, ror #11
 80035a2:	4432      	add	r2, r6
		STEP(I, a, b, c, d, GET(4), 0xf7537e82, 6)
 80035a4:	ea64 0601 	orn	r6, r4, r1
 80035a8:	406e      	eors	r6, r5
 80035aa:	4492      	add	sl, r2
 80035ac:	44b2      	add	sl, r6
 80035ae:	4a33      	ldr	r2, [pc, #204]	; (800367c <body+0x760>)
 80035b0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80035b2:	eb04 6aba 	add.w	sl, r4, sl, ror #26
 80035b6:	4432      	add	r2, r6
		STEP(I, d, a, b, c, GET(11), 0xbd3af235, 10)
 80035b8:	ea6a 0605 	orn	r6, sl, r5
 80035bc:	4066      	eors	r6, r4
 80035be:	4411      	add	r1, r2
 80035c0:	4431      	add	r1, r6
 80035c2:	4a2f      	ldr	r2, [pc, #188]	; (8003680 <body+0x764>)
 80035c4:	9e06      	ldr	r6, [sp, #24]
 80035c6:	eb0a 51b1 	add.w	r1, sl, r1, ror #22
 80035ca:	4432      	add	r2, r6
		STEP(I, c, d, a, b, GET(2), 0x2ad7d2bb, 15)
 80035cc:	ea61 0604 	orn	r6, r1, r4
 80035d0:	4415      	add	r5, r2
 80035d2:	ea86 060a 	eor.w	r6, r6, sl
 80035d6:	4435      	add	r5, r6
 80035d8:	4a2a      	ldr	r2, [pc, #168]	; (8003684 <body+0x768>)
 80035da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80035dc:	eb01 4575 	add.w	r5, r1, r5, ror #17
 80035e0:	4432      	add	r2, r6
 80035e2:	4414      	add	r4, r2
		a += saved_a;
 80035e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
 80035e6:	ea65 060a 	orn	r6, r5, sl
 80035ea:	404e      	eors	r6, r1
		a += saved_a;
 80035ec:	4452      	add	r2, sl
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
 80035ee:	4434      	add	r4, r6
		a += saved_a;
 80035f0:	920f      	str	r2, [sp, #60]	; 0x3c
		b += saved_b;
 80035f2:	9a01      	ldr	r2, [sp, #4]
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
 80035f4:	eb05 24f4 	add.w	r4, r5, r4, ror #11
		b += saved_b;
 80035f8:	4422      	add	r2, r4
 80035fa:	9201      	str	r2, [sp, #4]
		c += saved_c;
 80035fc:	9a02      	ldr	r2, [sp, #8]
 80035fe:	442a      	add	r2, r5
 8003600:	9202      	str	r2, [sp, #8]
		d += saved_d;
 8003602:	9a03      	ldr	r2, [sp, #12]
 8003604:	440a      	add	r2, r1
 8003606:	9203      	str	r2, [sp, #12]
 8003608:	9a11      	ldr	r2, [sp, #68]	; 0x44
	} while (size -= 64);
 800360a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800360c:	1a12      	subs	r2, r2, r0
 800360e:	42d1      	cmn	r1, r2
 8003610:	f47f ac93 	bne.w	8002f3a <body+0x1e>

	ctx->a = a;
 8003614:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003616:	609a      	str	r2, [r3, #8]
	ctx->b = b;
 8003618:	9a01      	ldr	r2, [sp, #4]
 800361a:	60da      	str	r2, [r3, #12]
	ctx->c = c;
 800361c:	9a02      	ldr	r2, [sp, #8]
 800361e:	611a      	str	r2, [r3, #16]
	ctx->d = d;
 8003620:	9a03      	ldr	r2, [sp, #12]
 8003622:	615a      	str	r2, [r3, #20]

	return ptr;
}
 8003624:	b013      	add	sp, #76	; 0x4c
 8003626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800362a:	bf00      	nop
 800362c:	8771f681 	.word	0x8771f681
 8003630:	6d9d6122 	.word	0x6d9d6122
 8003634:	fde5380c 	.word	0xfde5380c
 8003638:	4bdecfa9 	.word	0x4bdecfa9
 800363c:	f6bb4b60 	.word	0xf6bb4b60
 8003640:	bebfbc70 	.word	0xbebfbc70
 8003644:	d4ef3085 	.word	0xd4ef3085
 8003648:	04881d05 	.word	0x04881d05
 800364c:	f4292244 	.word	0xf4292244
 8003650:	432aff97 	.word	0x432aff97
 8003654:	ab9423a7 	.word	0xab9423a7
 8003658:	fc93a039 	.word	0xfc93a039
 800365c:	655b59c3 	.word	0x655b59c3
 8003660:	8f0ccc92 	.word	0x8f0ccc92
 8003664:	85845dd1 	.word	0x85845dd1
 8003668:	6fa87e4f 	.word	0x6fa87e4f
 800366c:	fe2ce6e0 	.word	0xfe2ce6e0
 8003670:	a3014314 	.word	0xa3014314
 8003674:	4e0811a1 	.word	0x4e0811a1
 8003678:	f7537e82 	.word	0xf7537e82
 800367c:	bd3af235 	.word	0xbd3af235
 8003680:	2ad7d2bb 	.word	0x2ad7d2bb
 8003684:	eb86d391 	.word	0xeb86d391
 8003688:	289b7ec6 	.word	0x289b7ec6
 800368c:	eaa127fa 	.word	0xeaa127fa
 8003690:	d9d4d039 	.word	0xd9d4d039
 8003694:	e6db99e5 	.word	0xe6db99e5
 8003698:	1fa27cf8 	.word	0x1fa27cf8
 800369c:	c4ac5665 	.word	0xc4ac5665

080036a0 <MD5_Init>:

void MD5_Init(MD5_CTX *ctx)
{
	ctx->a = 0x67452301;
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <MD5_Init+0x28>)
 80036a2:	6083      	str	r3, [r0, #8]
	ctx->b = 0xefcdab89;
 80036a4:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80036a8:	60c3      	str	r3, [r0, #12]
	ctx->c = 0x98badcfe;
 80036aa:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
 80036ae:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
 80036b2:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
 80036b6:	6103      	str	r3, [r0, #16]
	ctx->d = 0x10325476;
 80036b8:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
 80036bc:	6143      	str	r3, [r0, #20]

	ctx->lo = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	6003      	str	r3, [r0, #0]
	ctx->hi = 0;
 80036c2:	6043      	str	r3, [r0, #4]
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	67452301 	.word	0x67452301

080036cc <MD5_Update>:
}

void MD5_Update(MD5_CTX *ctx, const void *data, unsigned long size)
{
 80036cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ce:	4604      	mov	r4, r0
	MD5_u32plus saved_lo;
	unsigned long used, available;

	saved_lo = ctx->lo;
 80036d0:	6800      	ldr	r0, [r0, #0]
{
 80036d2:	460e      	mov	r6, r1
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
 80036d4:	1883      	adds	r3, r0, r2
 80036d6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80036da:	4298      	cmp	r0, r3
 80036dc:	6023      	str	r3, [r4, #0]
		ctx->hi++;
 80036de:	bf88      	it	hi
 80036e0:	6863      	ldrhi	r3, [r4, #4]
{
 80036e2:	4615      	mov	r5, r2
		ctx->hi++;
 80036e4:	bf84      	itt	hi
 80036e6:	3301      	addhi	r3, #1
 80036e8:	6063      	strhi	r3, [r4, #4]
	ctx->hi += size >> 29;
 80036ea:	6863      	ldr	r3, [r4, #4]

	used = saved_lo & 0x3f;

	if (used) {
 80036ec:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
	ctx->hi += size >> 29;
 80036f0:	eb03 7352 	add.w	r3, r3, r2, lsr #29
 80036f4:	6063      	str	r3, [r4, #4]
	if (used) {
 80036f6:	d016      	beq.n	8003726 <MD5_Update+0x5a>
		available = 64 - used;
 80036f8:	f1c0 0740 	rsb	r7, r0, #64	; 0x40

		if (size < available) {
 80036fc:	42ba      	cmp	r2, r7
 80036fe:	f100 0018 	add.w	r0, r0, #24
 8003702:	d204      	bcs.n	800370e <MD5_Update+0x42>
			memcpy(&ctx->buffer[used], data, size);
 8003704:	4420      	add	r0, r4
		data = body(ctx, data, size & ~(unsigned long)0x3f);
		size &= 0x3f;
	}

	memcpy(ctx->buffer, data, size);
}
 8003706:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memcpy(ctx->buffer, data, size);
 800370a:	f000 b9c1 	b.w	8003a90 <memcpy>
		memcpy(&ctx->buffer[used], data, available);
 800370e:	463a      	mov	r2, r7
 8003710:	4420      	add	r0, r4
 8003712:	f000 f9bd 	bl	8003a90 <memcpy>
		body(ctx, ctx->buffer, 64);
 8003716:	2240      	movs	r2, #64	; 0x40
 8003718:	f104 0118 	add.w	r1, r4, #24
 800371c:	4620      	mov	r0, r4
		data = (const unsigned char *)data + available;
 800371e:	443e      	add	r6, r7
		size -= available;
 8003720:	1bed      	subs	r5, r5, r7
		body(ctx, ctx->buffer, 64);
 8003722:	f7ff fbfb 	bl	8002f1c <body>
	if (size >= 64) {
 8003726:	2d3f      	cmp	r5, #63	; 0x3f
 8003728:	d908      	bls.n	800373c <MD5_Update+0x70>
		data = body(ctx, data, size & ~(unsigned long)0x3f);
 800372a:	f025 023f 	bic.w	r2, r5, #63	; 0x3f
 800372e:	4631      	mov	r1, r6
 8003730:	4620      	mov	r0, r4
 8003732:	f7ff fbf3 	bl	8002f1c <body>
 8003736:	4606      	mov	r6, r0
		size &= 0x3f;
 8003738:	f005 053f 	and.w	r5, r5, #63	; 0x3f
	memcpy(ctx->buffer, data, size);
 800373c:	462a      	mov	r2, r5
 800373e:	4631      	mov	r1, r6
 8003740:	f104 0018 	add.w	r0, r4, #24
 8003744:	e7df      	b.n	8003706 <MD5_Update+0x3a>

08003746 <MD5_Final>:
	(dst)[1] = (unsigned char)((src) >> 8); \
	(dst)[2] = (unsigned char)((src) >> 16); \
	(dst)[3] = (unsigned char)((src) >> 24);

void MD5_Final(unsigned char *result, MD5_CTX *ctx)
{
 8003746:	b570      	push	{r4, r5, r6, lr}
 8003748:	4605      	mov	r5, r0
	unsigned long used, available;

	used = ctx->lo & 0x3f;
 800374a:	6808      	ldr	r0, [r1, #0]
{
 800374c:	460c      	mov	r4, r1
	used = ctx->lo & 0x3f;
 800374e:	f000 003f 	and.w	r0, r0, #63	; 0x3f

	ctx->buffer[used++] = 0x80;
 8003752:	180a      	adds	r2, r1, r0
 8003754:	2180      	movs	r1, #128	; 0x80
 8003756:	1c43      	adds	r3, r0, #1
 8003758:	7611      	strb	r1, [r2, #24]

	available = 64 - used;
 800375a:	f1c3 0240 	rsb	r2, r3, #64	; 0x40

	if (available < 8) {
 800375e:	2a07      	cmp	r2, #7
 8003760:	f104 0618 	add.w	r6, r4, #24
 8003764:	d80b      	bhi.n	800377e <MD5_Final+0x38>
		memset(&ctx->buffer[used], 0, available);
 8003766:	3019      	adds	r0, #25
 8003768:	2100      	movs	r1, #0
 800376a:	4420      	add	r0, r4
 800376c:	f000 f99b 	bl	8003aa6 <memset>
		body(ctx, ctx->buffer, 64);
 8003770:	2240      	movs	r2, #64	; 0x40
 8003772:	4631      	mov	r1, r6
 8003774:	4620      	mov	r0, r4
 8003776:	f7ff fbd1 	bl	8002f1c <body>
		used = 0;
		available = 64;
 800377a:	2240      	movs	r2, #64	; 0x40
		used = 0;
 800377c:	2300      	movs	r3, #0
	}

	memset(&ctx->buffer[used], 0, available - 8);
 800377e:	f103 0018 	add.w	r0, r3, #24
 8003782:	3a08      	subs	r2, #8
 8003784:	2100      	movs	r1, #0
 8003786:	4420      	add	r0, r4
 8003788:	f000 f98d 	bl	8003aa6 <memset>

	ctx->lo <<= 3;
 800378c:	6823      	ldr	r3, [r4, #0]
	OUT(&ctx->buffer[56], ctx->lo)
	OUT(&ctx->buffer[60], ctx->hi)

	body(ctx, ctx->buffer, 64);
 800378e:	4631      	mov	r1, r6
	ctx->lo <<= 3;
 8003790:	00db      	lsls	r3, r3, #3
	OUT(&ctx->buffer[56], ctx->lo)
 8003792:	0a1a      	lsrs	r2, r3, #8
	ctx->lo <<= 3;
 8003794:	6023      	str	r3, [r4, #0]
	OUT(&ctx->buffer[56], ctx->lo)
 8003796:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800379a:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 800379e:	0c1a      	lsrs	r2, r3, #16
 80037a0:	0e1b      	lsrs	r3, r3, #24
 80037a2:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
	OUT(&ctx->buffer[60], ctx->hi)
 80037a6:	6863      	ldr	r3, [r4, #4]
	OUT(&ctx->buffer[56], ctx->lo)
 80037a8:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
	OUT(&ctx->buffer[60], ctx->hi)
 80037ac:	0a1a      	lsrs	r2, r3, #8
 80037ae:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80037b2:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
 80037b6:	0c1a      	lsrs	r2, r3, #16
 80037b8:	0e1b      	lsrs	r3, r3, #24
 80037ba:	f884 2056 	strb.w	r2, [r4, #86]	; 0x56
 80037be:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
	body(ctx, ctx->buffer, 64);
 80037c2:	2240      	movs	r2, #64	; 0x40
 80037c4:	4620      	mov	r0, r4
 80037c6:	f7ff fba9 	bl	8002f1c <body>

	OUT(&result[0], ctx->a)
 80037ca:	68a3      	ldr	r3, [r4, #8]
	OUT(&result[4], ctx->b)
	OUT(&result[8], ctx->c)
	OUT(&result[12], ctx->d)

	memset(ctx, 0, sizeof(*ctx));
 80037cc:	4620      	mov	r0, r4
	OUT(&result[0], ctx->a)
 80037ce:	702b      	strb	r3, [r5, #0]
 80037d0:	68a3      	ldr	r3, [r4, #8]
	memset(ctx, 0, sizeof(*ctx));
 80037d2:	2298      	movs	r2, #152	; 0x98
	OUT(&result[0], ctx->a)
 80037d4:	0a1b      	lsrs	r3, r3, #8
 80037d6:	706b      	strb	r3, [r5, #1]
 80037d8:	8963      	ldrh	r3, [r4, #10]
	memset(ctx, 0, sizeof(*ctx));
 80037da:	2100      	movs	r1, #0
	OUT(&result[0], ctx->a)
 80037dc:	70ab      	strb	r3, [r5, #2]
 80037de:	7ae3      	ldrb	r3, [r4, #11]
 80037e0:	70eb      	strb	r3, [r5, #3]
	OUT(&result[4], ctx->b)
 80037e2:	68e3      	ldr	r3, [r4, #12]
 80037e4:	712b      	strb	r3, [r5, #4]
 80037e6:	68e3      	ldr	r3, [r4, #12]
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	716b      	strb	r3, [r5, #5]
 80037ec:	89e3      	ldrh	r3, [r4, #14]
 80037ee:	71ab      	strb	r3, [r5, #6]
 80037f0:	7be3      	ldrb	r3, [r4, #15]
 80037f2:	71eb      	strb	r3, [r5, #7]
	OUT(&result[8], ctx->c)
 80037f4:	6923      	ldr	r3, [r4, #16]
 80037f6:	722b      	strb	r3, [r5, #8]
 80037f8:	6923      	ldr	r3, [r4, #16]
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	726b      	strb	r3, [r5, #9]
 80037fe:	8a63      	ldrh	r3, [r4, #18]
 8003800:	72ab      	strb	r3, [r5, #10]
 8003802:	7ce3      	ldrb	r3, [r4, #19]
 8003804:	72eb      	strb	r3, [r5, #11]
	OUT(&result[12], ctx->d)
 8003806:	6963      	ldr	r3, [r4, #20]
 8003808:	732b      	strb	r3, [r5, #12]
 800380a:	6963      	ldr	r3, [r4, #20]
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	736b      	strb	r3, [r5, #13]
 8003810:	8ae3      	ldrh	r3, [r4, #22]
 8003812:	73ab      	strb	r3, [r5, #14]
 8003814:	7de3      	ldrb	r3, [r4, #23]
 8003816:	73eb      	strb	r3, [r5, #15]
}
 8003818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(ctx, 0, sizeof(*ctx));
 800381c:	f000 b943 	b.w	8003aa6 <memset>

08003820 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003820:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <HAL_MspInit+0x84>)
{
 8003822:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003824:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003826:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003828:	f042 0201 	orr.w	r2, r2, #1
 800382c:	619a      	str	r2, [r3, #24]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	9301      	str	r3, [sp, #4]
 8003836:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003838:	f7fd fca0 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800383c:	2200      	movs	r2, #0
 800383e:	f06f 000b 	mvn.w	r0, #11
 8003842:	4611      	mov	r1, r2
 8003844:	f7fd fcac 	bl	80011a0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003848:	2200      	movs	r2, #0
 800384a:	f06f 000a 	mvn.w	r0, #10
 800384e:	4611      	mov	r1, r2
 8003850:	f7fd fca6 	bl	80011a0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003854:	2200      	movs	r2, #0
 8003856:	f06f 0009 	mvn.w	r0, #9
 800385a:	4611      	mov	r1, r2
 800385c:	f7fd fca0 	bl	80011a0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003860:	2200      	movs	r2, #0
 8003862:	f06f 0004 	mvn.w	r0, #4
 8003866:	4611      	mov	r1, r2
 8003868:	f7fd fc9a 	bl	80011a0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800386c:	2200      	movs	r2, #0
 800386e:	f06f 0003 	mvn.w	r0, #3
 8003872:	4611      	mov	r1, r2
 8003874:	f7fd fc94 	bl	80011a0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003878:	2200      	movs	r2, #0
 800387a:	f06f 0001 	mvn.w	r0, #1
 800387e:	4611      	mov	r1, r2
 8003880:	f7fd fc8e 	bl	80011a0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003884:	2200      	movs	r2, #0
 8003886:	f04f 30ff 	mov.w	r0, #4294967295
 800388a:	4611      	mov	r1, r2
 800388c:	f7fd fc88 	bl	80011a0 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003890:	4a05      	ldr	r2, [pc, #20]	; (80038a8 <HAL_MspInit+0x88>)
 8003892:	6853      	ldr	r3, [r2, #4]
 8003894:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003898:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800389c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800389e:	b003      	add	sp, #12
 80038a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40010000 	.word	0x40010000

080038ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80038ae:	6802      	ldr	r2, [r0, #0]
 80038b0:	4b15      	ldr	r3, [pc, #84]	; (8003908 <HAL_SPI_MspInit+0x5c>)
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d124      	bne.n	8003900 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038b6:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80038ba:	699a      	ldr	r2, [r3, #24]
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038bc:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038c2:	619a      	str	r2, [r3, #24]
 80038c4:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c6:	4811      	ldr	r0, [pc, #68]	; (800390c <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038cc:	9301      	str	r3, [sp, #4]
 80038ce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80038d0:	2328      	movs	r3, #40	; 0x28
 80038d2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d4:	2302      	movs	r3, #2
 80038d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038d8:	2303      	movs	r3, #3
 80038da:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038dc:	f7fd fd10 	bl	8001300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80038e0:	2310      	movs	r3, #16
 80038e2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038e4:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e6:	a902      	add	r1, sp, #8
 80038e8:	4808      	ldr	r0, [pc, #32]	; (800390c <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ee:	f7fd fd07 	bl	8001300 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80038f2:	4a07      	ldr	r2, [pc, #28]	; (8003910 <HAL_SPI_MspInit+0x64>)
 80038f4:	6853      	ldr	r3, [r2, #4]
 80038f6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003900:	b007      	add	sp, #28
 8003902:	f85d fb04 	ldr.w	pc, [sp], #4
 8003906:	bf00      	nop
 8003908:	40013000 	.word	0x40013000
 800390c:	40010c00 	.word	0x40010c00
 8003910:	40010000 	.word	0x40010000

08003914 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003914:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8003916:	6802      	ldr	r2, [r0, #0]
 8003918:	4b16      	ldr	r3, [pc, #88]	; (8003974 <HAL_UART_MspInit+0x60>)
{
 800391a:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 800391c:	429a      	cmp	r2, r3
 800391e:	d126      	bne.n	800396e <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003920:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003924:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003926:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8003928:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800392c:	61da      	str	r2, [r3, #28]
 800392e:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003930:	4811      	ldr	r0, [pc, #68]	; (8003978 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	9301      	str	r3, [sp, #4]
 8003938:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800393a:	2304      	movs	r3, #4
 800393c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393e:	2302      	movs	r3, #2
 8003940:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003942:	2303      	movs	r3, #3
 8003944:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003946:	f7fd fcdb 	bl	8001300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800394a:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800394c:	2400      	movs	r4, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394e:	eb0d 0103 	add.w	r1, sp, r3
 8003952:	4809      	ldr	r0, [pc, #36]	; (8003978 <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003954:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003956:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003958:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395a:	f7fd fcd1 	bl	8001300 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800395e:	2026      	movs	r0, #38	; 0x26
 8003960:	4622      	mov	r2, r4
 8003962:	4621      	mov	r1, r4
 8003964:	f7fd fc1c 	bl	80011a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003968:	2026      	movs	r0, #38	; 0x26
 800396a:	f7fd fc4d 	bl	8001208 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800396e:	b006      	add	sp, #24
 8003970:	bd10      	pop	{r4, pc}
 8003972:	bf00      	nop
 8003974:	40004400 	.word	0x40004400
 8003978:	40010800 	.word	0x40010800

0800397c <NMI_Handler>:
 800397c:	4770      	bx	lr

0800397e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800397e:	e7fe      	b.n	800397e <HardFault_Handler>

08003980 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003980:	e7fe      	b.n	8003980 <MemManage_Handler>

08003982 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003982:	e7fe      	b.n	8003982 <BusFault_Handler>

08003984 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003984:	e7fe      	b.n	8003984 <UsageFault_Handler>

08003986 <SVC_Handler>:
 8003986:	4770      	bx	lr

08003988 <DebugMon_Handler>:
 8003988:	4770      	bx	lr

0800398a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800398a:	4770      	bx	lr

0800398c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800398c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800398e:	f7fd fbd1 	bl	8001134 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003996:	f7fd bc66 	b.w	8001266 <HAL_SYSTICK_IRQHandler>
	...

0800399c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800399c:	4801      	ldr	r0, [pc, #4]	; (80039a4 <USART2_IRQHandler+0x8>)
 800399e:	f7fe bcc7 	b.w	8002330 <HAL_UART_IRQHandler>
 80039a2:	bf00      	nop
 80039a4:	20000470 	.word	0x20000470

080039a8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <SystemInit+0x40>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80039b2:	6859      	ldr	r1, [r3, #4]
 80039b4:	4a0d      	ldr	r2, [pc, #52]	; (80039ec <SystemInit+0x44>)
 80039b6:	400a      	ands	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80039c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80039c4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039cc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80039d4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80039d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80039da:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80039dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039e0:	4b03      	ldr	r3, [pc, #12]	; (80039f0 <SystemInit+0x48>)
 80039e2:	609a      	str	r2, [r3, #8]
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	f8ff0000 	.word	0xf8ff0000
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80039f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80039f6:	e003      	b.n	8003a00 <LoopCopyDataInit>

080039f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80039fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80039fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80039fe:	3104      	adds	r1, #4

08003a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003a00:	480a      	ldr	r0, [pc, #40]	; (8003a2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003a04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003a06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003a08:	d3f6      	bcc.n	80039f8 <CopyDataInit>
  ldr r2, =_sbss
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003a0c:	e002      	b.n	8003a14 <LoopFillZerobss>

08003a0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003a0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003a10:	f842 3b04 	str.w	r3, [r2], #4

08003a14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003a14:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003a16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003a18:	d3f9      	bcc.n	8003a0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a1a:	f7ff ffc5 	bl	80039a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a1e:	f000 f813 	bl	8003a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a22:	f7ff f8d3 	bl	8002bcc <main>
  bx lr
 8003a26:	4770      	bx	lr
  ldr r3, =_sidata
 8003a28:	08004884 	.word	0x08004884
  ldr r0, =_sdata
 8003a2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003a30:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8003a34:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8003a38:	200004c4 	.word	0x200004c4

08003a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a3c:	e7fe      	b.n	8003a3c <ADC1_2_IRQHandler>

08003a3e <atol>:
 8003a3e:	220a      	movs	r2, #10
 8003a40:	2100      	movs	r1, #0
 8003a42:	f000 b8ef 	b.w	8003c24 <strtol>
	...

08003a48 <__libc_init_array>:
 8003a48:	b570      	push	{r4, r5, r6, lr}
 8003a4a:	2500      	movs	r5, #0
 8003a4c:	4e0c      	ldr	r6, [pc, #48]	; (8003a80 <__libc_init_array+0x38>)
 8003a4e:	4c0d      	ldr	r4, [pc, #52]	; (8003a84 <__libc_init_array+0x3c>)
 8003a50:	1ba4      	subs	r4, r4, r6
 8003a52:	10a4      	asrs	r4, r4, #2
 8003a54:	42a5      	cmp	r5, r4
 8003a56:	d109      	bne.n	8003a6c <__libc_init_array+0x24>
 8003a58:	f000 fe2e 	bl	80046b8 <_init>
 8003a5c:	2500      	movs	r5, #0
 8003a5e:	4e0a      	ldr	r6, [pc, #40]	; (8003a88 <__libc_init_array+0x40>)
 8003a60:	4c0a      	ldr	r4, [pc, #40]	; (8003a8c <__libc_init_array+0x44>)
 8003a62:	1ba4      	subs	r4, r4, r6
 8003a64:	10a4      	asrs	r4, r4, #2
 8003a66:	42a5      	cmp	r5, r4
 8003a68:	d105      	bne.n	8003a76 <__libc_init_array+0x2e>
 8003a6a:	bd70      	pop	{r4, r5, r6, pc}
 8003a6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a70:	4798      	blx	r3
 8003a72:	3501      	adds	r5, #1
 8003a74:	e7ee      	b.n	8003a54 <__libc_init_array+0xc>
 8003a76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a7a:	4798      	blx	r3
 8003a7c:	3501      	adds	r5, #1
 8003a7e:	e7f2      	b.n	8003a66 <__libc_init_array+0x1e>
 8003a80:	0800487c 	.word	0x0800487c
 8003a84:	0800487c 	.word	0x0800487c
 8003a88:	0800487c 	.word	0x0800487c
 8003a8c:	08004880 	.word	0x08004880

08003a90 <memcpy>:
 8003a90:	b510      	push	{r4, lr}
 8003a92:	1e43      	subs	r3, r0, #1
 8003a94:	440a      	add	r2, r1
 8003a96:	4291      	cmp	r1, r2
 8003a98:	d100      	bne.n	8003a9c <memcpy+0xc>
 8003a9a:	bd10      	pop	{r4, pc}
 8003a9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003aa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003aa4:	e7f7      	b.n	8003a96 <memcpy+0x6>

08003aa6 <memset>:
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	4402      	add	r2, r0
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d100      	bne.n	8003ab0 <memset+0xa>
 8003aae:	4770      	bx	lr
 8003ab0:	f803 1b01 	strb.w	r1, [r3], #1
 8003ab4:	e7f9      	b.n	8003aaa <memset+0x4>
	...

08003ab8 <siprintf>:
 8003ab8:	b40e      	push	{r1, r2, r3}
 8003aba:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003abe:	b500      	push	{lr}
 8003ac0:	b09c      	sub	sp, #112	; 0x70
 8003ac2:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003ac6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003aca:	9104      	str	r1, [sp, #16]
 8003acc:	9107      	str	r1, [sp, #28]
 8003ace:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ad2:	ab1d      	add	r3, sp, #116	; 0x74
 8003ad4:	9002      	str	r0, [sp, #8]
 8003ad6:	9006      	str	r0, [sp, #24]
 8003ad8:	4808      	ldr	r0, [pc, #32]	; (8003afc <siprintf+0x44>)
 8003ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ade:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003ae2:	6800      	ldr	r0, [r0, #0]
 8003ae4:	a902      	add	r1, sp, #8
 8003ae6:	9301      	str	r3, [sp, #4]
 8003ae8:	f000 f922 	bl	8003d30 <_svfiprintf_r>
 8003aec:	2200      	movs	r2, #0
 8003aee:	9b02      	ldr	r3, [sp, #8]
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	b01c      	add	sp, #112	; 0x70
 8003af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003af8:	b003      	add	sp, #12
 8003afa:	4770      	bx	lr
 8003afc:	20000010 	.word	0x20000010

08003b00 <strncmp>:
 8003b00:	b510      	push	{r4, lr}
 8003b02:	b16a      	cbz	r2, 8003b20 <strncmp+0x20>
 8003b04:	3901      	subs	r1, #1
 8003b06:	1884      	adds	r4, r0, r2
 8003b08:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003b0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d103      	bne.n	8003b1c <strncmp+0x1c>
 8003b14:	42a0      	cmp	r0, r4
 8003b16:	d001      	beq.n	8003b1c <strncmp+0x1c>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1f5      	bne.n	8003b08 <strncmp+0x8>
 8003b1c:	1a98      	subs	r0, r3, r2
 8003b1e:	bd10      	pop	{r4, pc}
 8003b20:	4610      	mov	r0, r2
 8003b22:	bd10      	pop	{r4, pc}

08003b24 <_strtol_l.isra.0>:
 8003b24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b28:	4680      	mov	r8, r0
 8003b2a:	4689      	mov	r9, r1
 8003b2c:	4692      	mov	sl, r2
 8003b2e:	461f      	mov	r7, r3
 8003b30:	468b      	mov	fp, r1
 8003b32:	465d      	mov	r5, fp
 8003b34:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003b36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b3a:	f000 f889 	bl	8003c50 <__locale_ctype_ptr_l>
 8003b3e:	4420      	add	r0, r4
 8003b40:	7846      	ldrb	r6, [r0, #1]
 8003b42:	f016 0608 	ands.w	r6, r6, #8
 8003b46:	d10b      	bne.n	8003b60 <_strtol_l.isra.0+0x3c>
 8003b48:	2c2d      	cmp	r4, #45	; 0x2d
 8003b4a:	d10b      	bne.n	8003b64 <_strtol_l.isra.0+0x40>
 8003b4c:	2601      	movs	r6, #1
 8003b4e:	782c      	ldrb	r4, [r5, #0]
 8003b50:	f10b 0502 	add.w	r5, fp, #2
 8003b54:	b167      	cbz	r7, 8003b70 <_strtol_l.isra.0+0x4c>
 8003b56:	2f10      	cmp	r7, #16
 8003b58:	d114      	bne.n	8003b84 <_strtol_l.isra.0+0x60>
 8003b5a:	2c30      	cmp	r4, #48	; 0x30
 8003b5c:	d00a      	beq.n	8003b74 <_strtol_l.isra.0+0x50>
 8003b5e:	e011      	b.n	8003b84 <_strtol_l.isra.0+0x60>
 8003b60:	46ab      	mov	fp, r5
 8003b62:	e7e6      	b.n	8003b32 <_strtol_l.isra.0+0xe>
 8003b64:	2c2b      	cmp	r4, #43	; 0x2b
 8003b66:	bf04      	itt	eq
 8003b68:	782c      	ldrbeq	r4, [r5, #0]
 8003b6a:	f10b 0502 	addeq.w	r5, fp, #2
 8003b6e:	e7f1      	b.n	8003b54 <_strtol_l.isra.0+0x30>
 8003b70:	2c30      	cmp	r4, #48	; 0x30
 8003b72:	d127      	bne.n	8003bc4 <_strtol_l.isra.0+0xa0>
 8003b74:	782b      	ldrb	r3, [r5, #0]
 8003b76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003b7a:	2b58      	cmp	r3, #88	; 0x58
 8003b7c:	d14b      	bne.n	8003c16 <_strtol_l.isra.0+0xf2>
 8003b7e:	2710      	movs	r7, #16
 8003b80:	786c      	ldrb	r4, [r5, #1]
 8003b82:	3502      	adds	r5, #2
 8003b84:	2e00      	cmp	r6, #0
 8003b86:	bf0c      	ite	eq
 8003b88:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003b8c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003b90:	2200      	movs	r2, #0
 8003b92:	fbb1 fef7 	udiv	lr, r1, r7
 8003b96:	4610      	mov	r0, r2
 8003b98:	fb07 1c1e 	mls	ip, r7, lr, r1
 8003b9c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003ba0:	2b09      	cmp	r3, #9
 8003ba2:	d811      	bhi.n	8003bc8 <_strtol_l.isra.0+0xa4>
 8003ba4:	461c      	mov	r4, r3
 8003ba6:	42a7      	cmp	r7, r4
 8003ba8:	dd1d      	ble.n	8003be6 <_strtol_l.isra.0+0xc2>
 8003baa:	1c53      	adds	r3, r2, #1
 8003bac:	d007      	beq.n	8003bbe <_strtol_l.isra.0+0x9a>
 8003bae:	4586      	cmp	lr, r0
 8003bb0:	d316      	bcc.n	8003be0 <_strtol_l.isra.0+0xbc>
 8003bb2:	d101      	bne.n	8003bb8 <_strtol_l.isra.0+0x94>
 8003bb4:	45a4      	cmp	ip, r4
 8003bb6:	db13      	blt.n	8003be0 <_strtol_l.isra.0+0xbc>
 8003bb8:	2201      	movs	r2, #1
 8003bba:	fb00 4007 	mla	r0, r0, r7, r4
 8003bbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003bc2:	e7eb      	b.n	8003b9c <_strtol_l.isra.0+0x78>
 8003bc4:	270a      	movs	r7, #10
 8003bc6:	e7dd      	b.n	8003b84 <_strtol_l.isra.0+0x60>
 8003bc8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003bcc:	2b19      	cmp	r3, #25
 8003bce:	d801      	bhi.n	8003bd4 <_strtol_l.isra.0+0xb0>
 8003bd0:	3c37      	subs	r4, #55	; 0x37
 8003bd2:	e7e8      	b.n	8003ba6 <_strtol_l.isra.0+0x82>
 8003bd4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003bd8:	2b19      	cmp	r3, #25
 8003bda:	d804      	bhi.n	8003be6 <_strtol_l.isra.0+0xc2>
 8003bdc:	3c57      	subs	r4, #87	; 0x57
 8003bde:	e7e2      	b.n	8003ba6 <_strtol_l.isra.0+0x82>
 8003be0:	f04f 32ff 	mov.w	r2, #4294967295
 8003be4:	e7eb      	b.n	8003bbe <_strtol_l.isra.0+0x9a>
 8003be6:	1c53      	adds	r3, r2, #1
 8003be8:	d108      	bne.n	8003bfc <_strtol_l.isra.0+0xd8>
 8003bea:	2322      	movs	r3, #34	; 0x22
 8003bec:	4608      	mov	r0, r1
 8003bee:	f8c8 3000 	str.w	r3, [r8]
 8003bf2:	f1ba 0f00 	cmp.w	sl, #0
 8003bf6:	d107      	bne.n	8003c08 <_strtol_l.isra.0+0xe4>
 8003bf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bfc:	b106      	cbz	r6, 8003c00 <_strtol_l.isra.0+0xdc>
 8003bfe:	4240      	negs	r0, r0
 8003c00:	f1ba 0f00 	cmp.w	sl, #0
 8003c04:	d00c      	beq.n	8003c20 <_strtol_l.isra.0+0xfc>
 8003c06:	b122      	cbz	r2, 8003c12 <_strtol_l.isra.0+0xee>
 8003c08:	3d01      	subs	r5, #1
 8003c0a:	f8ca 5000 	str.w	r5, [sl]
 8003c0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c12:	464d      	mov	r5, r9
 8003c14:	e7f9      	b.n	8003c0a <_strtol_l.isra.0+0xe6>
 8003c16:	2430      	movs	r4, #48	; 0x30
 8003c18:	2f00      	cmp	r7, #0
 8003c1a:	d1b3      	bne.n	8003b84 <_strtol_l.isra.0+0x60>
 8003c1c:	2708      	movs	r7, #8
 8003c1e:	e7b1      	b.n	8003b84 <_strtol_l.isra.0+0x60>
 8003c20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003c24 <strtol>:
 8003c24:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <strtol+0x24>)
 8003c26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c28:	681c      	ldr	r4, [r3, #0]
 8003c2a:	4d08      	ldr	r5, [pc, #32]	; (8003c4c <strtol+0x28>)
 8003c2c:	6a23      	ldr	r3, [r4, #32]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	bf08      	it	eq
 8003c32:	462b      	moveq	r3, r5
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	4613      	mov	r3, r2
 8003c38:	460a      	mov	r2, r1
 8003c3a:	4601      	mov	r1, r0
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7ff ff71 	bl	8003b24 <_strtol_l.isra.0>
 8003c42:	b003      	add	sp, #12
 8003c44:	bd30      	pop	{r4, r5, pc}
 8003c46:	bf00      	nop
 8003c48:	20000010 	.word	0x20000010
 8003c4c:	20000074 	.word	0x20000074

08003c50 <__locale_ctype_ptr_l>:
 8003c50:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003c54:	4770      	bx	lr

08003c56 <__ascii_mbtowc>:
 8003c56:	b082      	sub	sp, #8
 8003c58:	b901      	cbnz	r1, 8003c5c <__ascii_mbtowc+0x6>
 8003c5a:	a901      	add	r1, sp, #4
 8003c5c:	b142      	cbz	r2, 8003c70 <__ascii_mbtowc+0x1a>
 8003c5e:	b14b      	cbz	r3, 8003c74 <__ascii_mbtowc+0x1e>
 8003c60:	7813      	ldrb	r3, [r2, #0]
 8003c62:	600b      	str	r3, [r1, #0]
 8003c64:	7812      	ldrb	r2, [r2, #0]
 8003c66:	1c10      	adds	r0, r2, #0
 8003c68:	bf18      	it	ne
 8003c6a:	2001      	movne	r0, #1
 8003c6c:	b002      	add	sp, #8
 8003c6e:	4770      	bx	lr
 8003c70:	4610      	mov	r0, r2
 8003c72:	e7fb      	b.n	8003c6c <__ascii_mbtowc+0x16>
 8003c74:	f06f 0001 	mvn.w	r0, #1
 8003c78:	e7f8      	b.n	8003c6c <__ascii_mbtowc+0x16>

08003c7a <__ssputs_r>:
 8003c7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c7e:	688e      	ldr	r6, [r1, #8]
 8003c80:	4682      	mov	sl, r0
 8003c82:	429e      	cmp	r6, r3
 8003c84:	460c      	mov	r4, r1
 8003c86:	4691      	mov	r9, r2
 8003c88:	4698      	mov	r8, r3
 8003c8a:	d835      	bhi.n	8003cf8 <__ssputs_r+0x7e>
 8003c8c:	898a      	ldrh	r2, [r1, #12]
 8003c8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c92:	d031      	beq.n	8003cf8 <__ssputs_r+0x7e>
 8003c94:	2302      	movs	r3, #2
 8003c96:	6825      	ldr	r5, [r4, #0]
 8003c98:	6909      	ldr	r1, [r1, #16]
 8003c9a:	1a6f      	subs	r7, r5, r1
 8003c9c:	6965      	ldr	r5, [r4, #20]
 8003c9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ca2:	fb95 f5f3 	sdiv	r5, r5, r3
 8003ca6:	f108 0301 	add.w	r3, r8, #1
 8003caa:	443b      	add	r3, r7
 8003cac:	429d      	cmp	r5, r3
 8003cae:	bf38      	it	cc
 8003cb0:	461d      	movcc	r5, r3
 8003cb2:	0553      	lsls	r3, r2, #21
 8003cb4:	d531      	bpl.n	8003d1a <__ssputs_r+0xa0>
 8003cb6:	4629      	mov	r1, r5
 8003cb8:	f000 fb48 	bl	800434c <_malloc_r>
 8003cbc:	4606      	mov	r6, r0
 8003cbe:	b950      	cbnz	r0, 8003cd6 <__ssputs_r+0x5c>
 8003cc0:	230c      	movs	r3, #12
 8003cc2:	f8ca 3000 	str.w	r3, [sl]
 8003cc6:	89a3      	ldrh	r3, [r4, #12]
 8003cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cd0:	81a3      	strh	r3, [r4, #12]
 8003cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cd6:	463a      	mov	r2, r7
 8003cd8:	6921      	ldr	r1, [r4, #16]
 8003cda:	f7ff fed9 	bl	8003a90 <memcpy>
 8003cde:	89a3      	ldrh	r3, [r4, #12]
 8003ce0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce8:	81a3      	strh	r3, [r4, #12]
 8003cea:	6126      	str	r6, [r4, #16]
 8003cec:	443e      	add	r6, r7
 8003cee:	6026      	str	r6, [r4, #0]
 8003cf0:	4646      	mov	r6, r8
 8003cf2:	6165      	str	r5, [r4, #20]
 8003cf4:	1bed      	subs	r5, r5, r7
 8003cf6:	60a5      	str	r5, [r4, #8]
 8003cf8:	4546      	cmp	r6, r8
 8003cfa:	bf28      	it	cs
 8003cfc:	4646      	movcs	r6, r8
 8003cfe:	4649      	mov	r1, r9
 8003d00:	4632      	mov	r2, r6
 8003d02:	6820      	ldr	r0, [r4, #0]
 8003d04:	f000 fabb 	bl	800427e <memmove>
 8003d08:	68a3      	ldr	r3, [r4, #8]
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	1b9b      	subs	r3, r3, r6
 8003d0e:	60a3      	str	r3, [r4, #8]
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	441e      	add	r6, r3
 8003d14:	6026      	str	r6, [r4, #0]
 8003d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d1a:	462a      	mov	r2, r5
 8003d1c:	f000 fb74 	bl	8004408 <_realloc_r>
 8003d20:	4606      	mov	r6, r0
 8003d22:	2800      	cmp	r0, #0
 8003d24:	d1e1      	bne.n	8003cea <__ssputs_r+0x70>
 8003d26:	6921      	ldr	r1, [r4, #16]
 8003d28:	4650      	mov	r0, sl
 8003d2a:	f000 fac3 	bl	80042b4 <_free_r>
 8003d2e:	e7c7      	b.n	8003cc0 <__ssputs_r+0x46>

08003d30 <_svfiprintf_r>:
 8003d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d34:	b09d      	sub	sp, #116	; 0x74
 8003d36:	9303      	str	r3, [sp, #12]
 8003d38:	898b      	ldrh	r3, [r1, #12]
 8003d3a:	4680      	mov	r8, r0
 8003d3c:	061c      	lsls	r4, r3, #24
 8003d3e:	460d      	mov	r5, r1
 8003d40:	4616      	mov	r6, r2
 8003d42:	d50f      	bpl.n	8003d64 <_svfiprintf_r+0x34>
 8003d44:	690b      	ldr	r3, [r1, #16]
 8003d46:	b96b      	cbnz	r3, 8003d64 <_svfiprintf_r+0x34>
 8003d48:	2140      	movs	r1, #64	; 0x40
 8003d4a:	f000 faff 	bl	800434c <_malloc_r>
 8003d4e:	6028      	str	r0, [r5, #0]
 8003d50:	6128      	str	r0, [r5, #16]
 8003d52:	b928      	cbnz	r0, 8003d60 <_svfiprintf_r+0x30>
 8003d54:	230c      	movs	r3, #12
 8003d56:	f8c8 3000 	str.w	r3, [r8]
 8003d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5e:	e0c4      	b.n	8003eea <_svfiprintf_r+0x1ba>
 8003d60:	2340      	movs	r3, #64	; 0x40
 8003d62:	616b      	str	r3, [r5, #20]
 8003d64:	2300      	movs	r3, #0
 8003d66:	9309      	str	r3, [sp, #36]	; 0x24
 8003d68:	2320      	movs	r3, #32
 8003d6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d6e:	2330      	movs	r3, #48	; 0x30
 8003d70:	f04f 0b01 	mov.w	fp, #1
 8003d74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d78:	4637      	mov	r7, r6
 8003d7a:	463c      	mov	r4, r7
 8003d7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d13c      	bne.n	8003dfe <_svfiprintf_r+0xce>
 8003d84:	ebb7 0a06 	subs.w	sl, r7, r6
 8003d88:	d00b      	beq.n	8003da2 <_svfiprintf_r+0x72>
 8003d8a:	4653      	mov	r3, sl
 8003d8c:	4632      	mov	r2, r6
 8003d8e:	4629      	mov	r1, r5
 8003d90:	4640      	mov	r0, r8
 8003d92:	f7ff ff72 	bl	8003c7a <__ssputs_r>
 8003d96:	3001      	adds	r0, #1
 8003d98:	f000 80a2 	beq.w	8003ee0 <_svfiprintf_r+0x1b0>
 8003d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d9e:	4453      	add	r3, sl
 8003da0:	9309      	str	r3, [sp, #36]	; 0x24
 8003da2:	783b      	ldrb	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 809b 	beq.w	8003ee0 <_svfiprintf_r+0x1b0>
 8003daa:	2300      	movs	r3, #0
 8003dac:	f04f 32ff 	mov.w	r2, #4294967295
 8003db0:	9304      	str	r3, [sp, #16]
 8003db2:	9307      	str	r3, [sp, #28]
 8003db4:	9205      	str	r2, [sp, #20]
 8003db6:	9306      	str	r3, [sp, #24]
 8003db8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dbc:	931a      	str	r3, [sp, #104]	; 0x68
 8003dbe:	2205      	movs	r2, #5
 8003dc0:	7821      	ldrb	r1, [r4, #0]
 8003dc2:	4850      	ldr	r0, [pc, #320]	; (8003f04 <_svfiprintf_r+0x1d4>)
 8003dc4:	f000 fa4d 	bl	8004262 <memchr>
 8003dc8:	1c67      	adds	r7, r4, #1
 8003dca:	9b04      	ldr	r3, [sp, #16]
 8003dcc:	b9d8      	cbnz	r0, 8003e06 <_svfiprintf_r+0xd6>
 8003dce:	06d9      	lsls	r1, r3, #27
 8003dd0:	bf44      	itt	mi
 8003dd2:	2220      	movmi	r2, #32
 8003dd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003dd8:	071a      	lsls	r2, r3, #28
 8003dda:	bf44      	itt	mi
 8003ddc:	222b      	movmi	r2, #43	; 0x2b
 8003dde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003de2:	7822      	ldrb	r2, [r4, #0]
 8003de4:	2a2a      	cmp	r2, #42	; 0x2a
 8003de6:	d016      	beq.n	8003e16 <_svfiprintf_r+0xe6>
 8003de8:	2100      	movs	r1, #0
 8003dea:	200a      	movs	r0, #10
 8003dec:	9a07      	ldr	r2, [sp, #28]
 8003dee:	4627      	mov	r7, r4
 8003df0:	783b      	ldrb	r3, [r7, #0]
 8003df2:	3401      	adds	r4, #1
 8003df4:	3b30      	subs	r3, #48	; 0x30
 8003df6:	2b09      	cmp	r3, #9
 8003df8:	d950      	bls.n	8003e9c <_svfiprintf_r+0x16c>
 8003dfa:	b1c9      	cbz	r1, 8003e30 <_svfiprintf_r+0x100>
 8003dfc:	e011      	b.n	8003e22 <_svfiprintf_r+0xf2>
 8003dfe:	2b25      	cmp	r3, #37	; 0x25
 8003e00:	d0c0      	beq.n	8003d84 <_svfiprintf_r+0x54>
 8003e02:	4627      	mov	r7, r4
 8003e04:	e7b9      	b.n	8003d7a <_svfiprintf_r+0x4a>
 8003e06:	4a3f      	ldr	r2, [pc, #252]	; (8003f04 <_svfiprintf_r+0x1d4>)
 8003e08:	463c      	mov	r4, r7
 8003e0a:	1a80      	subs	r0, r0, r2
 8003e0c:	fa0b f000 	lsl.w	r0, fp, r0
 8003e10:	4318      	orrs	r0, r3
 8003e12:	9004      	str	r0, [sp, #16]
 8003e14:	e7d3      	b.n	8003dbe <_svfiprintf_r+0x8e>
 8003e16:	9a03      	ldr	r2, [sp, #12]
 8003e18:	1d11      	adds	r1, r2, #4
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	9103      	str	r1, [sp, #12]
 8003e1e:	2a00      	cmp	r2, #0
 8003e20:	db01      	blt.n	8003e26 <_svfiprintf_r+0xf6>
 8003e22:	9207      	str	r2, [sp, #28]
 8003e24:	e004      	b.n	8003e30 <_svfiprintf_r+0x100>
 8003e26:	4252      	negs	r2, r2
 8003e28:	f043 0302 	orr.w	r3, r3, #2
 8003e2c:	9207      	str	r2, [sp, #28]
 8003e2e:	9304      	str	r3, [sp, #16]
 8003e30:	783b      	ldrb	r3, [r7, #0]
 8003e32:	2b2e      	cmp	r3, #46	; 0x2e
 8003e34:	d10d      	bne.n	8003e52 <_svfiprintf_r+0x122>
 8003e36:	787b      	ldrb	r3, [r7, #1]
 8003e38:	1c79      	adds	r1, r7, #1
 8003e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e3c:	d132      	bne.n	8003ea4 <_svfiprintf_r+0x174>
 8003e3e:	9b03      	ldr	r3, [sp, #12]
 8003e40:	3702      	adds	r7, #2
 8003e42:	1d1a      	adds	r2, r3, #4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	9203      	str	r2, [sp, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bfb8      	it	lt
 8003e4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e50:	9305      	str	r3, [sp, #20]
 8003e52:	4c2d      	ldr	r4, [pc, #180]	; (8003f08 <_svfiprintf_r+0x1d8>)
 8003e54:	2203      	movs	r2, #3
 8003e56:	7839      	ldrb	r1, [r7, #0]
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f000 fa02 	bl	8004262 <memchr>
 8003e5e:	b138      	cbz	r0, 8003e70 <_svfiprintf_r+0x140>
 8003e60:	2340      	movs	r3, #64	; 0x40
 8003e62:	1b00      	subs	r0, r0, r4
 8003e64:	fa03 f000 	lsl.w	r0, r3, r0
 8003e68:	9b04      	ldr	r3, [sp, #16]
 8003e6a:	3701      	adds	r7, #1
 8003e6c:	4303      	orrs	r3, r0
 8003e6e:	9304      	str	r3, [sp, #16]
 8003e70:	7839      	ldrb	r1, [r7, #0]
 8003e72:	2206      	movs	r2, #6
 8003e74:	4825      	ldr	r0, [pc, #148]	; (8003f0c <_svfiprintf_r+0x1dc>)
 8003e76:	1c7e      	adds	r6, r7, #1
 8003e78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e7c:	f000 f9f1 	bl	8004262 <memchr>
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d035      	beq.n	8003ef0 <_svfiprintf_r+0x1c0>
 8003e84:	4b22      	ldr	r3, [pc, #136]	; (8003f10 <_svfiprintf_r+0x1e0>)
 8003e86:	b9fb      	cbnz	r3, 8003ec8 <_svfiprintf_r+0x198>
 8003e88:	9b03      	ldr	r3, [sp, #12]
 8003e8a:	3307      	adds	r3, #7
 8003e8c:	f023 0307 	bic.w	r3, r3, #7
 8003e90:	3308      	adds	r3, #8
 8003e92:	9303      	str	r3, [sp, #12]
 8003e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e96:	444b      	add	r3, r9
 8003e98:	9309      	str	r3, [sp, #36]	; 0x24
 8003e9a:	e76d      	b.n	8003d78 <_svfiprintf_r+0x48>
 8003e9c:	fb00 3202 	mla	r2, r0, r2, r3
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	e7a4      	b.n	8003dee <_svfiprintf_r+0xbe>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	240a      	movs	r4, #10
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	9305      	str	r3, [sp, #20]
 8003eac:	460f      	mov	r7, r1
 8003eae:	783a      	ldrb	r2, [r7, #0]
 8003eb0:	3101      	adds	r1, #1
 8003eb2:	3a30      	subs	r2, #48	; 0x30
 8003eb4:	2a09      	cmp	r2, #9
 8003eb6:	d903      	bls.n	8003ec0 <_svfiprintf_r+0x190>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0ca      	beq.n	8003e52 <_svfiprintf_r+0x122>
 8003ebc:	9005      	str	r0, [sp, #20]
 8003ebe:	e7c8      	b.n	8003e52 <_svfiprintf_r+0x122>
 8003ec0:	fb04 2000 	mla	r0, r4, r0, r2
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e7f1      	b.n	8003eac <_svfiprintf_r+0x17c>
 8003ec8:	ab03      	add	r3, sp, #12
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	462a      	mov	r2, r5
 8003ece:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <_svfiprintf_r+0x1e4>)
 8003ed0:	a904      	add	r1, sp, #16
 8003ed2:	4640      	mov	r0, r8
 8003ed4:	f3af 8000 	nop.w
 8003ed8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003edc:	4681      	mov	r9, r0
 8003ede:	d1d9      	bne.n	8003e94 <_svfiprintf_r+0x164>
 8003ee0:	89ab      	ldrh	r3, [r5, #12]
 8003ee2:	065b      	lsls	r3, r3, #25
 8003ee4:	f53f af39 	bmi.w	8003d5a <_svfiprintf_r+0x2a>
 8003ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003eea:	b01d      	add	sp, #116	; 0x74
 8003eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef0:	ab03      	add	r3, sp, #12
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	462a      	mov	r2, r5
 8003ef6:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <_svfiprintf_r+0x1e4>)
 8003ef8:	a904      	add	r1, sp, #16
 8003efa:	4640      	mov	r0, r8
 8003efc:	f000 f884 	bl	8004008 <_printf_i>
 8003f00:	e7ea      	b.n	8003ed8 <_svfiprintf_r+0x1a8>
 8003f02:	bf00      	nop
 8003f04:	08004741 	.word	0x08004741
 8003f08:	08004747 	.word	0x08004747
 8003f0c:	0800474b 	.word	0x0800474b
 8003f10:	00000000 	.word	0x00000000
 8003f14:	08003c7b 	.word	0x08003c7b

08003f18 <_printf_common>:
 8003f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f1c:	4691      	mov	r9, r2
 8003f1e:	461f      	mov	r7, r3
 8003f20:	688a      	ldr	r2, [r1, #8]
 8003f22:	690b      	ldr	r3, [r1, #16]
 8003f24:	4606      	mov	r6, r0
 8003f26:	4293      	cmp	r3, r2
 8003f28:	bfb8      	it	lt
 8003f2a:	4613      	movlt	r3, r2
 8003f2c:	f8c9 3000 	str.w	r3, [r9]
 8003f30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f34:	460c      	mov	r4, r1
 8003f36:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f3a:	b112      	cbz	r2, 8003f42 <_printf_common+0x2a>
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	f8c9 3000 	str.w	r3, [r9]
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	0699      	lsls	r1, r3, #26
 8003f46:	bf42      	ittt	mi
 8003f48:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f4c:	3302      	addmi	r3, #2
 8003f4e:	f8c9 3000 	strmi.w	r3, [r9]
 8003f52:	6825      	ldr	r5, [r4, #0]
 8003f54:	f015 0506 	ands.w	r5, r5, #6
 8003f58:	d107      	bne.n	8003f6a <_printf_common+0x52>
 8003f5a:	f104 0a19 	add.w	sl, r4, #25
 8003f5e:	68e3      	ldr	r3, [r4, #12]
 8003f60:	f8d9 2000 	ldr.w	r2, [r9]
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	429d      	cmp	r5, r3
 8003f68:	db2a      	blt.n	8003fc0 <_printf_common+0xa8>
 8003f6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f6e:	6822      	ldr	r2, [r4, #0]
 8003f70:	3300      	adds	r3, #0
 8003f72:	bf18      	it	ne
 8003f74:	2301      	movne	r3, #1
 8003f76:	0692      	lsls	r2, r2, #26
 8003f78:	d42f      	bmi.n	8003fda <_printf_common+0xc2>
 8003f7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f7e:	4639      	mov	r1, r7
 8003f80:	4630      	mov	r0, r6
 8003f82:	47c0      	blx	r8
 8003f84:	3001      	adds	r0, #1
 8003f86:	d022      	beq.n	8003fce <_printf_common+0xb6>
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	68e5      	ldr	r5, [r4, #12]
 8003f8c:	f003 0306 	and.w	r3, r3, #6
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	bf18      	it	ne
 8003f94:	2500      	movne	r5, #0
 8003f96:	f8d9 2000 	ldr.w	r2, [r9]
 8003f9a:	f04f 0900 	mov.w	r9, #0
 8003f9e:	bf08      	it	eq
 8003fa0:	1aad      	subeq	r5, r5, r2
 8003fa2:	68a3      	ldr	r3, [r4, #8]
 8003fa4:	6922      	ldr	r2, [r4, #16]
 8003fa6:	bf08      	it	eq
 8003fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fac:	4293      	cmp	r3, r2
 8003fae:	bfc4      	itt	gt
 8003fb0:	1a9b      	subgt	r3, r3, r2
 8003fb2:	18ed      	addgt	r5, r5, r3
 8003fb4:	341a      	adds	r4, #26
 8003fb6:	454d      	cmp	r5, r9
 8003fb8:	d11b      	bne.n	8003ff2 <_printf_common+0xda>
 8003fba:	2000      	movs	r0, #0
 8003fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	4652      	mov	r2, sl
 8003fc4:	4639      	mov	r1, r7
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	47c0      	blx	r8
 8003fca:	3001      	adds	r0, #1
 8003fcc:	d103      	bne.n	8003fd6 <_printf_common+0xbe>
 8003fce:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd6:	3501      	adds	r5, #1
 8003fd8:	e7c1      	b.n	8003f5e <_printf_common+0x46>
 8003fda:	2030      	movs	r0, #48	; 0x30
 8003fdc:	18e1      	adds	r1, r4, r3
 8003fde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fe8:	4422      	add	r2, r4
 8003fea:	3302      	adds	r3, #2
 8003fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ff0:	e7c3      	b.n	8003f7a <_printf_common+0x62>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	4622      	mov	r2, r4
 8003ff6:	4639      	mov	r1, r7
 8003ff8:	4630      	mov	r0, r6
 8003ffa:	47c0      	blx	r8
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	d0e6      	beq.n	8003fce <_printf_common+0xb6>
 8004000:	f109 0901 	add.w	r9, r9, #1
 8004004:	e7d7      	b.n	8003fb6 <_printf_common+0x9e>
	...

08004008 <_printf_i>:
 8004008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800400c:	4617      	mov	r7, r2
 800400e:	7e0a      	ldrb	r2, [r1, #24]
 8004010:	b085      	sub	sp, #20
 8004012:	2a6e      	cmp	r2, #110	; 0x6e
 8004014:	4698      	mov	r8, r3
 8004016:	4606      	mov	r6, r0
 8004018:	460c      	mov	r4, r1
 800401a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800401c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004020:	f000 80bc 	beq.w	800419c <_printf_i+0x194>
 8004024:	d81a      	bhi.n	800405c <_printf_i+0x54>
 8004026:	2a63      	cmp	r2, #99	; 0x63
 8004028:	d02e      	beq.n	8004088 <_printf_i+0x80>
 800402a:	d80a      	bhi.n	8004042 <_printf_i+0x3a>
 800402c:	2a00      	cmp	r2, #0
 800402e:	f000 80c8 	beq.w	80041c2 <_printf_i+0x1ba>
 8004032:	2a58      	cmp	r2, #88	; 0x58
 8004034:	f000 808a 	beq.w	800414c <_printf_i+0x144>
 8004038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800403c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004040:	e02a      	b.n	8004098 <_printf_i+0x90>
 8004042:	2a64      	cmp	r2, #100	; 0x64
 8004044:	d001      	beq.n	800404a <_printf_i+0x42>
 8004046:	2a69      	cmp	r2, #105	; 0x69
 8004048:	d1f6      	bne.n	8004038 <_printf_i+0x30>
 800404a:	6821      	ldr	r1, [r4, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004052:	d023      	beq.n	800409c <_printf_i+0x94>
 8004054:	1d11      	adds	r1, r2, #4
 8004056:	6019      	str	r1, [r3, #0]
 8004058:	6813      	ldr	r3, [r2, #0]
 800405a:	e027      	b.n	80040ac <_printf_i+0xa4>
 800405c:	2a73      	cmp	r2, #115	; 0x73
 800405e:	f000 80b4 	beq.w	80041ca <_printf_i+0x1c2>
 8004062:	d808      	bhi.n	8004076 <_printf_i+0x6e>
 8004064:	2a6f      	cmp	r2, #111	; 0x6f
 8004066:	d02a      	beq.n	80040be <_printf_i+0xb6>
 8004068:	2a70      	cmp	r2, #112	; 0x70
 800406a:	d1e5      	bne.n	8004038 <_printf_i+0x30>
 800406c:	680a      	ldr	r2, [r1, #0]
 800406e:	f042 0220 	orr.w	r2, r2, #32
 8004072:	600a      	str	r2, [r1, #0]
 8004074:	e003      	b.n	800407e <_printf_i+0x76>
 8004076:	2a75      	cmp	r2, #117	; 0x75
 8004078:	d021      	beq.n	80040be <_printf_i+0xb6>
 800407a:	2a78      	cmp	r2, #120	; 0x78
 800407c:	d1dc      	bne.n	8004038 <_printf_i+0x30>
 800407e:	2278      	movs	r2, #120	; 0x78
 8004080:	496f      	ldr	r1, [pc, #444]	; (8004240 <_printf_i+0x238>)
 8004082:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004086:	e064      	b.n	8004152 <_printf_i+0x14a>
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800408e:	1d11      	adds	r1, r2, #4
 8004090:	6019      	str	r1, [r3, #0]
 8004092:	6813      	ldr	r3, [r2, #0]
 8004094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004098:	2301      	movs	r3, #1
 800409a:	e0a3      	b.n	80041e4 <_printf_i+0x1dc>
 800409c:	f011 0f40 	tst.w	r1, #64	; 0x40
 80040a0:	f102 0104 	add.w	r1, r2, #4
 80040a4:	6019      	str	r1, [r3, #0]
 80040a6:	d0d7      	beq.n	8004058 <_printf_i+0x50>
 80040a8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	da03      	bge.n	80040b8 <_printf_i+0xb0>
 80040b0:	222d      	movs	r2, #45	; 0x2d
 80040b2:	425b      	negs	r3, r3
 80040b4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80040b8:	4962      	ldr	r1, [pc, #392]	; (8004244 <_printf_i+0x23c>)
 80040ba:	220a      	movs	r2, #10
 80040bc:	e017      	b.n	80040ee <_printf_i+0xe6>
 80040be:	6820      	ldr	r0, [r4, #0]
 80040c0:	6819      	ldr	r1, [r3, #0]
 80040c2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80040c6:	d003      	beq.n	80040d0 <_printf_i+0xc8>
 80040c8:	1d08      	adds	r0, r1, #4
 80040ca:	6018      	str	r0, [r3, #0]
 80040cc:	680b      	ldr	r3, [r1, #0]
 80040ce:	e006      	b.n	80040de <_printf_i+0xd6>
 80040d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040d4:	f101 0004 	add.w	r0, r1, #4
 80040d8:	6018      	str	r0, [r3, #0]
 80040da:	d0f7      	beq.n	80040cc <_printf_i+0xc4>
 80040dc:	880b      	ldrh	r3, [r1, #0]
 80040de:	2a6f      	cmp	r2, #111	; 0x6f
 80040e0:	bf14      	ite	ne
 80040e2:	220a      	movne	r2, #10
 80040e4:	2208      	moveq	r2, #8
 80040e6:	4957      	ldr	r1, [pc, #348]	; (8004244 <_printf_i+0x23c>)
 80040e8:	2000      	movs	r0, #0
 80040ea:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80040ee:	6865      	ldr	r5, [r4, #4]
 80040f0:	2d00      	cmp	r5, #0
 80040f2:	60a5      	str	r5, [r4, #8]
 80040f4:	f2c0 809c 	blt.w	8004230 <_printf_i+0x228>
 80040f8:	6820      	ldr	r0, [r4, #0]
 80040fa:	f020 0004 	bic.w	r0, r0, #4
 80040fe:	6020      	str	r0, [r4, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d13f      	bne.n	8004184 <_printf_i+0x17c>
 8004104:	2d00      	cmp	r5, #0
 8004106:	f040 8095 	bne.w	8004234 <_printf_i+0x22c>
 800410a:	4675      	mov	r5, lr
 800410c:	2a08      	cmp	r2, #8
 800410e:	d10b      	bne.n	8004128 <_printf_i+0x120>
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	07da      	lsls	r2, r3, #31
 8004114:	d508      	bpl.n	8004128 <_printf_i+0x120>
 8004116:	6923      	ldr	r3, [r4, #16]
 8004118:	6862      	ldr	r2, [r4, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	bfde      	ittt	le
 800411e:	2330      	movle	r3, #48	; 0x30
 8004120:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004124:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004128:	ebae 0305 	sub.w	r3, lr, r5
 800412c:	6123      	str	r3, [r4, #16]
 800412e:	f8cd 8000 	str.w	r8, [sp]
 8004132:	463b      	mov	r3, r7
 8004134:	aa03      	add	r2, sp, #12
 8004136:	4621      	mov	r1, r4
 8004138:	4630      	mov	r0, r6
 800413a:	f7ff feed 	bl	8003f18 <_printf_common>
 800413e:	3001      	adds	r0, #1
 8004140:	d155      	bne.n	80041ee <_printf_i+0x1e6>
 8004142:	f04f 30ff 	mov.w	r0, #4294967295
 8004146:	b005      	add	sp, #20
 8004148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800414c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004150:	493c      	ldr	r1, [pc, #240]	; (8004244 <_printf_i+0x23c>)
 8004152:	6822      	ldr	r2, [r4, #0]
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	f012 0f80 	tst.w	r2, #128	; 0x80
 800415a:	f100 0504 	add.w	r5, r0, #4
 800415e:	601d      	str	r5, [r3, #0]
 8004160:	d001      	beq.n	8004166 <_printf_i+0x15e>
 8004162:	6803      	ldr	r3, [r0, #0]
 8004164:	e002      	b.n	800416c <_printf_i+0x164>
 8004166:	0655      	lsls	r5, r2, #25
 8004168:	d5fb      	bpl.n	8004162 <_printf_i+0x15a>
 800416a:	8803      	ldrh	r3, [r0, #0]
 800416c:	07d0      	lsls	r0, r2, #31
 800416e:	bf44      	itt	mi
 8004170:	f042 0220 	orrmi.w	r2, r2, #32
 8004174:	6022      	strmi	r2, [r4, #0]
 8004176:	b91b      	cbnz	r3, 8004180 <_printf_i+0x178>
 8004178:	6822      	ldr	r2, [r4, #0]
 800417a:	f022 0220 	bic.w	r2, r2, #32
 800417e:	6022      	str	r2, [r4, #0]
 8004180:	2210      	movs	r2, #16
 8004182:	e7b1      	b.n	80040e8 <_printf_i+0xe0>
 8004184:	4675      	mov	r5, lr
 8004186:	fbb3 f0f2 	udiv	r0, r3, r2
 800418a:	fb02 3310 	mls	r3, r2, r0, r3
 800418e:	5ccb      	ldrb	r3, [r1, r3]
 8004190:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004194:	4603      	mov	r3, r0
 8004196:	2800      	cmp	r0, #0
 8004198:	d1f5      	bne.n	8004186 <_printf_i+0x17e>
 800419a:	e7b7      	b.n	800410c <_printf_i+0x104>
 800419c:	6808      	ldr	r0, [r1, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80041a4:	6949      	ldr	r1, [r1, #20]
 80041a6:	d004      	beq.n	80041b2 <_printf_i+0x1aa>
 80041a8:	1d10      	adds	r0, r2, #4
 80041aa:	6018      	str	r0, [r3, #0]
 80041ac:	6813      	ldr	r3, [r2, #0]
 80041ae:	6019      	str	r1, [r3, #0]
 80041b0:	e007      	b.n	80041c2 <_printf_i+0x1ba>
 80041b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041b6:	f102 0004 	add.w	r0, r2, #4
 80041ba:	6018      	str	r0, [r3, #0]
 80041bc:	6813      	ldr	r3, [r2, #0]
 80041be:	d0f6      	beq.n	80041ae <_printf_i+0x1a6>
 80041c0:	8019      	strh	r1, [r3, #0]
 80041c2:	2300      	movs	r3, #0
 80041c4:	4675      	mov	r5, lr
 80041c6:	6123      	str	r3, [r4, #16]
 80041c8:	e7b1      	b.n	800412e <_printf_i+0x126>
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	1d11      	adds	r1, r2, #4
 80041ce:	6019      	str	r1, [r3, #0]
 80041d0:	6815      	ldr	r5, [r2, #0]
 80041d2:	2100      	movs	r1, #0
 80041d4:	6862      	ldr	r2, [r4, #4]
 80041d6:	4628      	mov	r0, r5
 80041d8:	f000 f843 	bl	8004262 <memchr>
 80041dc:	b108      	cbz	r0, 80041e2 <_printf_i+0x1da>
 80041de:	1b40      	subs	r0, r0, r5
 80041e0:	6060      	str	r0, [r4, #4]
 80041e2:	6863      	ldr	r3, [r4, #4]
 80041e4:	6123      	str	r3, [r4, #16]
 80041e6:	2300      	movs	r3, #0
 80041e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ec:	e79f      	b.n	800412e <_printf_i+0x126>
 80041ee:	6923      	ldr	r3, [r4, #16]
 80041f0:	462a      	mov	r2, r5
 80041f2:	4639      	mov	r1, r7
 80041f4:	4630      	mov	r0, r6
 80041f6:	47c0      	blx	r8
 80041f8:	3001      	adds	r0, #1
 80041fa:	d0a2      	beq.n	8004142 <_printf_i+0x13a>
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	079b      	lsls	r3, r3, #30
 8004200:	d507      	bpl.n	8004212 <_printf_i+0x20a>
 8004202:	2500      	movs	r5, #0
 8004204:	f104 0919 	add.w	r9, r4, #25
 8004208:	68e3      	ldr	r3, [r4, #12]
 800420a:	9a03      	ldr	r2, [sp, #12]
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	429d      	cmp	r5, r3
 8004210:	db05      	blt.n	800421e <_printf_i+0x216>
 8004212:	68e0      	ldr	r0, [r4, #12]
 8004214:	9b03      	ldr	r3, [sp, #12]
 8004216:	4298      	cmp	r0, r3
 8004218:	bfb8      	it	lt
 800421a:	4618      	movlt	r0, r3
 800421c:	e793      	b.n	8004146 <_printf_i+0x13e>
 800421e:	2301      	movs	r3, #1
 8004220:	464a      	mov	r2, r9
 8004222:	4639      	mov	r1, r7
 8004224:	4630      	mov	r0, r6
 8004226:	47c0      	blx	r8
 8004228:	3001      	adds	r0, #1
 800422a:	d08a      	beq.n	8004142 <_printf_i+0x13a>
 800422c:	3501      	adds	r5, #1
 800422e:	e7eb      	b.n	8004208 <_printf_i+0x200>
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1a7      	bne.n	8004184 <_printf_i+0x17c>
 8004234:	780b      	ldrb	r3, [r1, #0]
 8004236:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800423a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800423e:	e765      	b.n	800410c <_printf_i+0x104>
 8004240:	08004763 	.word	0x08004763
 8004244:	08004752 	.word	0x08004752

08004248 <__ascii_wctomb>:
 8004248:	b149      	cbz	r1, 800425e <__ascii_wctomb+0x16>
 800424a:	2aff      	cmp	r2, #255	; 0xff
 800424c:	bf8b      	itete	hi
 800424e:	238a      	movhi	r3, #138	; 0x8a
 8004250:	700a      	strbls	r2, [r1, #0]
 8004252:	6003      	strhi	r3, [r0, #0]
 8004254:	2001      	movls	r0, #1
 8004256:	bf88      	it	hi
 8004258:	f04f 30ff 	movhi.w	r0, #4294967295
 800425c:	4770      	bx	lr
 800425e:	4608      	mov	r0, r1
 8004260:	4770      	bx	lr

08004262 <memchr>:
 8004262:	b510      	push	{r4, lr}
 8004264:	b2c9      	uxtb	r1, r1
 8004266:	4402      	add	r2, r0
 8004268:	4290      	cmp	r0, r2
 800426a:	4603      	mov	r3, r0
 800426c:	d101      	bne.n	8004272 <memchr+0x10>
 800426e:	2000      	movs	r0, #0
 8004270:	bd10      	pop	{r4, pc}
 8004272:	781c      	ldrb	r4, [r3, #0]
 8004274:	3001      	adds	r0, #1
 8004276:	428c      	cmp	r4, r1
 8004278:	d1f6      	bne.n	8004268 <memchr+0x6>
 800427a:	4618      	mov	r0, r3
 800427c:	bd10      	pop	{r4, pc}

0800427e <memmove>:
 800427e:	4288      	cmp	r0, r1
 8004280:	b510      	push	{r4, lr}
 8004282:	eb01 0302 	add.w	r3, r1, r2
 8004286:	d803      	bhi.n	8004290 <memmove+0x12>
 8004288:	1e42      	subs	r2, r0, #1
 800428a:	4299      	cmp	r1, r3
 800428c:	d10c      	bne.n	80042a8 <memmove+0x2a>
 800428e:	bd10      	pop	{r4, pc}
 8004290:	4298      	cmp	r0, r3
 8004292:	d2f9      	bcs.n	8004288 <memmove+0xa>
 8004294:	1881      	adds	r1, r0, r2
 8004296:	1ad2      	subs	r2, r2, r3
 8004298:	42d3      	cmn	r3, r2
 800429a:	d100      	bne.n	800429e <memmove+0x20>
 800429c:	bd10      	pop	{r4, pc}
 800429e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042a2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80042a6:	e7f7      	b.n	8004298 <memmove+0x1a>
 80042a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042ac:	f802 4f01 	strb.w	r4, [r2, #1]!
 80042b0:	e7eb      	b.n	800428a <memmove+0xc>
	...

080042b4 <_free_r>:
 80042b4:	b538      	push	{r3, r4, r5, lr}
 80042b6:	4605      	mov	r5, r0
 80042b8:	2900      	cmp	r1, #0
 80042ba:	d043      	beq.n	8004344 <_free_r+0x90>
 80042bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042c0:	1f0c      	subs	r4, r1, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	bfb8      	it	lt
 80042c6:	18e4      	addlt	r4, r4, r3
 80042c8:	f000 f8d4 	bl	8004474 <__malloc_lock>
 80042cc:	4a1e      	ldr	r2, [pc, #120]	; (8004348 <_free_r+0x94>)
 80042ce:	6813      	ldr	r3, [r2, #0]
 80042d0:	4610      	mov	r0, r2
 80042d2:	b933      	cbnz	r3, 80042e2 <_free_r+0x2e>
 80042d4:	6063      	str	r3, [r4, #4]
 80042d6:	6014      	str	r4, [r2, #0]
 80042d8:	4628      	mov	r0, r5
 80042da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042de:	f000 b8ca 	b.w	8004476 <__malloc_unlock>
 80042e2:	42a3      	cmp	r3, r4
 80042e4:	d90b      	bls.n	80042fe <_free_r+0x4a>
 80042e6:	6821      	ldr	r1, [r4, #0]
 80042e8:	1862      	adds	r2, r4, r1
 80042ea:	4293      	cmp	r3, r2
 80042ec:	bf01      	itttt	eq
 80042ee:	681a      	ldreq	r2, [r3, #0]
 80042f0:	685b      	ldreq	r3, [r3, #4]
 80042f2:	1852      	addeq	r2, r2, r1
 80042f4:	6022      	streq	r2, [r4, #0]
 80042f6:	6063      	str	r3, [r4, #4]
 80042f8:	6004      	str	r4, [r0, #0]
 80042fa:	e7ed      	b.n	80042d8 <_free_r+0x24>
 80042fc:	4613      	mov	r3, r2
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	b10a      	cbz	r2, 8004306 <_free_r+0x52>
 8004302:	42a2      	cmp	r2, r4
 8004304:	d9fa      	bls.n	80042fc <_free_r+0x48>
 8004306:	6819      	ldr	r1, [r3, #0]
 8004308:	1858      	adds	r0, r3, r1
 800430a:	42a0      	cmp	r0, r4
 800430c:	d10b      	bne.n	8004326 <_free_r+0x72>
 800430e:	6820      	ldr	r0, [r4, #0]
 8004310:	4401      	add	r1, r0
 8004312:	1858      	adds	r0, r3, r1
 8004314:	4282      	cmp	r2, r0
 8004316:	6019      	str	r1, [r3, #0]
 8004318:	d1de      	bne.n	80042d8 <_free_r+0x24>
 800431a:	6810      	ldr	r0, [r2, #0]
 800431c:	6852      	ldr	r2, [r2, #4]
 800431e:	4401      	add	r1, r0
 8004320:	6019      	str	r1, [r3, #0]
 8004322:	605a      	str	r2, [r3, #4]
 8004324:	e7d8      	b.n	80042d8 <_free_r+0x24>
 8004326:	d902      	bls.n	800432e <_free_r+0x7a>
 8004328:	230c      	movs	r3, #12
 800432a:	602b      	str	r3, [r5, #0]
 800432c:	e7d4      	b.n	80042d8 <_free_r+0x24>
 800432e:	6820      	ldr	r0, [r4, #0]
 8004330:	1821      	adds	r1, r4, r0
 8004332:	428a      	cmp	r2, r1
 8004334:	bf01      	itttt	eq
 8004336:	6811      	ldreq	r1, [r2, #0]
 8004338:	6852      	ldreq	r2, [r2, #4]
 800433a:	1809      	addeq	r1, r1, r0
 800433c:	6021      	streq	r1, [r4, #0]
 800433e:	6062      	str	r2, [r4, #4]
 8004340:	605c      	str	r4, [r3, #4]
 8004342:	e7c9      	b.n	80042d8 <_free_r+0x24>
 8004344:	bd38      	pop	{r3, r4, r5, pc}
 8004346:	bf00      	nop
 8004348:	20000288 	.word	0x20000288

0800434c <_malloc_r>:
 800434c:	b570      	push	{r4, r5, r6, lr}
 800434e:	1ccd      	adds	r5, r1, #3
 8004350:	f025 0503 	bic.w	r5, r5, #3
 8004354:	3508      	adds	r5, #8
 8004356:	2d0c      	cmp	r5, #12
 8004358:	bf38      	it	cc
 800435a:	250c      	movcc	r5, #12
 800435c:	2d00      	cmp	r5, #0
 800435e:	4606      	mov	r6, r0
 8004360:	db01      	blt.n	8004366 <_malloc_r+0x1a>
 8004362:	42a9      	cmp	r1, r5
 8004364:	d903      	bls.n	800436e <_malloc_r+0x22>
 8004366:	230c      	movs	r3, #12
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	2000      	movs	r0, #0
 800436c:	bd70      	pop	{r4, r5, r6, pc}
 800436e:	f000 f881 	bl	8004474 <__malloc_lock>
 8004372:	4a23      	ldr	r2, [pc, #140]	; (8004400 <_malloc_r+0xb4>)
 8004374:	6814      	ldr	r4, [r2, #0]
 8004376:	4621      	mov	r1, r4
 8004378:	b991      	cbnz	r1, 80043a0 <_malloc_r+0x54>
 800437a:	4c22      	ldr	r4, [pc, #136]	; (8004404 <_malloc_r+0xb8>)
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	b91b      	cbnz	r3, 8004388 <_malloc_r+0x3c>
 8004380:	4630      	mov	r0, r6
 8004382:	f000 f867 	bl	8004454 <_sbrk_r>
 8004386:	6020      	str	r0, [r4, #0]
 8004388:	4629      	mov	r1, r5
 800438a:	4630      	mov	r0, r6
 800438c:	f000 f862 	bl	8004454 <_sbrk_r>
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	d126      	bne.n	80043e2 <_malloc_r+0x96>
 8004394:	230c      	movs	r3, #12
 8004396:	4630      	mov	r0, r6
 8004398:	6033      	str	r3, [r6, #0]
 800439a:	f000 f86c 	bl	8004476 <__malloc_unlock>
 800439e:	e7e4      	b.n	800436a <_malloc_r+0x1e>
 80043a0:	680b      	ldr	r3, [r1, #0]
 80043a2:	1b5b      	subs	r3, r3, r5
 80043a4:	d41a      	bmi.n	80043dc <_malloc_r+0x90>
 80043a6:	2b0b      	cmp	r3, #11
 80043a8:	d90f      	bls.n	80043ca <_malloc_r+0x7e>
 80043aa:	600b      	str	r3, [r1, #0]
 80043ac:	18cc      	adds	r4, r1, r3
 80043ae:	50cd      	str	r5, [r1, r3]
 80043b0:	4630      	mov	r0, r6
 80043b2:	f000 f860 	bl	8004476 <__malloc_unlock>
 80043b6:	f104 000b 	add.w	r0, r4, #11
 80043ba:	1d23      	adds	r3, r4, #4
 80043bc:	f020 0007 	bic.w	r0, r0, #7
 80043c0:	1ac3      	subs	r3, r0, r3
 80043c2:	d01b      	beq.n	80043fc <_malloc_r+0xb0>
 80043c4:	425a      	negs	r2, r3
 80043c6:	50e2      	str	r2, [r4, r3]
 80043c8:	bd70      	pop	{r4, r5, r6, pc}
 80043ca:	428c      	cmp	r4, r1
 80043cc:	bf0b      	itete	eq
 80043ce:	6863      	ldreq	r3, [r4, #4]
 80043d0:	684b      	ldrne	r3, [r1, #4]
 80043d2:	6013      	streq	r3, [r2, #0]
 80043d4:	6063      	strne	r3, [r4, #4]
 80043d6:	bf18      	it	ne
 80043d8:	460c      	movne	r4, r1
 80043da:	e7e9      	b.n	80043b0 <_malloc_r+0x64>
 80043dc:	460c      	mov	r4, r1
 80043de:	6849      	ldr	r1, [r1, #4]
 80043e0:	e7ca      	b.n	8004378 <_malloc_r+0x2c>
 80043e2:	1cc4      	adds	r4, r0, #3
 80043e4:	f024 0403 	bic.w	r4, r4, #3
 80043e8:	42a0      	cmp	r0, r4
 80043ea:	d005      	beq.n	80043f8 <_malloc_r+0xac>
 80043ec:	1a21      	subs	r1, r4, r0
 80043ee:	4630      	mov	r0, r6
 80043f0:	f000 f830 	bl	8004454 <_sbrk_r>
 80043f4:	3001      	adds	r0, #1
 80043f6:	d0cd      	beq.n	8004394 <_malloc_r+0x48>
 80043f8:	6025      	str	r5, [r4, #0]
 80043fa:	e7d9      	b.n	80043b0 <_malloc_r+0x64>
 80043fc:	bd70      	pop	{r4, r5, r6, pc}
 80043fe:	bf00      	nop
 8004400:	20000288 	.word	0x20000288
 8004404:	2000028c 	.word	0x2000028c

08004408 <_realloc_r>:
 8004408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440a:	4607      	mov	r7, r0
 800440c:	4614      	mov	r4, r2
 800440e:	460e      	mov	r6, r1
 8004410:	b921      	cbnz	r1, 800441c <_realloc_r+0x14>
 8004412:	4611      	mov	r1, r2
 8004414:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004418:	f7ff bf98 	b.w	800434c <_malloc_r>
 800441c:	b922      	cbnz	r2, 8004428 <_realloc_r+0x20>
 800441e:	f7ff ff49 	bl	80042b4 <_free_r>
 8004422:	4625      	mov	r5, r4
 8004424:	4628      	mov	r0, r5
 8004426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004428:	f000 f826 	bl	8004478 <_malloc_usable_size_r>
 800442c:	4284      	cmp	r4, r0
 800442e:	d90f      	bls.n	8004450 <_realloc_r+0x48>
 8004430:	4621      	mov	r1, r4
 8004432:	4638      	mov	r0, r7
 8004434:	f7ff ff8a 	bl	800434c <_malloc_r>
 8004438:	4605      	mov	r5, r0
 800443a:	2800      	cmp	r0, #0
 800443c:	d0f2      	beq.n	8004424 <_realloc_r+0x1c>
 800443e:	4631      	mov	r1, r6
 8004440:	4622      	mov	r2, r4
 8004442:	f7ff fb25 	bl	8003a90 <memcpy>
 8004446:	4631      	mov	r1, r6
 8004448:	4638      	mov	r0, r7
 800444a:	f7ff ff33 	bl	80042b4 <_free_r>
 800444e:	e7e9      	b.n	8004424 <_realloc_r+0x1c>
 8004450:	4635      	mov	r5, r6
 8004452:	e7e7      	b.n	8004424 <_realloc_r+0x1c>

08004454 <_sbrk_r>:
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	2300      	movs	r3, #0
 8004458:	4c05      	ldr	r4, [pc, #20]	; (8004470 <_sbrk_r+0x1c>)
 800445a:	4605      	mov	r5, r0
 800445c:	4608      	mov	r0, r1
 800445e:	6023      	str	r3, [r4, #0]
 8004460:	f000 f91c 	bl	800469c <_sbrk>
 8004464:	1c43      	adds	r3, r0, #1
 8004466:	d102      	bne.n	800446e <_sbrk_r+0x1a>
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	b103      	cbz	r3, 800446e <_sbrk_r+0x1a>
 800446c:	602b      	str	r3, [r5, #0]
 800446e:	bd38      	pop	{r3, r4, r5, pc}
 8004470:	200004c0 	.word	0x200004c0

08004474 <__malloc_lock>:
 8004474:	4770      	bx	lr

08004476 <__malloc_unlock>:
 8004476:	4770      	bx	lr

08004478 <_malloc_usable_size_r>:
 8004478:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800447c:	2800      	cmp	r0, #0
 800447e:	f1a0 0004 	sub.w	r0, r0, #4
 8004482:	bfbc      	itt	lt
 8004484:	580b      	ldrlt	r3, [r1, r0]
 8004486:	18c0      	addlt	r0, r0, r3
 8004488:	4770      	bx	lr
	...

0800448c <sqrt>:
 800448c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004490:	b08b      	sub	sp, #44	; 0x2c
 8004492:	4604      	mov	r4, r0
 8004494:	460d      	mov	r5, r1
 8004496:	f000 f84d 	bl	8004534 <__ieee754_sqrt>
 800449a:	4b24      	ldr	r3, [pc, #144]	; (800452c <sqrt+0xa0>)
 800449c:	4680      	mov	r8, r0
 800449e:	f993 a000 	ldrsb.w	sl, [r3]
 80044a2:	4689      	mov	r9, r1
 80044a4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80044a8:	d02b      	beq.n	8004502 <sqrt+0x76>
 80044aa:	4622      	mov	r2, r4
 80044ac:	462b      	mov	r3, r5
 80044ae:	4620      	mov	r0, r4
 80044b0:	4629      	mov	r1, r5
 80044b2:	f7fc faa7 	bl	8000a04 <__aeabi_dcmpun>
 80044b6:	4683      	mov	fp, r0
 80044b8:	bb18      	cbnz	r0, 8004502 <sqrt+0x76>
 80044ba:	2600      	movs	r6, #0
 80044bc:	2700      	movs	r7, #0
 80044be:	4632      	mov	r2, r6
 80044c0:	463b      	mov	r3, r7
 80044c2:	4620      	mov	r0, r4
 80044c4:	4629      	mov	r1, r5
 80044c6:	f7fc fa75 	bl	80009b4 <__aeabi_dcmplt>
 80044ca:	b1d0      	cbz	r0, 8004502 <sqrt+0x76>
 80044cc:	2301      	movs	r3, #1
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	4b17      	ldr	r3, [pc, #92]	; (8004530 <sqrt+0xa4>)
 80044d2:	f8cd b020 	str.w	fp, [sp, #32]
 80044d6:	9301      	str	r3, [sp, #4]
 80044d8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80044dc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80044e0:	f1ba 0f00 	cmp.w	sl, #0
 80044e4:	d112      	bne.n	800450c <sqrt+0x80>
 80044e6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80044ea:	4668      	mov	r0, sp
 80044ec:	f000 f8ce 	bl	800468c <matherr>
 80044f0:	b1b8      	cbz	r0, 8004522 <sqrt+0x96>
 80044f2:	9b08      	ldr	r3, [sp, #32]
 80044f4:	b11b      	cbz	r3, 80044fe <sqrt+0x72>
 80044f6:	f000 f8cb 	bl	8004690 <__errno>
 80044fa:	9b08      	ldr	r3, [sp, #32]
 80044fc:	6003      	str	r3, [r0, #0]
 80044fe:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8004502:	4640      	mov	r0, r8
 8004504:	4649      	mov	r1, r9
 8004506:	b00b      	add	sp, #44	; 0x2c
 8004508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800450c:	4632      	mov	r2, r6
 800450e:	463b      	mov	r3, r7
 8004510:	4630      	mov	r0, r6
 8004512:	4639      	mov	r1, r7
 8004514:	f7fc f906 	bl	8000724 <__aeabi_ddiv>
 8004518:	f1ba 0f02 	cmp.w	sl, #2
 800451c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004520:	d1e3      	bne.n	80044ea <sqrt+0x5e>
 8004522:	f000 f8b5 	bl	8004690 <__errno>
 8004526:	2321      	movs	r3, #33	; 0x21
 8004528:	6003      	str	r3, [r0, #0]
 800452a:	e7e2      	b.n	80044f2 <sqrt+0x66>
 800452c:	200001e0 	.word	0x200001e0
 8004530:	08004875 	.word	0x08004875

08004534 <__ieee754_sqrt>:
 8004534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004538:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8004688 <__ieee754_sqrt+0x154>
 800453c:	4606      	mov	r6, r0
 800453e:	ea3e 0e01 	bics.w	lr, lr, r1
 8004542:	460d      	mov	r5, r1
 8004544:	4607      	mov	r7, r0
 8004546:	460a      	mov	r2, r1
 8004548:	460c      	mov	r4, r1
 800454a:	4603      	mov	r3, r0
 800454c:	d10f      	bne.n	800456e <__ieee754_sqrt+0x3a>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	f7fb ffbd 	bl	80004d0 <__aeabi_dmul>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4630      	mov	r0, r6
 800455c:	4629      	mov	r1, r5
 800455e:	f7fb fe05 	bl	800016c <__adddf3>
 8004562:	4606      	mov	r6, r0
 8004564:	460d      	mov	r5, r1
 8004566:	4630      	mov	r0, r6
 8004568:	4629      	mov	r1, r5
 800456a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800456e:	2900      	cmp	r1, #0
 8004570:	dc0e      	bgt.n	8004590 <__ieee754_sqrt+0x5c>
 8004572:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 8004576:	ea5e 0707 	orrs.w	r7, lr, r7
 800457a:	d0f4      	beq.n	8004566 <__ieee754_sqrt+0x32>
 800457c:	b141      	cbz	r1, 8004590 <__ieee754_sqrt+0x5c>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	f7fb fdf1 	bl	8000168 <__aeabi_dsub>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	f7fc f8cb 	bl	8000724 <__aeabi_ddiv>
 800458e:	e7e8      	b.n	8004562 <__ieee754_sqrt+0x2e>
 8004590:	1512      	asrs	r2, r2, #20
 8004592:	d10c      	bne.n	80045ae <__ieee754_sqrt+0x7a>
 8004594:	2c00      	cmp	r4, #0
 8004596:	d06e      	beq.n	8004676 <__ieee754_sqrt+0x142>
 8004598:	2100      	movs	r1, #0
 800459a:	02e6      	lsls	r6, r4, #11
 800459c:	d56f      	bpl.n	800467e <__ieee754_sqrt+0x14a>
 800459e:	1e48      	subs	r0, r1, #1
 80045a0:	1a12      	subs	r2, r2, r0
 80045a2:	f1c1 0020 	rsb	r0, r1, #32
 80045a6:	fa23 f000 	lsr.w	r0, r3, r0
 80045aa:	4304      	orrs	r4, r0
 80045ac:	408b      	lsls	r3, r1
 80045ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80045b2:	07d5      	lsls	r5, r2, #31
 80045b4:	f04f 0500 	mov.w	r5, #0
 80045b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80045bc:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80045c0:	bf42      	ittt	mi
 80045c2:	0064      	lslmi	r4, r4, #1
 80045c4:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 80045c8:	005b      	lslmi	r3, r3, #1
 80045ca:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 80045ce:	1050      	asrs	r0, r2, #1
 80045d0:	4421      	add	r1, r4
 80045d2:	2216      	movs	r2, #22
 80045d4:	462c      	mov	r4, r5
 80045d6:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	19a7      	adds	r7, r4, r6
 80045de:	428f      	cmp	r7, r1
 80045e0:	bfde      	ittt	le
 80045e2:	1bc9      	suble	r1, r1, r7
 80045e4:	19bc      	addle	r4, r7, r6
 80045e6:	19ad      	addle	r5, r5, r6
 80045e8:	0049      	lsls	r1, r1, #1
 80045ea:	3a01      	subs	r2, #1
 80045ec:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80045f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80045f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80045f8:	d1f0      	bne.n	80045dc <__ieee754_sqrt+0xa8>
 80045fa:	f04f 0e20 	mov.w	lr, #32
 80045fe:	4694      	mov	ip, r2
 8004600:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004604:	42a1      	cmp	r1, r4
 8004606:	eb06 070c 	add.w	r7, r6, ip
 800460a:	dc02      	bgt.n	8004612 <__ieee754_sqrt+0xde>
 800460c:	d112      	bne.n	8004634 <__ieee754_sqrt+0x100>
 800460e:	429f      	cmp	r7, r3
 8004610:	d810      	bhi.n	8004634 <__ieee754_sqrt+0x100>
 8004612:	2f00      	cmp	r7, #0
 8004614:	eb07 0c06 	add.w	ip, r7, r6
 8004618:	da34      	bge.n	8004684 <__ieee754_sqrt+0x150>
 800461a:	f1bc 0f00 	cmp.w	ip, #0
 800461e:	db31      	blt.n	8004684 <__ieee754_sqrt+0x150>
 8004620:	f104 0801 	add.w	r8, r4, #1
 8004624:	1b09      	subs	r1, r1, r4
 8004626:	4644      	mov	r4, r8
 8004628:	429f      	cmp	r7, r3
 800462a:	bf88      	it	hi
 800462c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004630:	1bdb      	subs	r3, r3, r7
 8004632:	4432      	add	r2, r6
 8004634:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8004638:	f1be 0e01 	subs.w	lr, lr, #1
 800463c:	4439      	add	r1, r7
 800463e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004642:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004646:	d1dd      	bne.n	8004604 <__ieee754_sqrt+0xd0>
 8004648:	430b      	orrs	r3, r1
 800464a:	d006      	beq.n	800465a <__ieee754_sqrt+0x126>
 800464c:	1c54      	adds	r4, r2, #1
 800464e:	bf0b      	itete	eq
 8004650:	4672      	moveq	r2, lr
 8004652:	3201      	addne	r2, #1
 8004654:	3501      	addeq	r5, #1
 8004656:	f022 0201 	bicne.w	r2, r2, #1
 800465a:	106b      	asrs	r3, r5, #1
 800465c:	0852      	lsrs	r2, r2, #1
 800465e:	07e9      	lsls	r1, r5, #31
 8004660:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004664:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004668:	bf48      	it	mi
 800466a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800466e:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 8004672:	4616      	mov	r6, r2
 8004674:	e777      	b.n	8004566 <__ieee754_sqrt+0x32>
 8004676:	0adc      	lsrs	r4, r3, #11
 8004678:	3a15      	subs	r2, #21
 800467a:	055b      	lsls	r3, r3, #21
 800467c:	e78a      	b.n	8004594 <__ieee754_sqrt+0x60>
 800467e:	0064      	lsls	r4, r4, #1
 8004680:	3101      	adds	r1, #1
 8004682:	e78a      	b.n	800459a <__ieee754_sqrt+0x66>
 8004684:	46a0      	mov	r8, r4
 8004686:	e7cd      	b.n	8004624 <__ieee754_sqrt+0xf0>
 8004688:	7ff00000 	.word	0x7ff00000

0800468c <matherr>:
 800468c:	2000      	movs	r0, #0
 800468e:	4770      	bx	lr

08004690 <__errno>:
 8004690:	4b01      	ldr	r3, [pc, #4]	; (8004698 <__errno+0x8>)
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20000010 	.word	0x20000010

0800469c <_sbrk>:
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <_sbrk+0x14>)
 800469e:	4602      	mov	r2, r0
 80046a0:	6819      	ldr	r1, [r3, #0]
 80046a2:	b909      	cbnz	r1, 80046a8 <_sbrk+0xc>
 80046a4:	4903      	ldr	r1, [pc, #12]	; (80046b4 <_sbrk+0x18>)
 80046a6:	6019      	str	r1, [r3, #0]
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	4402      	add	r2, r0
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	4770      	bx	lr
 80046b0:	20000290 	.word	0x20000290
 80046b4:	200004c4 	.word	0x200004c4

080046b8 <_init>:
 80046b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ba:	bf00      	nop
 80046bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046be:	bc08      	pop	{r3}
 80046c0:	469e      	mov	lr, r3
 80046c2:	4770      	bx	lr

080046c4 <_fini>:
 80046c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c6:	bf00      	nop
 80046c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ca:	bc08      	pop	{r3}
 80046cc:	469e      	mov	lr, r3
 80046ce:	4770      	bx	lr
