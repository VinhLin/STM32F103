
PT100_Max31865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e90  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08003fa0  08003fa0  00013fa0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004170  08004170  00014170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004174  08004174  00014174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000260  20000000  08004178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000290  20000260  080043d8  00020260  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200004f0  080043d8  000204f0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011fef  00000000  00000000  00020289  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002bde  00000000  00000000  00032278  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005713  00000000  00000000  00034e56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000810  00000000  00000000  0003a570  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b38  00000000  00000000  0003ad80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004e64  00000000  00000000  0003b8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002b58  00000000  00000000  0004071c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00043274  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000207c  00000000  00000000  000432f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000260 	.word	0x20000260
 800012c:	00000000 	.word	0x00000000
 8000130:	08003f88 	.word	0x08003f88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000264 	.word	0x20000264
 800014c:	08003f88 	.word	0x08003f88

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f092 0f00 	teq	r2, #0
 800045e:	bf14      	ite	ne
 8000460:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 7460 	mov.w	r4, #896	; 0x380
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000474:	e720      	b.n	80002b8 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_ul2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f04f 0500 	mov.w	r5, #0
 8000486:	e00a      	b.n	800049e <__aeabi_l2d+0x16>

08000488 <__aeabi_l2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000496:	d502      	bpl.n	800049e <__aeabi_l2d+0x16>
 8000498:	4240      	negs	r0, r0
 800049a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800049e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004aa:	f43f aedc 	beq.w	8000266 <__adddf3+0xe6>
 80004ae:	f04f 0203 	mov.w	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004c6:	f1c2 0320 	rsb	r3, r2, #32
 80004ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004d6:	ea40 000e 	orr.w	r0, r0, lr
 80004da:	fa21 f102 	lsr.w	r1, r1, r2
 80004de:	4414      	add	r4, r2
 80004e0:	e6c1      	b.n	8000266 <__adddf3+0xe6>
 80004e2:	bf00      	nop

080004e4 <__aeabi_dmul>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f2:	bf1d      	ittte	ne
 80004f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f8:	ea94 0f0c 	teqne	r4, ip
 80004fc:	ea95 0f0c 	teqne	r5, ip
 8000500:	f000 f8de 	bleq	80006c0 <__aeabi_dmul+0x1dc>
 8000504:	442c      	add	r4, r5
 8000506:	ea81 0603 	eor.w	r6, r1, r3
 800050a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800050e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000512:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000516:	bf18      	it	ne
 8000518:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800051c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000524:	d038      	beq.n	8000598 <__aeabi_dmul+0xb4>
 8000526:	fba0 ce02 	umull	ip, lr, r0, r2
 800052a:	f04f 0500 	mov.w	r5, #0
 800052e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000532:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000536:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053a:	f04f 0600 	mov.w	r6, #0
 800053e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000542:	f09c 0f00 	teq	ip, #0
 8000546:	bf18      	it	ne
 8000548:	f04e 0e01 	orrne.w	lr, lr, #1
 800054c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000550:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000554:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000558:	d204      	bcs.n	8000564 <__aeabi_dmul+0x80>
 800055a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800055e:	416d      	adcs	r5, r5
 8000560:	eb46 0606 	adc.w	r6, r6, r6
 8000564:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000568:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800056c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000570:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000574:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000578:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800057c:	bf88      	it	hi
 800057e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000582:	d81e      	bhi.n	80005c2 <__aeabi_dmul+0xde>
 8000584:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	bd70      	pop	{r4, r5, r6, pc}
 8000598:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800059c:	ea46 0101 	orr.w	r1, r6, r1
 80005a0:	ea40 0002 	orr.w	r0, r0, r2
 80005a4:	ea81 0103 	eor.w	r1, r1, r3
 80005a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005ac:	bfc2      	ittt	gt
 80005ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005b6:	bd70      	popgt	{r4, r5, r6, pc}
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f04f 0e00 	mov.w	lr, #0
 80005c0:	3c01      	subs	r4, #1
 80005c2:	f300 80ab 	bgt.w	800071c <__aeabi_dmul+0x238>
 80005c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ca:	bfde      	ittt	le
 80005cc:	2000      	movle	r0, #0
 80005ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d2:	bd70      	pople	{r4, r5, r6, pc}
 80005d4:	f1c4 0400 	rsb	r4, r4, #0
 80005d8:	3c20      	subs	r4, #32
 80005da:	da35      	bge.n	8000648 <__aeabi_dmul+0x164>
 80005dc:	340c      	adds	r4, #12
 80005de:	dc1b      	bgt.n	8000618 <__aeabi_dmul+0x134>
 80005e0:	f104 0414 	add.w	r4, r4, #20
 80005e4:	f1c4 0520 	rsb	r5, r4, #32
 80005e8:	fa00 f305 	lsl.w	r3, r0, r5
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f205 	lsl.w	r2, r1, r5
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000604:	fa21 f604 	lsr.w	r6, r1, r4
 8000608:	eb42 0106 	adc.w	r1, r2, r6
 800060c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000610:	bf08      	it	eq
 8000612:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f1c4 040c 	rsb	r4, r4, #12
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f304 	lsl.w	r3, r0, r4
 8000624:	fa20 f005 	lsr.w	r0, r0, r5
 8000628:	fa01 f204 	lsl.w	r2, r1, r4
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000638:	f141 0100 	adc.w	r1, r1, #0
 800063c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000640:	bf08      	it	eq
 8000642:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f205 	lsl.w	r2, r0, r5
 8000650:	ea4e 0e02 	orr.w	lr, lr, r2
 8000654:	fa20 f304 	lsr.w	r3, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea43 0302 	orr.w	r3, r3, r2
 8000660:	fa21 f004 	lsr.w	r0, r1, r4
 8000664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000668:	fa21 f204 	lsr.w	r2, r1, r4
 800066c:	ea20 0002 	bic.w	r0, r0, r2
 8000670:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f094 0f00 	teq	r4, #0
 8000684:	d10f      	bne.n	80006a6 <__aeabi_dmul+0x1c2>
 8000686:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068a:	0040      	lsls	r0, r0, #1
 800068c:	eb41 0101 	adc.w	r1, r1, r1
 8000690:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3c01      	subeq	r4, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1a6>
 800069a:	ea41 0106 	orr.w	r1, r1, r6
 800069e:	f095 0f00 	teq	r5, #0
 80006a2:	bf18      	it	ne
 80006a4:	4770      	bxne	lr
 80006a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006aa:	0052      	lsls	r2, r2, #1
 80006ac:	eb43 0303 	adc.w	r3, r3, r3
 80006b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b4:	bf08      	it	eq
 80006b6:	3d01      	subeq	r5, #1
 80006b8:	d0f7      	beq.n	80006aa <__aeabi_dmul+0x1c6>
 80006ba:	ea43 0306 	orr.w	r3, r3, r6
 80006be:	4770      	bx	lr
 80006c0:	ea94 0f0c 	teq	r4, ip
 80006c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c8:	bf18      	it	ne
 80006ca:	ea95 0f0c 	teqne	r5, ip
 80006ce:	d00c      	beq.n	80006ea <__aeabi_dmul+0x206>
 80006d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d4:	bf18      	it	ne
 80006d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006da:	d1d1      	bne.n	8000680 <__aeabi_dmul+0x19c>
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	f04f 0000 	mov.w	r0, #0
 80006e8:	bd70      	pop	{r4, r5, r6, pc}
 80006ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ee:	bf06      	itte	eq
 80006f0:	4610      	moveq	r0, r2
 80006f2:	4619      	moveq	r1, r3
 80006f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f8:	d019      	beq.n	800072e <__aeabi_dmul+0x24a>
 80006fa:	ea94 0f0c 	teq	r4, ip
 80006fe:	d102      	bne.n	8000706 <__aeabi_dmul+0x222>
 8000700:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000704:	d113      	bne.n	800072e <__aeabi_dmul+0x24a>
 8000706:	ea95 0f0c 	teq	r5, ip
 800070a:	d105      	bne.n	8000718 <__aeabi_dmul+0x234>
 800070c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000710:	bf1c      	itt	ne
 8000712:	4610      	movne	r0, r2
 8000714:	4619      	movne	r1, r3
 8000716:	d10a      	bne.n	800072e <__aeabi_dmul+0x24a>
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000720:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd70      	pop	{r4, r5, r6, pc}
 800072e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000732:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000736:	bd70      	pop	{r4, r5, r6, pc}

08000738 <__aeabi_ddiv>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800073e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000742:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000746:	bf1d      	ittte	ne
 8000748:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800074c:	ea94 0f0c 	teqne	r4, ip
 8000750:	ea95 0f0c 	teqne	r5, ip
 8000754:	f000 f8a7 	bleq	80008a6 <__aeabi_ddiv+0x16e>
 8000758:	eba4 0405 	sub.w	r4, r4, r5
 800075c:	ea81 0e03 	eor.w	lr, r1, r3
 8000760:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000764:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000768:	f000 8088 	beq.w	800087c <__aeabi_ddiv+0x144>
 800076c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000770:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000774:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000778:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800077c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000780:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000784:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000788:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800078c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000790:	429d      	cmp	r5, r3
 8000792:	bf08      	it	eq
 8000794:	4296      	cmpeq	r6, r2
 8000796:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800079e:	d202      	bcs.n	80007a6 <__aeabi_ddiv+0x6e>
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	1ab6      	subs	r6, r6, r2
 80007a8:	eb65 0503 	sbc.w	r5, r5, r3
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80007be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c2:	bf22      	ittt	cs
 80007c4:	1ab6      	subcs	r6, r6, r2
 80007c6:	4675      	movcs	r5, lr
 80007c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007cc:	085b      	lsrs	r3, r3, #1
 80007ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007da:	bf22      	ittt	cs
 80007dc:	1ab6      	subcs	r6, r6, r2
 80007de:	4675      	movcs	r5, lr
 80007e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f2:	bf22      	ittt	cs
 80007f4:	1ab6      	subcs	r6, r6, r2
 80007f6:	4675      	movcs	r5, lr
 80007f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	ebb6 0e02 	subs.w	lr, r6, r2
 8000806:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080a:	bf22      	ittt	cs
 800080c:	1ab6      	subcs	r6, r6, r2
 800080e:	4675      	movcs	r5, lr
 8000810:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000814:	ea55 0e06 	orrs.w	lr, r5, r6
 8000818:	d018      	beq.n	800084c <__aeabi_ddiv+0x114>
 800081a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800081e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000822:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000826:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800082e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000832:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000836:	d1c0      	bne.n	80007ba <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	d10b      	bne.n	8000856 <__aeabi_ddiv+0x11e>
 800083e:	ea41 0100 	orr.w	r1, r1, r0
 8000842:	f04f 0000 	mov.w	r0, #0
 8000846:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084a:	e7b6      	b.n	80007ba <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	bf04      	itt	eq
 8000852:	4301      	orreq	r1, r0
 8000854:	2000      	moveq	r0, #0
 8000856:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085a:	bf88      	it	hi
 800085c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000860:	f63f aeaf 	bhi.w	80005c2 <__aeabi_dmul+0xde>
 8000864:	ebb5 0c03 	subs.w	ip, r5, r3
 8000868:	bf04      	itt	eq
 800086a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800086e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000872:	f150 0000 	adcs.w	r0, r0, #0
 8000876:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000880:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000884:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000888:	bfc2      	ittt	gt
 800088a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800088e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000892:	bd70      	popgt	{r4, r5, r6, pc}
 8000894:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000898:	f04f 0e00 	mov.w	lr, #0
 800089c:	3c01      	subs	r4, #1
 800089e:	e690      	b.n	80005c2 <__aeabi_dmul+0xde>
 80008a0:	ea45 0e06 	orr.w	lr, r5, r6
 80008a4:	e68d      	b.n	80005c2 <__aeabi_dmul+0xde>
 80008a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008aa:	ea94 0f0c 	teq	r4, ip
 80008ae:	bf08      	it	eq
 80008b0:	ea95 0f0c 	teqeq	r5, ip
 80008b4:	f43f af3b 	beq.w	800072e <__aeabi_dmul+0x24a>
 80008b8:	ea94 0f0c 	teq	r4, ip
 80008bc:	d10a      	bne.n	80008d4 <__aeabi_ddiv+0x19c>
 80008be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c2:	f47f af34 	bne.w	800072e <__aeabi_dmul+0x24a>
 80008c6:	ea95 0f0c 	teq	r5, ip
 80008ca:	f47f af25 	bne.w	8000718 <__aeabi_dmul+0x234>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e72c      	b.n	800072e <__aeabi_dmul+0x24a>
 80008d4:	ea95 0f0c 	teq	r5, ip
 80008d8:	d106      	bne.n	80008e8 <__aeabi_ddiv+0x1b0>
 80008da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008de:	f43f aefd 	beq.w	80006dc <__aeabi_dmul+0x1f8>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e722      	b.n	800072e <__aeabi_dmul+0x24a>
 80008e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008ec:	bf18      	it	ne
 80008ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f2:	f47f aec5 	bne.w	8000680 <__aeabi_dmul+0x19c>
 80008f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fa:	f47f af0d 	bne.w	8000718 <__aeabi_dmul+0x234>
 80008fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000902:	f47f aeeb 	bne.w	80006dc <__aeabi_dmul+0x1f8>
 8000906:	e712      	b.n	800072e <__aeabi_dmul+0x24a>

08000908 <__gedf2>:
 8000908:	f04f 3cff 	mov.w	ip, #4294967295
 800090c:	e006      	b.n	800091c <__cmpdf2+0x4>
 800090e:	bf00      	nop

08000910 <__ledf2>:
 8000910:	f04f 0c01 	mov.w	ip, #1
 8000914:	e002      	b.n	800091c <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__cmpdf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000920:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000928:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800092c:	bf18      	it	ne
 800092e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000932:	d01b      	beq.n	800096c <__cmpdf2+0x54>
 8000934:	b001      	add	sp, #4
 8000936:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093a:	bf0c      	ite	eq
 800093c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000940:	ea91 0f03 	teqne	r1, r3
 8000944:	bf02      	ittt	eq
 8000946:	ea90 0f02 	teqeq	r0, r2
 800094a:	2000      	moveq	r0, #0
 800094c:	4770      	bxeq	lr
 800094e:	f110 0f00 	cmn.w	r0, #0
 8000952:	ea91 0f03 	teq	r1, r3
 8000956:	bf58      	it	pl
 8000958:	4299      	cmppl	r1, r3
 800095a:	bf08      	it	eq
 800095c:	4290      	cmpeq	r0, r2
 800095e:	bf2c      	ite	cs
 8000960:	17d8      	asrcs	r0, r3, #31
 8000962:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000966:	f040 0001 	orr.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d102      	bne.n	800097c <__cmpdf2+0x64>
 8000976:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097a:	d107      	bne.n	800098c <__cmpdf2+0x74>
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	d1d6      	bne.n	8000934 <__cmpdf2+0x1c>
 8000986:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098a:	d0d3      	beq.n	8000934 <__cmpdf2+0x1c>
 800098c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <__aeabi_cdrcmple>:
 8000994:	4684      	mov	ip, r0
 8000996:	4610      	mov	r0, r2
 8000998:	4662      	mov	r2, ip
 800099a:	468c      	mov	ip, r1
 800099c:	4619      	mov	r1, r3
 800099e:	4663      	mov	r3, ip
 80009a0:	e000      	b.n	80009a4 <__aeabi_cdcmpeq>
 80009a2:	bf00      	nop

080009a4 <__aeabi_cdcmpeq>:
 80009a4:	b501      	push	{r0, lr}
 80009a6:	f7ff ffb7 	bl	8000918 <__cmpdf2>
 80009aa:	2800      	cmp	r0, #0
 80009ac:	bf48      	it	mi
 80009ae:	f110 0f00 	cmnmi.w	r0, #0
 80009b2:	bd01      	pop	{r0, pc}

080009b4 <__aeabi_dcmpeq>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff fff4 	bl	80009a4 <__aeabi_cdcmpeq>
 80009bc:	bf0c      	ite	eq
 80009be:	2001      	moveq	r0, #1
 80009c0:	2000      	movne	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmplt>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffea 	bl	80009a4 <__aeabi_cdcmpeq>
 80009d0:	bf34      	ite	cc
 80009d2:	2001      	movcc	r0, #1
 80009d4:	2000      	movcs	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmple>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffe0 	bl	80009a4 <__aeabi_cdcmpeq>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpge>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffce 	bl	8000994 <__aeabi_cdrcmple>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpgt>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffc4 	bl	8000994 <__aeabi_cdrcmple>
 8000a0c:	bf34      	ite	cc
 8000a0e:	2001      	movcc	r0, #1
 8000a10:	2000      	movcs	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpun>:
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__aeabi_dcmpun+0x10>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d10a      	bne.n	8000a3e <__aeabi_dcmpun+0x26>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__aeabi_dcmpun+0x20>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_dcmpun+0x26>
 8000a38:	f04f 0000 	mov.w	r0, #0
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0001 	mov.w	r0, #1
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2iz>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a4c:	d215      	bcs.n	8000a7a <__aeabi_d2iz+0x36>
 8000a4e:	d511      	bpl.n	8000a74 <__aeabi_d2iz+0x30>
 8000a50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a58:	d912      	bls.n	8000a80 <__aeabi_d2iz+0x3c>
 8000a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6e:	bf18      	it	ne
 8000a70:	4240      	negne	r0, r0
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d105      	bne.n	8000a8c <__aeabi_d2iz+0x48>
 8000a80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a84:	bf08      	it	eq
 8000a86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2uiz>:
 8000a94:	004a      	lsls	r2, r1, #1
 8000a96:	d211      	bcs.n	8000abc <__aeabi_d2uiz+0x28>
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d211      	bcs.n	8000ac2 <__aeabi_d2uiz+0x2e>
 8000a9e:	d50d      	bpl.n	8000abc <__aeabi_d2uiz+0x28>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d40e      	bmi.n	8000ac8 <__aeabi_d2uiz+0x34>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d102      	bne.n	8000ace <__aeabi_d2uiz+0x3a>
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	4770      	bx	lr
 8000ace:	f04f 0000 	mov.w	r0, #0
 8000ad2:	4770      	bx	lr

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_frsub>:
 8000b74:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b78:	e002      	b.n	8000b80 <__addsf3>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_fsub>:
 8000b7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b80 <__addsf3>:
 8000b80:	0042      	lsls	r2, r0, #1
 8000b82:	bf1f      	itttt	ne
 8000b84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b88:	ea92 0f03 	teqne	r2, r3
 8000b8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b94:	d06a      	beq.n	8000c6c <__addsf3+0xec>
 8000b96:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b9e:	bfc1      	itttt	gt
 8000ba0:	18d2      	addgt	r2, r2, r3
 8000ba2:	4041      	eorgt	r1, r0
 8000ba4:	4048      	eorgt	r0, r1
 8000ba6:	4041      	eorgt	r1, r0
 8000ba8:	bfb8      	it	lt
 8000baa:	425b      	neglt	r3, r3
 8000bac:	2b19      	cmp	r3, #25
 8000bae:	bf88      	it	hi
 8000bb0:	4770      	bxhi	lr
 8000bb2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4240      	negne	r0, r0
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bce:	bf18      	it	ne
 8000bd0:	4249      	negne	r1, r1
 8000bd2:	ea92 0f03 	teq	r2, r3
 8000bd6:	d03f      	beq.n	8000c58 <__addsf3+0xd8>
 8000bd8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bdc:	fa41 fc03 	asr.w	ip, r1, r3
 8000be0:	eb10 000c 	adds.w	r0, r0, ip
 8000be4:	f1c3 0320 	rsb	r3, r3, #32
 8000be8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf0:	d502      	bpl.n	8000bf8 <__addsf3+0x78>
 8000bf2:	4249      	negs	r1, r1
 8000bf4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bfc:	d313      	bcc.n	8000c26 <__addsf3+0xa6>
 8000bfe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c02:	d306      	bcc.n	8000c12 <__addsf3+0x92>
 8000c04:	0840      	lsrs	r0, r0, #1
 8000c06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c0a:	f102 0201 	add.w	r2, r2, #1
 8000c0e:	2afe      	cmp	r2, #254	; 0xfe
 8000c10:	d251      	bcs.n	8000cb6 <__addsf3+0x136>
 8000c12:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1a:	bf08      	it	eq
 8000c1c:	f020 0001 	biceq.w	r0, r0, #1
 8000c20:	ea40 0003 	orr.w	r0, r0, r3
 8000c24:	4770      	bx	lr
 8000c26:	0049      	lsls	r1, r1, #1
 8000c28:	eb40 0000 	adc.w	r0, r0, r0
 8000c2c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c30:	f1a2 0201 	sub.w	r2, r2, #1
 8000c34:	d1ed      	bne.n	8000c12 <__addsf3+0x92>
 8000c36:	fab0 fc80 	clz	ip, r0
 8000c3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c46:	bfaa      	itet	ge
 8000c48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c4c:	4252      	neglt	r2, r2
 8000c4e:	4318      	orrge	r0, r3
 8000c50:	bfbc      	itt	lt
 8000c52:	40d0      	lsrlt	r0, r2
 8000c54:	4318      	orrlt	r0, r3
 8000c56:	4770      	bx	lr
 8000c58:	f092 0f00 	teq	r2, #0
 8000c5c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c60:	bf06      	itte	eq
 8000c62:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c66:	3201      	addeq	r2, #1
 8000c68:	3b01      	subne	r3, #1
 8000c6a:	e7b5      	b.n	8000bd8 <__addsf3+0x58>
 8000c6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c74:	bf18      	it	ne
 8000c76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7a:	d021      	beq.n	8000cc0 <__addsf3+0x140>
 8000c7c:	ea92 0f03 	teq	r2, r3
 8000c80:	d004      	beq.n	8000c8c <__addsf3+0x10c>
 8000c82:	f092 0f00 	teq	r2, #0
 8000c86:	bf08      	it	eq
 8000c88:	4608      	moveq	r0, r1
 8000c8a:	4770      	bx	lr
 8000c8c:	ea90 0f01 	teq	r0, r1
 8000c90:	bf1c      	itt	ne
 8000c92:	2000      	movne	r0, #0
 8000c94:	4770      	bxne	lr
 8000c96:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c9a:	d104      	bne.n	8000ca6 <__addsf3+0x126>
 8000c9c:	0040      	lsls	r0, r0, #1
 8000c9e:	bf28      	it	cs
 8000ca0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ca4:	4770      	bx	lr
 8000ca6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000caa:	bf3c      	itt	cc
 8000cac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb0:	4770      	bxcc	lr
 8000cb2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbe:	4770      	bx	lr
 8000cc0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cc4:	bf16      	itet	ne
 8000cc6:	4608      	movne	r0, r1
 8000cc8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ccc:	4601      	movne	r1, r0
 8000cce:	0242      	lsls	r2, r0, #9
 8000cd0:	bf06      	itte	eq
 8000cd2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cd6:	ea90 0f01 	teqeq	r0, r1
 8000cda:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_ui2f>:
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e004      	b.n	8000cf0 <__aeabi_i2f+0x8>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_i2f>:
 8000ce8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cec:	bf48      	it	mi
 8000cee:	4240      	negmi	r0, r0
 8000cf0:	ea5f 0c00 	movs.w	ip, r0
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cfc:	4601      	mov	r1, r0
 8000cfe:	f04f 0000 	mov.w	r0, #0
 8000d02:	e01c      	b.n	8000d3e <__aeabi_l2f+0x2a>

08000d04 <__aeabi_ul2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e00a      	b.n	8000d28 <__aeabi_l2f+0x14>
 8000d12:	bf00      	nop

08000d14 <__aeabi_l2f>:
 8000d14:	ea50 0201 	orrs.w	r2, r0, r1
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d20:	d502      	bpl.n	8000d28 <__aeabi_l2f+0x14>
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	ea5f 0c01 	movs.w	ip, r1
 8000d2c:	bf02      	ittt	eq
 8000d2e:	4684      	moveq	ip, r0
 8000d30:	4601      	moveq	r1, r0
 8000d32:	2000      	moveq	r0, #0
 8000d34:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d38:	bf08      	it	eq
 8000d3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d42:	fabc f28c 	clz	r2, ip
 8000d46:	3a08      	subs	r2, #8
 8000d48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d4c:	db10      	blt.n	8000d70 <__aeabi_l2f+0x5c>
 8000d4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d52:	4463      	add	r3, ip
 8000d54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d58:	f1c2 0220 	rsb	r2, r2, #32
 8000d5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d60:	fa20 f202 	lsr.w	r2, r0, r2
 8000d64:	eb43 0002 	adc.w	r0, r3, r2
 8000d68:	bf08      	it	eq
 8000d6a:	f020 0001 	biceq.w	r0, r0, #1
 8000d6e:	4770      	bx	lr
 8000d70:	f102 0220 	add.w	r2, r2, #32
 8000d74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d78:	f1c2 0220 	rsb	r2, r2, #32
 8000d7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d80:	fa21 f202 	lsr.w	r2, r1, r2
 8000d84:	eb43 0002 	adc.w	r0, r3, r2
 8000d88:	bf08      	it	eq
 8000d8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d8e:	4770      	bx	lr

08000d90 <__aeabi_fmul>:
 8000d90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d98:	bf1e      	ittt	ne
 8000d9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d9e:	ea92 0f0c 	teqne	r2, ip
 8000da2:	ea93 0f0c 	teqne	r3, ip
 8000da6:	d06f      	beq.n	8000e88 <__aeabi_fmul+0xf8>
 8000da8:	441a      	add	r2, r3
 8000daa:	ea80 0c01 	eor.w	ip, r0, r1
 8000dae:	0240      	lsls	r0, r0, #9
 8000db0:	bf18      	it	ne
 8000db2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000db6:	d01e      	beq.n	8000df6 <__aeabi_fmul+0x66>
 8000db8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dbc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dc4:	fba0 3101 	umull	r3, r1, r0, r1
 8000dc8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dcc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd0:	bf3e      	ittt	cc
 8000dd2:	0049      	lslcc	r1, r1, #1
 8000dd4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dd8:	005b      	lslcc	r3, r3, #1
 8000dda:	ea40 0001 	orr.w	r0, r0, r1
 8000dde:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000de2:	2afd      	cmp	r2, #253	; 0xfd
 8000de4:	d81d      	bhi.n	8000e22 <__aeabi_fmul+0x92>
 8000de6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dee:	bf08      	it	eq
 8000df0:	f020 0001 	biceq.w	r0, r0, #1
 8000df4:	4770      	bx	lr
 8000df6:	f090 0f00 	teq	r0, #0
 8000dfa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfe:	bf08      	it	eq
 8000e00:	0249      	lsleq	r1, r1, #9
 8000e02:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e06:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e0a:	3a7f      	subs	r2, #127	; 0x7f
 8000e0c:	bfc2      	ittt	gt
 8000e0e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e12:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e16:	4770      	bxgt	lr
 8000e18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	3a01      	subs	r2, #1
 8000e22:	dc5d      	bgt.n	8000ee0 <__aeabi_fmul+0x150>
 8000e24:	f112 0f19 	cmn.w	r2, #25
 8000e28:	bfdc      	itt	le
 8000e2a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e2e:	4770      	bxle	lr
 8000e30:	f1c2 0200 	rsb	r2, r2, #0
 8000e34:	0041      	lsls	r1, r0, #1
 8000e36:	fa21 f102 	lsr.w	r1, r1, r2
 8000e3a:	f1c2 0220 	rsb	r2, r2, #32
 8000e3e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e42:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e46:	f140 0000 	adc.w	r0, r0, #0
 8000e4a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e4e:	bf08      	it	eq
 8000e50:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e54:	4770      	bx	lr
 8000e56:	f092 0f00 	teq	r2, #0
 8000e5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e5e:	bf02      	ittt	eq
 8000e60:	0040      	lsleq	r0, r0, #1
 8000e62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e66:	3a01      	subeq	r2, #1
 8000e68:	d0f9      	beq.n	8000e5e <__aeabi_fmul+0xce>
 8000e6a:	ea40 000c 	orr.w	r0, r0, ip
 8000e6e:	f093 0f00 	teq	r3, #0
 8000e72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e76:	bf02      	ittt	eq
 8000e78:	0049      	lsleq	r1, r1, #1
 8000e7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e7e:	3b01      	subeq	r3, #1
 8000e80:	d0f9      	beq.n	8000e76 <__aeabi_fmul+0xe6>
 8000e82:	ea41 010c 	orr.w	r1, r1, ip
 8000e86:	e78f      	b.n	8000da8 <__aeabi_fmul+0x18>
 8000e88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	bf18      	it	ne
 8000e92:	ea93 0f0c 	teqne	r3, ip
 8000e96:	d00a      	beq.n	8000eae <__aeabi_fmul+0x11e>
 8000e98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e9c:	bf18      	it	ne
 8000e9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	d1d8      	bne.n	8000e56 <__aeabi_fmul+0xc6>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	4770      	bx	lr
 8000eae:	f090 0f00 	teq	r0, #0
 8000eb2:	bf17      	itett	ne
 8000eb4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eb8:	4608      	moveq	r0, r1
 8000eba:	f091 0f00 	teqne	r1, #0
 8000ebe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ec2:	d014      	beq.n	8000eee <__aeabi_fmul+0x15e>
 8000ec4:	ea92 0f0c 	teq	r2, ip
 8000ec8:	d101      	bne.n	8000ece <__aeabi_fmul+0x13e>
 8000eca:	0242      	lsls	r2, r0, #9
 8000ecc:	d10f      	bne.n	8000eee <__aeabi_fmul+0x15e>
 8000ece:	ea93 0f0c 	teq	r3, ip
 8000ed2:	d103      	bne.n	8000edc <__aeabi_fmul+0x14c>
 8000ed4:	024b      	lsls	r3, r1, #9
 8000ed6:	bf18      	it	ne
 8000ed8:	4608      	movne	r0, r1
 8000eda:	d108      	bne.n	8000eee <__aeabi_fmul+0x15e>
 8000edc:	ea80 0001 	eor.w	r0, r0, r1
 8000ee0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eec:	4770      	bx	lr
 8000eee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ef6:	4770      	bx	lr

08000ef8 <__aeabi_fdiv>:
 8000ef8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000efc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f00:	bf1e      	ittt	ne
 8000f02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f06:	ea92 0f0c 	teqne	r2, ip
 8000f0a:	ea93 0f0c 	teqne	r3, ip
 8000f0e:	d069      	beq.n	8000fe4 <__aeabi_fdiv+0xec>
 8000f10:	eba2 0203 	sub.w	r2, r2, r3
 8000f14:	ea80 0c01 	eor.w	ip, r0, r1
 8000f18:	0249      	lsls	r1, r1, #9
 8000f1a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f1e:	d037      	beq.n	8000f90 <__aeabi_fdiv+0x98>
 8000f20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f24:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f28:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f30:	428b      	cmp	r3, r1
 8000f32:	bf38      	it	cc
 8000f34:	005b      	lslcc	r3, r3, #1
 8000f36:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f3a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	bf24      	itt	cs
 8000f42:	1a5b      	subcs	r3, r3, r1
 8000f44:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f48:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f52:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f56:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f5a:	bf24      	itt	cs
 8000f5c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f64:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f68:	bf24      	itt	cs
 8000f6a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f6e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	bf18      	it	ne
 8000f76:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f7a:	d1e0      	bne.n	8000f3e <__aeabi_fdiv+0x46>
 8000f7c:	2afd      	cmp	r2, #253	; 0xfd
 8000f7e:	f63f af50 	bhi.w	8000e22 <__aeabi_fmul+0x92>
 8000f82:	428b      	cmp	r3, r1
 8000f84:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f88:	bf08      	it	eq
 8000f8a:	f020 0001 	biceq.w	r0, r0, #1
 8000f8e:	4770      	bx	lr
 8000f90:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f94:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f98:	327f      	adds	r2, #127	; 0x7f
 8000f9a:	bfc2      	ittt	gt
 8000f9c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fa4:	4770      	bxgt	lr
 8000fa6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	3a01      	subs	r2, #1
 8000fb0:	e737      	b.n	8000e22 <__aeabi_fmul+0x92>
 8000fb2:	f092 0f00 	teq	r2, #0
 8000fb6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fba:	bf02      	ittt	eq
 8000fbc:	0040      	lsleq	r0, r0, #1
 8000fbe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fc2:	3a01      	subeq	r2, #1
 8000fc4:	d0f9      	beq.n	8000fba <__aeabi_fdiv+0xc2>
 8000fc6:	ea40 000c 	orr.w	r0, r0, ip
 8000fca:	f093 0f00 	teq	r3, #0
 8000fce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fd2:	bf02      	ittt	eq
 8000fd4:	0049      	lsleq	r1, r1, #1
 8000fd6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fda:	3b01      	subeq	r3, #1
 8000fdc:	d0f9      	beq.n	8000fd2 <__aeabi_fdiv+0xda>
 8000fde:	ea41 010c 	orr.w	r1, r1, ip
 8000fe2:	e795      	b.n	8000f10 <__aeabi_fdiv+0x18>
 8000fe4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fe8:	ea92 0f0c 	teq	r2, ip
 8000fec:	d108      	bne.n	8001000 <__aeabi_fdiv+0x108>
 8000fee:	0242      	lsls	r2, r0, #9
 8000ff0:	f47f af7d 	bne.w	8000eee <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	f47f af70 	bne.w	8000edc <__aeabi_fmul+0x14c>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e776      	b.n	8000eee <__aeabi_fmul+0x15e>
 8001000:	ea93 0f0c 	teq	r3, ip
 8001004:	d104      	bne.n	8001010 <__aeabi_fdiv+0x118>
 8001006:	024b      	lsls	r3, r1, #9
 8001008:	f43f af4c 	beq.w	8000ea4 <__aeabi_fmul+0x114>
 800100c:	4608      	mov	r0, r1
 800100e:	e76e      	b.n	8000eee <__aeabi_fmul+0x15e>
 8001010:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001014:	bf18      	it	ne
 8001016:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800101a:	d1ca      	bne.n	8000fb2 <__aeabi_fdiv+0xba>
 800101c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001020:	f47f af5c 	bne.w	8000edc <__aeabi_fmul+0x14c>
 8001024:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001028:	f47f af3c 	bne.w	8000ea4 <__aeabi_fmul+0x114>
 800102c:	e75f      	b.n	8000eee <__aeabi_fmul+0x15e>
 800102e:	bf00      	nop

08001030 <__gesf2>:
 8001030:	f04f 3cff 	mov.w	ip, #4294967295
 8001034:	e006      	b.n	8001044 <__cmpsf2+0x4>
 8001036:	bf00      	nop

08001038 <__lesf2>:
 8001038:	f04f 0c01 	mov.w	ip, #1
 800103c:	e002      	b.n	8001044 <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__cmpsf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001048:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800104c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001050:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001054:	bf18      	it	ne
 8001056:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800105a:	d011      	beq.n	8001080 <__cmpsf2+0x40>
 800105c:	b001      	add	sp, #4
 800105e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001062:	bf18      	it	ne
 8001064:	ea90 0f01 	teqne	r0, r1
 8001068:	bf58      	it	pl
 800106a:	ebb2 0003 	subspl.w	r0, r2, r3
 800106e:	bf88      	it	hi
 8001070:	17c8      	asrhi	r0, r1, #31
 8001072:	bf38      	it	cc
 8001074:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001078:	bf18      	it	ne
 800107a:	f040 0001 	orrne.w	r0, r0, #1
 800107e:	4770      	bx	lr
 8001080:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001084:	d102      	bne.n	800108c <__cmpsf2+0x4c>
 8001086:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800108a:	d105      	bne.n	8001098 <__cmpsf2+0x58>
 800108c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001090:	d1e4      	bne.n	800105c <__cmpsf2+0x1c>
 8001092:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001096:	d0e1      	beq.n	800105c <__cmpsf2+0x1c>
 8001098:	f85d 0b04 	ldr.w	r0, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <__aeabi_cfrcmple>:
 80010a0:	4684      	mov	ip, r0
 80010a2:	4608      	mov	r0, r1
 80010a4:	4661      	mov	r1, ip
 80010a6:	e7ff      	b.n	80010a8 <__aeabi_cfcmpeq>

080010a8 <__aeabi_cfcmpeq>:
 80010a8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010aa:	f7ff ffc9 	bl	8001040 <__cmpsf2>
 80010ae:	2800      	cmp	r0, #0
 80010b0:	bf48      	it	mi
 80010b2:	f110 0f00 	cmnmi.w	r0, #0
 80010b6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010b8 <__aeabi_fcmpeq>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff fff4 	bl	80010a8 <__aeabi_cfcmpeq>
 80010c0:	bf0c      	ite	eq
 80010c2:	2001      	moveq	r0, #1
 80010c4:	2000      	movne	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_fcmplt>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff ffea 	bl	80010a8 <__aeabi_cfcmpeq>
 80010d4:	bf34      	ite	cc
 80010d6:	2001      	movcc	r0, #1
 80010d8:	2000      	movcs	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmple>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffe0 	bl	80010a8 <__aeabi_cfcmpeq>
 80010e8:	bf94      	ite	ls
 80010ea:	2001      	movls	r0, #1
 80010ec:	2000      	movhi	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmpge>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffd2 	bl	80010a0 <__aeabi_cfrcmple>
 80010fc:	bf94      	ite	ls
 80010fe:	2001      	movls	r0, #1
 8001100:	2000      	movhi	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_fcmpgt>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff ffc8 	bl	80010a0 <__aeabi_cfrcmple>
 8001110:	bf34      	ite	cc
 8001112:	2001      	movcc	r0, #1
 8001114:	2000      	movcs	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <HAL_InitTick+0x3c>)
{
 8001120:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001122:	7818      	ldrb	r0, [r3, #0]
 8001124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001128:	fbb3 f3f0 	udiv	r3, r3, r0
 800112c:	4a0b      	ldr	r2, [pc, #44]	; (800115c <HAL_InitTick+0x40>)
 800112e:	6810      	ldr	r0, [r2, #0]
 8001130:	fbb0 f0f3 	udiv	r0, r0, r3
 8001134:	f000 f89e 	bl	8001274 <HAL_SYSTICK_Config>
 8001138:	4604      	mov	r4, r0
 800113a:	b958      	cbnz	r0, 8001154 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113c:	2d0f      	cmp	r5, #15
 800113e:	d809      	bhi.n	8001154 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	4602      	mov	r2, r0
 8001142:	4629      	mov	r1, r5
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f854 	bl	80011f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <HAL_InitTick+0x44>)
 800114e:	4620      	mov	r0, r4
 8001150:	601d      	str	r5, [r3, #0]
 8001152:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001154:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001156:	bd38      	pop	{r3, r4, r5, pc}
 8001158:	20000000 	.word	0x20000000
 800115c:	20000088 	.word	0x20000088
 8001160:	20000004 	.word	0x20000004

08001164 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001164:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_Init+0x20>)
{
 8001166:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001168:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800116c:	f043 0310 	orr.w	r3, r3, #16
 8001170:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001172:	f000 f82d 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001176:	2000      	movs	r0, #0
 8001178:	f7ff ffd0 	bl	800111c <HAL_InitTick>
  HAL_MspInit();
 800117c:	f001 ff58 	bl	8003030 <HAL_MspInit>
}
 8001180:	2000      	movs	r0, #0
 8001182:	bd08      	pop	{r3, pc}
 8001184:	40022000 	.word	0x40022000

08001188 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001188:	4a03      	ldr	r2, [pc, #12]	; (8001198 <HAL_IncTick+0x10>)
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <HAL_IncTick+0x14>)
 800118c:	6811      	ldr	r1, [r2, #0]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	440b      	add	r3, r1
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000314 	.word	0x20000314
 800119c:	20000000 	.word	0x20000000

080011a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011a0:	4b01      	ldr	r3, [pc, #4]	; (80011a8 <HAL_GetTick+0x8>)
 80011a2:	6818      	ldr	r0, [r3, #0]
}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000314 	.word	0x20000314

080011ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ac:	b538      	push	{r3, r4, r5, lr}
 80011ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80011b0:	f7ff fff6 	bl	80011a0 <HAL_GetTick>
 80011b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80011b8:	bf1e      	ittt	ne
 80011ba:	4b04      	ldrne	r3, [pc, #16]	; (80011cc <HAL_Delay+0x20>)
 80011bc:	781b      	ldrbne	r3, [r3, #0]
 80011be:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c0:	f7ff ffee 	bl	80011a0 <HAL_GetTick>
 80011c4:	1b40      	subs	r0, r0, r5
 80011c6:	4284      	cmp	r4, r0
 80011c8:	d8fa      	bhi.n	80011c0 <HAL_Delay+0x14>
  {
  }
}
 80011ca:	bd38      	pop	{r3, r4, r5, pc}
 80011cc:	20000000 	.word	0x20000000

080011d0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80011d2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80011d6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011de:	041b      	lsls	r3, r3, #16
 80011e0:	0c1b      	lsrs	r3, r3, #16
 80011e2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80011ea:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80011ec:	60d3      	str	r3, [r2, #12]
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f6:	b530      	push	{r4, r5, lr}
 80011f8:	68dc      	ldr	r4, [r3, #12]
 80011fa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fe:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001204:	2b04      	cmp	r3, #4
 8001206:	bf28      	it	cs
 8001208:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001210:	bf98      	it	ls
 8001212:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	fa05 f303 	lsl.w	r3, r5, r3
 8001218:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121c:	bf88      	it	hi
 800121e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	4019      	ands	r1, r3
 8001222:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	fa05 f404 	lsl.w	r4, r5, r4
 8001228:	3c01      	subs	r4, #1
 800122a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800122c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122e:	ea42 0201 	orr.w	r2, r2, r1
 8001232:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	bfaf      	iteee	ge
 8001238:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123c:	4b06      	ldrlt	r3, [pc, #24]	; (8001258 <HAL_NVIC_SetPriority+0x64>)
 800123e:	f000 000f 	andlt.w	r0, r0, #15
 8001242:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	bfa5      	ittet	ge
 8001246:	b2d2      	uxtbge	r2, r2
 8001248:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001252:	bd30      	pop	{r4, r5, pc}
 8001254:	e000ed00 	.word	0xe000ed00
 8001258:	e000ed14 	.word	0xe000ed14

0800125c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800125c:	2301      	movs	r3, #1
 800125e:	0942      	lsrs	r2, r0, #5
 8001260:	f000 001f 	and.w	r0, r0, #31
 8001264:	fa03 f000 	lsl.w	r0, r3, r0
 8001268:	4b01      	ldr	r3, [pc, #4]	; (8001270 <HAL_NVIC_EnableIRQ+0x14>)
 800126a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100

08001274 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	3801      	subs	r0, #1
 8001276:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800127a:	d20a      	bcs.n	8001292 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	4a06      	ldr	r2, [pc, #24]	; (800129c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001284:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001288:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800128c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e010 	.word	0xe000e010
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80012a2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	bf0c      	ite	eq
 80012a8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80012ac:	f022 0204 	bicne.w	r2, r2, #4
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	4770      	bx	lr
 80012b4:	e000e010 	.word	0xe000e010

080012b8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80012b8:	4770      	bx	lr

080012ba <HAL_SYSTICK_IRQHandler>:
{
 80012ba:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80012bc:	f7ff fffc 	bl	80012b8 <HAL_SYSTICK_Callback>
 80012c0:	bd08      	pop	{r3, pc}
	...

080012c4 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012c4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80012c8:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d003      	beq.n	80012d6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ce:	2304      	movs	r3, #4
 80012d0:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80012d2:	2001      	movs	r0, #1
 80012d4:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	6803      	ldr	r3, [r0, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	f022 020e 	bic.w	r2, r2, #14
 80012de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	f022 0201 	bic.w	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012e8:	4a18      	ldr	r2, [pc, #96]	; (800134c <HAL_DMA_Abort_IT+0x88>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d01f      	beq.n	800132e <HAL_DMA_Abort_IT+0x6a>
 80012ee:	3214      	adds	r2, #20
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d01e      	beq.n	8001332 <HAL_DMA_Abort_IT+0x6e>
 80012f4:	3214      	adds	r2, #20
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d01d      	beq.n	8001336 <HAL_DMA_Abort_IT+0x72>
 80012fa:	3214      	adds	r2, #20
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d01d      	beq.n	800133c <HAL_DMA_Abort_IT+0x78>
 8001300:	3214      	adds	r2, #20
 8001302:	4293      	cmp	r3, r2
 8001304:	d01d      	beq.n	8001342 <HAL_DMA_Abort_IT+0x7e>
 8001306:	3214      	adds	r2, #20
 8001308:	4293      	cmp	r3, r2
 800130a:	bf0c      	ite	eq
 800130c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001310:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001314:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001316:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001318:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800131a:	2301      	movs	r3, #1
 800131c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001320:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001322:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001326:	b17b      	cbz	r3, 8001348 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8001328:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800132a:	4620      	mov	r0, r4
 800132c:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800132e:	2301      	movs	r3, #1
 8001330:	e7f0      	b.n	8001314 <HAL_DMA_Abort_IT+0x50>
 8001332:	2310      	movs	r3, #16
 8001334:	e7ee      	b.n	8001314 <HAL_DMA_Abort_IT+0x50>
 8001336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800133a:	e7eb      	b.n	8001314 <HAL_DMA_Abort_IT+0x50>
 800133c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001340:	e7e8      	b.n	8001314 <HAL_DMA_Abort_IT+0x50>
 8001342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001346:	e7e5      	b.n	8001314 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001348:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800134a:	bd10      	pop	{r4, pc}
 800134c:	40020008 	.word	0x40020008
 8001350:	40020000 	.word	0x40020000

08001354 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001358:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800135a:	4616      	mov	r6, r2
 800135c:	4b65      	ldr	r3, [pc, #404]	; (80014f4 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800135e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001504 <HAL_GPIO_Init+0x1b0>
 8001362:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001508 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001366:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800136c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001370:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001374:	45a0      	cmp	r8, r4
 8001376:	d17f      	bne.n	8001478 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001378:	684d      	ldr	r5, [r1, #4]
 800137a:	2d12      	cmp	r5, #18
 800137c:	f000 80af 	beq.w	80014de <HAL_GPIO_Init+0x18a>
 8001380:	f200 8088 	bhi.w	8001494 <HAL_GPIO_Init+0x140>
 8001384:	2d02      	cmp	r5, #2
 8001386:	f000 80a7 	beq.w	80014d8 <HAL_GPIO_Init+0x184>
 800138a:	d87c      	bhi.n	8001486 <HAL_GPIO_Init+0x132>
 800138c:	2d00      	cmp	r5, #0
 800138e:	f000 808e 	beq.w	80014ae <HAL_GPIO_Init+0x15a>
 8001392:	2d01      	cmp	r5, #1
 8001394:	f000 809e 	beq.w	80014d4 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001398:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800139c:	2cff      	cmp	r4, #255	; 0xff
 800139e:	bf93      	iteet	ls
 80013a0:	4682      	movls	sl, r0
 80013a2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80013a6:	3d08      	subhi	r5, #8
 80013a8:	f8d0 b000 	ldrls.w	fp, [r0]
 80013ac:	bf92      	itee	ls
 80013ae:	00b5      	lslls	r5, r6, #2
 80013b0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80013b4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013b6:	fa09 f805 	lsl.w	r8, r9, r5
 80013ba:	ea2b 0808 	bic.w	r8, fp, r8
 80013be:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013c2:	bf88      	it	hi
 80013c4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013c8:	ea48 0505 	orr.w	r5, r8, r5
 80013cc:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013d0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80013d4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80013d8:	d04e      	beq.n	8001478 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013da:	4d47      	ldr	r5, [pc, #284]	; (80014f8 <HAL_GPIO_Init+0x1a4>)
 80013dc:	4f46      	ldr	r7, [pc, #280]	; (80014f8 <HAL_GPIO_Init+0x1a4>)
 80013de:	69ad      	ldr	r5, [r5, #24]
 80013e0:	f026 0803 	bic.w	r8, r6, #3
 80013e4:	f045 0501 	orr.w	r5, r5, #1
 80013e8:	61bd      	str	r5, [r7, #24]
 80013ea:	69bd      	ldr	r5, [r7, #24]
 80013ec:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80013f0:	f005 0501 	and.w	r5, r5, #1
 80013f4:	9501      	str	r5, [sp, #4]
 80013f6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80013fa:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013fe:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001400:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001404:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001408:	fa09 f90b 	lsl.w	r9, r9, fp
 800140c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001410:	4d3a      	ldr	r5, [pc, #232]	; (80014fc <HAL_GPIO_Init+0x1a8>)
 8001412:	42a8      	cmp	r0, r5
 8001414:	d068      	beq.n	80014e8 <HAL_GPIO_Init+0x194>
 8001416:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800141a:	42a8      	cmp	r0, r5
 800141c:	d066      	beq.n	80014ec <HAL_GPIO_Init+0x198>
 800141e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001422:	42a8      	cmp	r0, r5
 8001424:	d064      	beq.n	80014f0 <HAL_GPIO_Init+0x19c>
 8001426:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800142a:	42a8      	cmp	r0, r5
 800142c:	bf0c      	ite	eq
 800142e:	2503      	moveq	r5, #3
 8001430:	2504      	movne	r5, #4
 8001432:	fa05 f50b 	lsl.w	r5, r5, fp
 8001436:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800143a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800143e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001440:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001444:	bf14      	ite	ne
 8001446:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001448:	43a5      	biceq	r5, r4
 800144a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800144c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800144e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001452:	bf14      	ite	ne
 8001454:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001456:	43a5      	biceq	r5, r4
 8001458:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800145a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800145c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001460:	bf14      	ite	ne
 8001462:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001464:	43a5      	biceq	r5, r4
 8001466:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001468:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800146a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800146e:	bf14      	ite	ne
 8001470:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001472:	ea25 0404 	biceq.w	r4, r5, r4
 8001476:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001478:	3601      	adds	r6, #1
 800147a:	2e10      	cmp	r6, #16
 800147c:	f47f af73 	bne.w	8001366 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001480:	b003      	add	sp, #12
 8001482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001486:	2d03      	cmp	r5, #3
 8001488:	d022      	beq.n	80014d0 <HAL_GPIO_Init+0x17c>
 800148a:	2d11      	cmp	r5, #17
 800148c:	d184      	bne.n	8001398 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800148e:	68ca      	ldr	r2, [r1, #12]
 8001490:	3204      	adds	r2, #4
          break;
 8001492:	e781      	b.n	8001398 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001494:	4f1a      	ldr	r7, [pc, #104]	; (8001500 <HAL_GPIO_Init+0x1ac>)
 8001496:	42bd      	cmp	r5, r7
 8001498:	d009      	beq.n	80014ae <HAL_GPIO_Init+0x15a>
 800149a:	d812      	bhi.n	80014c2 <HAL_GPIO_Init+0x16e>
 800149c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800150c <HAL_GPIO_Init+0x1b8>
 80014a0:	454d      	cmp	r5, r9
 80014a2:	d004      	beq.n	80014ae <HAL_GPIO_Init+0x15a>
 80014a4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80014a8:	454d      	cmp	r5, r9
 80014aa:	f47f af75 	bne.w	8001398 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ae:	688a      	ldr	r2, [r1, #8]
 80014b0:	b1c2      	cbz	r2, 80014e4 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014b2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80014b4:	bf0c      	ite	eq
 80014b6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80014ba:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014be:	2208      	movs	r2, #8
 80014c0:	e76a      	b.n	8001398 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80014c2:	4575      	cmp	r5, lr
 80014c4:	d0f3      	beq.n	80014ae <HAL_GPIO_Init+0x15a>
 80014c6:	4565      	cmp	r5, ip
 80014c8:	d0f1      	beq.n	80014ae <HAL_GPIO_Init+0x15a>
 80014ca:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001510 <HAL_GPIO_Init+0x1bc>
 80014ce:	e7eb      	b.n	80014a8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014d0:	2200      	movs	r2, #0
 80014d2:	e761      	b.n	8001398 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014d4:	68ca      	ldr	r2, [r1, #12]
          break;
 80014d6:	e75f      	b.n	8001398 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014d8:	68ca      	ldr	r2, [r1, #12]
 80014da:	3208      	adds	r2, #8
          break;
 80014dc:	e75c      	b.n	8001398 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014de:	68ca      	ldr	r2, [r1, #12]
 80014e0:	320c      	adds	r2, #12
          break;
 80014e2:	e759      	b.n	8001398 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014e4:	2204      	movs	r2, #4
 80014e6:	e757      	b.n	8001398 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014e8:	2500      	movs	r5, #0
 80014ea:	e7a2      	b.n	8001432 <HAL_GPIO_Init+0xde>
 80014ec:	2501      	movs	r5, #1
 80014ee:	e7a0      	b.n	8001432 <HAL_GPIO_Init+0xde>
 80014f0:	2502      	movs	r5, #2
 80014f2:	e79e      	b.n	8001432 <HAL_GPIO_Init+0xde>
 80014f4:	40010400 	.word	0x40010400
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010800 	.word	0x40010800
 8001500:	10210000 	.word	0x10210000
 8001504:	10310000 	.word	0x10310000
 8001508:	10320000 	.word	0x10320000
 800150c:	10110000 	.word	0x10110000
 8001510:	10220000 	.word	0x10220000

08001514 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001514:	b10a      	cbz	r2, 800151a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001516:	6101      	str	r1, [r0, #16]
 8001518:	4770      	bx	lr
 800151a:	0409      	lsls	r1, r1, #16
 800151c:	e7fb      	b.n	8001516 <HAL_GPIO_WritePin+0x2>
	...

08001520 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001520:	6803      	ldr	r3, [r0, #0]
{
 8001522:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001526:	07db      	lsls	r3, r3, #31
{
 8001528:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152a:	d410      	bmi.n	800154e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152c:	682b      	ldr	r3, [r5, #0]
 800152e:	079f      	lsls	r7, r3, #30
 8001530:	d45e      	bmi.n	80015f0 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001532:	682b      	ldr	r3, [r5, #0]
 8001534:	0719      	lsls	r1, r3, #28
 8001536:	f100 8095 	bmi.w	8001664 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800153a:	682b      	ldr	r3, [r5, #0]
 800153c:	075a      	lsls	r2, r3, #29
 800153e:	f100 80bf 	bmi.w	80016c0 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001542:	69ea      	ldr	r2, [r5, #28]
 8001544:	2a00      	cmp	r2, #0
 8001546:	f040 812d 	bne.w	80017a4 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800154a:	2000      	movs	r0, #0
 800154c:	e014      	b.n	8001578 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800154e:	4c90      	ldr	r4, [pc, #576]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 8001550:	6863      	ldr	r3, [r4, #4]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b04      	cmp	r3, #4
 8001558:	d007      	beq.n	800156a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800155a:	6863      	ldr	r3, [r4, #4]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b08      	cmp	r3, #8
 8001562:	d10c      	bne.n	800157e <HAL_RCC_OscConfig+0x5e>
 8001564:	6863      	ldr	r3, [r4, #4]
 8001566:	03de      	lsls	r6, r3, #15
 8001568:	d509      	bpl.n	800157e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	039c      	lsls	r4, r3, #14
 800156e:	d5dd      	bpl.n	800152c <HAL_RCC_OscConfig+0xc>
 8001570:	686b      	ldr	r3, [r5, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1da      	bne.n	800152c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001576:	2001      	movs	r0, #1
}
 8001578:	b002      	add	sp, #8
 800157a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157e:	686b      	ldr	r3, [r5, #4]
 8001580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001584:	d110      	bne.n	80015a8 <HAL_RCC_OscConfig+0x88>
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800158e:	f7ff fe07 	bl	80011a0 <HAL_GetTick>
 8001592:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	0398      	lsls	r0, r3, #14
 8001598:	d4c8      	bmi.n	800152c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800159a:	f7ff fe01 	bl	80011a0 <HAL_GetTick>
 800159e:	1b80      	subs	r0, r0, r6
 80015a0:	2864      	cmp	r0, #100	; 0x64
 80015a2:	d9f7      	bls.n	8001594 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80015a4:	2003      	movs	r0, #3
 80015a6:	e7e7      	b.n	8001578 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a8:	b99b      	cbnz	r3, 80015d2 <HAL_RCC_OscConfig+0xb2>
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b0:	6023      	str	r3, [r4, #0]
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80015ba:	f7ff fdf1 	bl	80011a0 <HAL_GetTick>
 80015be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c0:	6823      	ldr	r3, [r4, #0]
 80015c2:	0399      	lsls	r1, r3, #14
 80015c4:	d5b2      	bpl.n	800152c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c6:	f7ff fdeb 	bl	80011a0 <HAL_GetTick>
 80015ca:	1b80      	subs	r0, r0, r6
 80015cc:	2864      	cmp	r0, #100	; 0x64
 80015ce:	d9f7      	bls.n	80015c0 <HAL_RCC_OscConfig+0xa0>
 80015d0:	e7e8      	b.n	80015a4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	d103      	bne.n	80015e2 <HAL_RCC_OscConfig+0xc2>
 80015da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015de:	6023      	str	r3, [r4, #0]
 80015e0:	e7d1      	b.n	8001586 <HAL_RCC_OscConfig+0x66>
 80015e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e6:	6023      	str	r3, [r4, #0]
 80015e8:	6823      	ldr	r3, [r4, #0]
 80015ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ee:	e7cd      	b.n	800158c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015f0:	4c67      	ldr	r4, [pc, #412]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80015f2:	6863      	ldr	r3, [r4, #4]
 80015f4:	f013 0f0c 	tst.w	r3, #12
 80015f8:	d007      	beq.n	800160a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015fa:	6863      	ldr	r3, [r4, #4]
 80015fc:	f003 030c 	and.w	r3, r3, #12
 8001600:	2b08      	cmp	r3, #8
 8001602:	d110      	bne.n	8001626 <HAL_RCC_OscConfig+0x106>
 8001604:	6863      	ldr	r3, [r4, #4]
 8001606:	03da      	lsls	r2, r3, #15
 8001608:	d40d      	bmi.n	8001626 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	079b      	lsls	r3, r3, #30
 800160e:	d502      	bpl.n	8001616 <HAL_RCC_OscConfig+0xf6>
 8001610:	692b      	ldr	r3, [r5, #16]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d1af      	bne.n	8001576 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	696a      	ldr	r2, [r5, #20]
 800161a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800161e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001622:	6023      	str	r3, [r4, #0]
 8001624:	e785      	b.n	8001532 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001626:	692a      	ldr	r2, [r5, #16]
 8001628:	4b5a      	ldr	r3, [pc, #360]	; (8001794 <HAL_RCC_OscConfig+0x274>)
 800162a:	b16a      	cbz	r2, 8001648 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001630:	f7ff fdb6 	bl	80011a0 <HAL_GetTick>
 8001634:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001636:	6823      	ldr	r3, [r4, #0]
 8001638:	079f      	lsls	r7, r3, #30
 800163a:	d4ec      	bmi.n	8001616 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800163c:	f7ff fdb0 	bl	80011a0 <HAL_GetTick>
 8001640:	1b80      	subs	r0, r0, r6
 8001642:	2802      	cmp	r0, #2
 8001644:	d9f7      	bls.n	8001636 <HAL_RCC_OscConfig+0x116>
 8001646:	e7ad      	b.n	80015a4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001648:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800164a:	f7ff fda9 	bl	80011a0 <HAL_GetTick>
 800164e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001650:	6823      	ldr	r3, [r4, #0]
 8001652:	0798      	lsls	r0, r3, #30
 8001654:	f57f af6d 	bpl.w	8001532 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001658:	f7ff fda2 	bl	80011a0 <HAL_GetTick>
 800165c:	1b80      	subs	r0, r0, r6
 800165e:	2802      	cmp	r0, #2
 8001660:	d9f6      	bls.n	8001650 <HAL_RCC_OscConfig+0x130>
 8001662:	e79f      	b.n	80015a4 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001664:	69aa      	ldr	r2, [r5, #24]
 8001666:	4c4a      	ldr	r4, [pc, #296]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 8001668:	4b4b      	ldr	r3, [pc, #300]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 800166a:	b1da      	cbz	r2, 80016a4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001670:	f7ff fd96 	bl	80011a0 <HAL_GetTick>
 8001674:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001678:	079b      	lsls	r3, r3, #30
 800167a:	d50d      	bpl.n	8001698 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800167c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001680:	4b46      	ldr	r3, [pc, #280]	; (800179c <HAL_RCC_OscConfig+0x27c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	fbb3 f3f2 	udiv	r3, r3, r2
 8001688:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800168a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800168c:	9b01      	ldr	r3, [sp, #4]
 800168e:	1e5a      	subs	r2, r3, #1
 8001690:	9201      	str	r2, [sp, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f9      	bne.n	800168a <HAL_RCC_OscConfig+0x16a>
 8001696:	e750      	b.n	800153a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001698:	f7ff fd82 	bl	80011a0 <HAL_GetTick>
 800169c:	1b80      	subs	r0, r0, r6
 800169e:	2802      	cmp	r0, #2
 80016a0:	d9e9      	bls.n	8001676 <HAL_RCC_OscConfig+0x156>
 80016a2:	e77f      	b.n	80015a4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80016a4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016a6:	f7ff fd7b 	bl	80011a0 <HAL_GetTick>
 80016aa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016ae:	079f      	lsls	r7, r3, #30
 80016b0:	f57f af43 	bpl.w	800153a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff fd74 	bl	80011a0 <HAL_GetTick>
 80016b8:	1b80      	subs	r0, r0, r6
 80016ba:	2802      	cmp	r0, #2
 80016bc:	d9f6      	bls.n	80016ac <HAL_RCC_OscConfig+0x18c>
 80016be:	e771      	b.n	80015a4 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c0:	4c33      	ldr	r4, [pc, #204]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80016c2:	69e3      	ldr	r3, [r4, #28]
 80016c4:	00d8      	lsls	r0, r3, #3
 80016c6:	d424      	bmi.n	8001712 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80016c8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	69e3      	ldr	r3, [r4, #28]
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	61e3      	str	r3, [r4, #28]
 80016d2:	69e3      	ldr	r3, [r4, #28]
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016dc:	4e30      	ldr	r6, [pc, #192]	; (80017a0 <HAL_RCC_OscConfig+0x280>)
 80016de:	6833      	ldr	r3, [r6, #0]
 80016e0:	05d9      	lsls	r1, r3, #23
 80016e2:	d518      	bpl.n	8001716 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e4:	68eb      	ldr	r3, [r5, #12]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d126      	bne.n	8001738 <HAL_RCC_OscConfig+0x218>
 80016ea:	6a23      	ldr	r3, [r4, #32]
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80016f2:	f7ff fd55 	bl	80011a0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80016fa:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fc:	6a23      	ldr	r3, [r4, #32]
 80016fe:	079b      	lsls	r3, r3, #30
 8001700:	d53f      	bpl.n	8001782 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001702:	2f00      	cmp	r7, #0
 8001704:	f43f af1d 	beq.w	8001542 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001708:	69e3      	ldr	r3, [r4, #28]
 800170a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800170e:	61e3      	str	r3, [r4, #28]
 8001710:	e717      	b.n	8001542 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001712:	2700      	movs	r7, #0
 8001714:	e7e2      	b.n	80016dc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001716:	6833      	ldr	r3, [r6, #0]
 8001718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800171e:	f7ff fd3f 	bl	80011a0 <HAL_GetTick>
 8001722:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	6833      	ldr	r3, [r6, #0]
 8001726:	05da      	lsls	r2, r3, #23
 8001728:	d4dc      	bmi.n	80016e4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172a:	f7ff fd39 	bl	80011a0 <HAL_GetTick>
 800172e:	eba0 0008 	sub.w	r0, r0, r8
 8001732:	2864      	cmp	r0, #100	; 0x64
 8001734:	d9f6      	bls.n	8001724 <HAL_RCC_OscConfig+0x204>
 8001736:	e735      	b.n	80015a4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001738:	b9ab      	cbnz	r3, 8001766 <HAL_RCC_OscConfig+0x246>
 800173a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	6223      	str	r3, [r4, #32]
 8001746:	6a23      	ldr	r3, [r4, #32]
 8001748:	f023 0304 	bic.w	r3, r3, #4
 800174c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800174e:	f7ff fd27 	bl	80011a0 <HAL_GetTick>
 8001752:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001754:	6a23      	ldr	r3, [r4, #32]
 8001756:	0798      	lsls	r0, r3, #30
 8001758:	d5d3      	bpl.n	8001702 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7ff fd21 	bl	80011a0 <HAL_GetTick>
 800175e:	1b80      	subs	r0, r0, r6
 8001760:	4540      	cmp	r0, r8
 8001762:	d9f7      	bls.n	8001754 <HAL_RCC_OscConfig+0x234>
 8001764:	e71e      	b.n	80015a4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001766:	2b05      	cmp	r3, #5
 8001768:	6a23      	ldr	r3, [r4, #32]
 800176a:	d103      	bne.n	8001774 <HAL_RCC_OscConfig+0x254>
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6223      	str	r3, [r4, #32]
 8001772:	e7ba      	b.n	80016ea <HAL_RCC_OscConfig+0x1ca>
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	6223      	str	r3, [r4, #32]
 800177a:	6a23      	ldr	r3, [r4, #32]
 800177c:	f023 0304 	bic.w	r3, r3, #4
 8001780:	e7b6      	b.n	80016f0 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7ff fd0d 	bl	80011a0 <HAL_GetTick>
 8001786:	eba0 0008 	sub.w	r0, r0, r8
 800178a:	42b0      	cmp	r0, r6
 800178c:	d9b6      	bls.n	80016fc <HAL_RCC_OscConfig+0x1dc>
 800178e:	e709      	b.n	80015a4 <HAL_RCC_OscConfig+0x84>
 8001790:	40021000 	.word	0x40021000
 8001794:	42420000 	.word	0x42420000
 8001798:	42420480 	.word	0x42420480
 800179c:	20000088 	.word	0x20000088
 80017a0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a4:	4c22      	ldr	r4, [pc, #136]	; (8001830 <HAL_RCC_OscConfig+0x310>)
 80017a6:	6863      	ldr	r3, [r4, #4]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	f43f aee2 	beq.w	8001576 <HAL_RCC_OscConfig+0x56>
 80017b2:	2300      	movs	r3, #0
 80017b4:	4e1f      	ldr	r6, [pc, #124]	; (8001834 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80017b8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ba:	d12b      	bne.n	8001814 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80017bc:	f7ff fcf0 	bl	80011a0 <HAL_GetTick>
 80017c0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c2:	6823      	ldr	r3, [r4, #0]
 80017c4:	0199      	lsls	r1, r3, #6
 80017c6:	d41f      	bmi.n	8001808 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017c8:	6a2b      	ldr	r3, [r5, #32]
 80017ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ce:	d105      	bne.n	80017dc <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017d0:	6862      	ldr	r2, [r4, #4]
 80017d2:	68a9      	ldr	r1, [r5, #8]
 80017d4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80017d8:	430a      	orrs	r2, r1
 80017da:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017dc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80017de:	6862      	ldr	r2, [r4, #4]
 80017e0:	430b      	orrs	r3, r1
 80017e2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80017e6:	4313      	orrs	r3, r2
 80017e8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80017ea:	2301      	movs	r3, #1
 80017ec:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80017ee:	f7ff fcd7 	bl	80011a0 <HAL_GetTick>
 80017f2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017f4:	6823      	ldr	r3, [r4, #0]
 80017f6:	019a      	lsls	r2, r3, #6
 80017f8:	f53f aea7 	bmi.w	800154a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff fcd0 	bl	80011a0 <HAL_GetTick>
 8001800:	1b40      	subs	r0, r0, r5
 8001802:	2802      	cmp	r0, #2
 8001804:	d9f6      	bls.n	80017f4 <HAL_RCC_OscConfig+0x2d4>
 8001806:	e6cd      	b.n	80015a4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff fcca 	bl	80011a0 <HAL_GetTick>
 800180c:	1bc0      	subs	r0, r0, r7
 800180e:	2802      	cmp	r0, #2
 8001810:	d9d7      	bls.n	80017c2 <HAL_RCC_OscConfig+0x2a2>
 8001812:	e6c7      	b.n	80015a4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001814:	f7ff fcc4 	bl	80011a0 <HAL_GetTick>
 8001818:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	019b      	lsls	r3, r3, #6
 800181e:	f57f ae94 	bpl.w	800154a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001822:	f7ff fcbd 	bl	80011a0 <HAL_GetTick>
 8001826:	1b40      	subs	r0, r0, r5
 8001828:	2802      	cmp	r0, #2
 800182a:	d9f6      	bls.n	800181a <HAL_RCC_OscConfig+0x2fa>
 800182c:	e6ba      	b.n	80015a4 <HAL_RCC_OscConfig+0x84>
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000
 8001834:	42420060 	.word	0x42420060

08001838 <HAL_RCC_GetSysClockFreq>:
{
 8001838:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800183a:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800183c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800183e:	ac02      	add	r4, sp, #8
 8001840:	f103 0510 	add.w	r5, r3, #16
 8001844:	4622      	mov	r2, r4
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	6859      	ldr	r1, [r3, #4]
 800184a:	3308      	adds	r3, #8
 800184c:	c203      	stmia	r2!, {r0, r1}
 800184e:	42ab      	cmp	r3, r5
 8001850:	4614      	mov	r4, r2
 8001852:	d1f7      	bne.n	8001844 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001854:	2301      	movs	r3, #1
 8001856:	f88d 3004 	strb.w	r3, [sp, #4]
 800185a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800185c:	4911      	ldr	r1, [pc, #68]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800185e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001862:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001864:	f003 020c 	and.w	r2, r3, #12
 8001868:	2a08      	cmp	r2, #8
 800186a:	d117      	bne.n	800189c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800186c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001870:	a806      	add	r0, sp, #24
 8001872:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001874:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001876:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800187a:	d50c      	bpl.n	8001896 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800187c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800187e:	480a      	ldr	r0, [pc, #40]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001880:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001884:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001886:	aa06      	add	r2, sp, #24
 8001888:	4413      	add	r3, r2
 800188a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800188e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001892:	b007      	add	sp, #28
 8001894:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <HAL_RCC_GetSysClockFreq+0x74>)
 8001898:	4350      	muls	r0, r2
 800189a:	e7fa      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800189e:	e7f8      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x5a>
 80018a0:	08003fa0 	.word	0x08003fa0
 80018a4:	40021000 	.word	0x40021000
 80018a8:	007a1200 	.word	0x007a1200
 80018ac:	003d0900 	.word	0x003d0900

080018b0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80018b0:	4a4d      	ldr	r2, [pc, #308]	; (80019e8 <HAL_RCC_ClockConfig+0x138>)
{
 80018b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80018b6:	6813      	ldr	r3, [r2, #0]
{
 80018b8:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	428b      	cmp	r3, r1
{
 80018c0:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80018c2:	d328      	bcc.n	8001916 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c4:	682a      	ldr	r2, [r5, #0]
 80018c6:	0791      	lsls	r1, r2, #30
 80018c8:	d432      	bmi.n	8001930 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ca:	07d2      	lsls	r2, r2, #31
 80018cc:	d438      	bmi.n	8001940 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80018ce:	4a46      	ldr	r2, [pc, #280]	; (80019e8 <HAL_RCC_ClockConfig+0x138>)
 80018d0:	6813      	ldr	r3, [r2, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	429e      	cmp	r6, r3
 80018d8:	d373      	bcc.n	80019c2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018da:	682a      	ldr	r2, [r5, #0]
 80018dc:	4c43      	ldr	r4, [pc, #268]	; (80019ec <HAL_RCC_ClockConfig+0x13c>)
 80018de:	f012 0f04 	tst.w	r2, #4
 80018e2:	d179      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e4:	0713      	lsls	r3, r2, #28
 80018e6:	d506      	bpl.n	80018f6 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018e8:	6863      	ldr	r3, [r4, #4]
 80018ea:	692a      	ldr	r2, [r5, #16]
 80018ec:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80018f0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018f4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018f6:	f7ff ff9f 	bl	8001838 <HAL_RCC_GetSysClockFreq>
 80018fa:	6863      	ldr	r3, [r4, #4]
 80018fc:	4a3c      	ldr	r2, [pc, #240]	; (80019f0 <HAL_RCC_ClockConfig+0x140>)
 80018fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001902:	5cd3      	ldrb	r3, [r2, r3]
 8001904:	40d8      	lsrs	r0, r3
 8001906:	4b3b      	ldr	r3, [pc, #236]	; (80019f4 <HAL_RCC_ClockConfig+0x144>)
 8001908:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800190a:	2000      	movs	r0, #0
 800190c:	f7ff fc06 	bl	800111c <HAL_InitTick>
  return HAL_OK;
 8001910:	2000      	movs	r0, #0
}
 8001912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	6813      	ldr	r3, [r2, #0]
 8001918:	f023 0307 	bic.w	r3, r3, #7
 800191c:	430b      	orrs	r3, r1
 800191e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001920:	6813      	ldr	r3, [r2, #0]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	4299      	cmp	r1, r3
 8001928:	d0cc      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800192a:	2001      	movs	r0, #1
 800192c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001930:	492e      	ldr	r1, [pc, #184]	; (80019ec <HAL_RCC_ClockConfig+0x13c>)
 8001932:	68a8      	ldr	r0, [r5, #8]
 8001934:	684b      	ldr	r3, [r1, #4]
 8001936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800193a:	4303      	orrs	r3, r0
 800193c:	604b      	str	r3, [r1, #4]
 800193e:	e7c4      	b.n	80018ca <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001940:	686a      	ldr	r2, [r5, #4]
 8001942:	4c2a      	ldr	r4, [pc, #168]	; (80019ec <HAL_RCC_ClockConfig+0x13c>)
 8001944:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001948:	d11c      	bne.n	8001984 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194e:	d0ec      	beq.n	800192a <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001950:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001952:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001956:	f023 0303 	bic.w	r3, r3, #3
 800195a:	4313      	orrs	r3, r2
 800195c:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800195e:	f7ff fc1f 	bl	80011a0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001962:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001964:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001966:	2b01      	cmp	r3, #1
 8001968:	d114      	bne.n	8001994 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800196a:	6863      	ldr	r3, [r4, #4]
 800196c:	f003 030c 	and.w	r3, r3, #12
 8001970:	2b04      	cmp	r3, #4
 8001972:	d0ac      	beq.n	80018ce <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001974:	f7ff fc14 	bl	80011a0 <HAL_GetTick>
 8001978:	1bc0      	subs	r0, r0, r7
 800197a:	4540      	cmp	r0, r8
 800197c:	d9f5      	bls.n	800196a <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800197e:	2003      	movs	r0, #3
 8001980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001984:	2a02      	cmp	r2, #2
 8001986:	d102      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001988:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800198c:	e7df      	b.n	800194e <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198e:	f013 0f02 	tst.w	r3, #2
 8001992:	e7dc      	b.n	800194e <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001994:	2b02      	cmp	r3, #2
 8001996:	d10f      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001998:	6863      	ldr	r3, [r4, #4]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d095      	beq.n	80018ce <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a2:	f7ff fbfd 	bl	80011a0 <HAL_GetTick>
 80019a6:	1bc0      	subs	r0, r0, r7
 80019a8:	4540      	cmp	r0, r8
 80019aa:	d9f5      	bls.n	8001998 <HAL_RCC_ClockConfig+0xe8>
 80019ac:	e7e7      	b.n	800197e <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ae:	f7ff fbf7 	bl	80011a0 <HAL_GetTick>
 80019b2:	1bc0      	subs	r0, r0, r7
 80019b4:	4540      	cmp	r0, r8
 80019b6:	d8e2      	bhi.n	800197e <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019b8:	6863      	ldr	r3, [r4, #4]
 80019ba:	f013 0f0c 	tst.w	r3, #12
 80019be:	d1f6      	bne.n	80019ae <HAL_RCC_ClockConfig+0xfe>
 80019c0:	e785      	b.n	80018ce <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	6813      	ldr	r3, [r2, #0]
 80019c4:	f023 0307 	bic.w	r3, r3, #7
 80019c8:	4333      	orrs	r3, r6
 80019ca:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019cc:	6813      	ldr	r3, [r2, #0]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	429e      	cmp	r6, r3
 80019d4:	d1a9      	bne.n	800192a <HAL_RCC_ClockConfig+0x7a>
 80019d6:	e780      	b.n	80018da <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d8:	6863      	ldr	r3, [r4, #4]
 80019da:	68e9      	ldr	r1, [r5, #12]
 80019dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019e0:	430b      	orrs	r3, r1
 80019e2:	6063      	str	r3, [r4, #4]
 80019e4:	e77e      	b.n	80018e4 <HAL_RCC_ClockConfig+0x34>
 80019e6:	bf00      	nop
 80019e8:	40022000 	.word	0x40022000
 80019ec:	40021000 	.word	0x40021000
 80019f0:	08004013 	.word	0x08004013
 80019f4:	20000088 	.word	0x20000088

080019f8 <HAL_RCC_GetHCLKFreq>:
}
 80019f8:	4b01      	ldr	r3, [pc, #4]	; (8001a00 <HAL_RCC_GetHCLKFreq+0x8>)
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000088 	.word	0x20000088

08001a04 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
 8001a10:	4a03      	ldr	r2, [pc, #12]	; (8001a20 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a12:	6810      	ldr	r0, [r2, #0]
}    
 8001a14:	40d8      	lsrs	r0, r3
 8001a16:	4770      	bx	lr
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08004023 	.word	0x08004023
 8001a20:	20000088 	.word	0x20000088

08001a24 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001a2e:	5cd3      	ldrb	r3, [r2, r3]
 8001a30:	4a03      	ldr	r2, [pc, #12]	; (8001a40 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a32:	6810      	ldr	r0, [r2, #0]
} 
 8001a34:	40d8      	lsrs	r0, r3
 8001a36:	4770      	bx	lr
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	08004023 	.word	0x08004023
 8001a40:	20000088 	.word	0x20000088

08001a44 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a48:	4604      	mov	r4, r0
 8001a4a:	4688      	mov	r8, r1
 8001a4c:	4617      	mov	r7, r2
 8001a4e:	461d      	mov	r5, r3
 8001a50:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001a52:	6822      	ldr	r2, [r4, #0]
 8001a54:	6893      	ldr	r3, [r2, #8]
 8001a56:	ea38 0303 	bics.w	r3, r8, r3
 8001a5a:	bf0c      	ite	eq
 8001a5c:	2301      	moveq	r3, #1
 8001a5e:	2300      	movne	r3, #0
 8001a60:	429f      	cmp	r7, r3
 8001a62:	d102      	bne.n	8001a6a <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001a64:	2000      	movs	r0, #0
}
 8001a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001a6a:	1c6b      	adds	r3, r5, #1
 8001a6c:	d0f2      	beq.n	8001a54 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001a6e:	bb55      	cbnz	r5, 8001ac6 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a70:	6823      	ldr	r3, [r4, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001a78:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001a7a:	6862      	ldr	r2, [r4, #4]
 8001a7c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001a80:	d10a      	bne.n	8001a98 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001a82:	68a2      	ldr	r2, [r4, #8]
 8001a84:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001a88:	d002      	beq.n	8001a90 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8001a8a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001a8e:	d103      	bne.n	8001a98 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a96:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001a98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a9a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001a9e:	d109      	bne.n	8001ab4 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aa6:	0412      	lsls	r2, r2, #16
 8001aa8:	0c12      	lsrs	r2, r2, #16
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ab2:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001aba:	2300      	movs	r3, #0
 8001abc:	2003      	movs	r0, #3
 8001abe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001ac6:	f7ff fb6b 	bl	80011a0 <HAL_GetTick>
 8001aca:	1b80      	subs	r0, r0, r6
 8001acc:	4285      	cmp	r5, r0
 8001ace:	d8c0      	bhi.n	8001a52 <SPI_WaitFlagStateUntilTimeout+0xe>
 8001ad0:	e7ce      	b.n	8001a70 <SPI_WaitFlagStateUntilTimeout+0x2c>

08001ad2 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ad2:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	9200      	str	r2, [sp, #0]
 8001ad8:	2180      	movs	r1, #128	; 0x80
 8001ada:	2200      	movs	r2, #0
{
 8001adc:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ade:	f7ff ffb1 	bl	8001a44 <SPI_WaitFlagStateUntilTimeout>
 8001ae2:	b120      	cbz	r0, 8001aee <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8001ae4:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ae6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ae8:	f043 0320 	orr.w	r3, r3, #32
 8001aec:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8001aee:	b002      	add	sp, #8
 8001af0:	bd10      	pop	{r4, pc}

08001af2 <HAL_SPI_Transmit>:
{
 8001af2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001af6:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001af8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001afc:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001afe:	2b01      	cmp	r3, #1
{
 8001b00:	460d      	mov	r5, r1
 8001b02:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001b04:	f000 809c 	beq.w	8001c40 <HAL_SPI_Transmit+0x14e>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001b0e:	f7ff fb47 	bl	80011a0 <HAL_GetTick>
 8001b12:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8001b14:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001b18:	b2c0      	uxtb	r0, r0
 8001b1a:	2801      	cmp	r0, #1
 8001b1c:	f040 808e 	bne.w	8001c3c <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0U))
 8001b20:	2d00      	cmp	r5, #0
 8001b22:	d04e      	beq.n	8001bc2 <HAL_SPI_Transmit+0xd0>
 8001b24:	f1b8 0f00 	cmp.w	r8, #0
 8001b28:	d04b      	beq.n	8001bc2 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b34:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001b36:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001b3a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b3c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b3e:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b40:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b42:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b44:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b4a:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8001b4c:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001b50:	bf02      	ittt	eq
 8001b52:	681a      	ldreq	r2, [r3, #0]
 8001b54:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8001b58:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001b5e:	bf5e      	ittt	pl
 8001b60:	681a      	ldrpl	r2, [r3, #0]
 8001b62:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001b66:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b68:	68e2      	ldr	r2, [r4, #12]
 8001b6a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001b6e:	6862      	ldr	r2, [r4, #4]
 8001b70:	d138      	bne.n	8001be4 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001b72:	b11a      	cbz	r2, 8001b7c <HAL_SPI_Transmit+0x8a>
 8001b74:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001b76:	b292      	uxth	r2, r2
 8001b78:	2a01      	cmp	r2, #1
 8001b7a:	d106      	bne.n	8001b8a <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8001b7c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001b80:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8001b82:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b84:	3b01      	subs	r3, #1
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001b8a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	b993      	cbnz	r3, 8001bb6 <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001b90:	9700      	str	r7, [sp, #0]
 8001b92:	4633      	mov	r3, r6
 8001b94:	2201      	movs	r2, #1
 8001b96:	2102      	movs	r1, #2
 8001b98:	4620      	mov	r0, r4
 8001b9a:	f7ff ff53 	bl	8001a44 <SPI_WaitFlagStateUntilTimeout>
 8001b9e:	b978      	cbnz	r0, 8001bc0 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001ba0:	463a      	mov	r2, r7
 8001ba2:	4631      	mov	r1, r6
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f7ff ff94 	bl	8001ad2 <SPI_CheckFlag_BSY>
 8001baa:	2800      	cmp	r0, #0
 8001bac:	d038      	beq.n	8001c20 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bae:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8001bb0:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bb2:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8001bb4:	e005      	b.n	8001bc2 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	0790      	lsls	r0, r2, #30
 8001bbc:	d4de      	bmi.n	8001b7c <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001bbe:	b94e      	cbnz	r6, 8001bd4 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8001bc0:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001bce:	b004      	add	sp, #16
 8001bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001bd4:	1c71      	adds	r1, r6, #1
 8001bd6:	d0d8      	beq.n	8001b8a <HAL_SPI_Transmit+0x98>
 8001bd8:	f7ff fae2 	bl	80011a0 <HAL_GetTick>
 8001bdc:	1bc0      	subs	r0, r0, r7
 8001bde:	4286      	cmp	r6, r0
 8001be0:	d8d3      	bhi.n	8001b8a <HAL_SPI_Transmit+0x98>
 8001be2:	e7ed      	b.n	8001bc0 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001be4:	b11a      	cbz	r2, 8001bee <HAL_SPI_Transmit+0xfc>
 8001be6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001be8:	b292      	uxth	r2, r2
 8001bea:	2a01      	cmp	r2, #1
 8001bec:	d106      	bne.n	8001bfc <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001bee:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001bf2:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001bf4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001bfc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0c5      	beq.n	8001b90 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	0792      	lsls	r2, r2, #30
 8001c0a:	d4f0      	bmi.n	8001bee <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001c0c:	2e00      	cmp	r6, #0
 8001c0e:	d0d7      	beq.n	8001bc0 <HAL_SPI_Transmit+0xce>
 8001c10:	1c73      	adds	r3, r6, #1
 8001c12:	d0f3      	beq.n	8001bfc <HAL_SPI_Transmit+0x10a>
 8001c14:	f7ff fac4 	bl	80011a0 <HAL_GetTick>
 8001c18:	1bc0      	subs	r0, r0, r7
 8001c1a:	4286      	cmp	r6, r0
 8001c1c:	d8ee      	bhi.n	8001bfc <HAL_SPI_Transmit+0x10a>
 8001c1e:	e7cf      	b.n	8001bc0 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c20:	68a3      	ldr	r3, [r4, #8]
 8001c22:	b933      	cbnz	r3, 8001c32 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c24:	9303      	str	r3, [sp, #12]
 8001c26:	6823      	ldr	r3, [r4, #0]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	9203      	str	r2, [sp, #12]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	9303      	str	r3, [sp, #12]
 8001c30:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c32:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001c34:	3000      	adds	r0, #0
 8001c36:	bf18      	it	ne
 8001c38:	2001      	movne	r0, #1
 8001c3a:	e7c2      	b.n	8001bc2 <HAL_SPI_Transmit+0xd0>
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	e7c0      	b.n	8001bc2 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8001c40:	2002      	movs	r0, #2
 8001c42:	e7c4      	b.n	8001bce <HAL_SPI_Transmit+0xdc>

08001c44 <HAL_SPI_TransmitReceive>:
{
 8001c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c48:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8001c4a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001c4e:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8001c50:	2b01      	cmp	r3, #1
{
 8001c52:	4604      	mov	r4, r0
 8001c54:	460d      	mov	r5, r1
 8001c56:	4616      	mov	r6, r2
 8001c58:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8001c5a:	f000 80ee 	beq.w	8001e3a <HAL_SPI_TransmitReceive+0x1f6>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001c64:	f7ff fa9c 	bl	80011a0 <HAL_GetTick>
  tmp  = hspi->State;
 8001c68:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8001c6c:	4680      	mov	r8, r0
  tmp  = hspi->State;
 8001c6e:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001c70:	2b01      	cmp	r3, #1
  tmp1 = hspi->Init.Mode;
 8001c72:	6861      	ldr	r1, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001c74:	d00a      	beq.n	8001c8c <HAL_SPI_TransmitReceive+0x48>
 8001c76:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001c7a:	f040 80dc 	bne.w	8001e36 <HAL_SPI_TransmitReceive+0x1f2>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001c7e:	68a2      	ldr	r2, [r4, #8]
 8001c80:	2a00      	cmp	r2, #0
 8001c82:	f040 80d8 	bne.w	8001e36 <HAL_SPI_TransmitReceive+0x1f2>
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	f040 80d5 	bne.w	8001e36 <HAL_SPI_TransmitReceive+0x1f2>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c8c:	2d00      	cmp	r5, #0
 8001c8e:	d04e      	beq.n	8001d2e <HAL_SPI_TransmitReceive+0xea>
 8001c90:	2e00      	cmp	r6, #0
 8001c92:	d04c      	beq.n	8001d2e <HAL_SPI_TransmitReceive+0xea>
 8001c94:	f1b9 0f00 	cmp.w	r9, #0
 8001c98:	d049      	beq.n	8001d2e <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8001c9a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c9e:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8001ca0:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ca2:	bf04      	itt	eq
 8001ca4:	2305      	moveq	r3, #5
 8001ca6:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001cae:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001cb0:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cb2:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001cb4:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001cb8:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cbc:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001cbe:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cc2:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001cc4:	bf58      	it	pl
 8001cc6:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001cc8:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001cca:	bf58      	it	pl
 8001ccc:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001cd0:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001cd4:	bf58      	it	pl
 8001cd6:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001cd8:	68e2      	ldr	r2, [r4, #12]
 8001cda:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001cde:	d15d      	bne.n	8001d9c <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001ce0:	b119      	cbz	r1, 8001cea <HAL_SPI_TransmitReceive+0xa6>
 8001ce2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001ce4:	b292      	uxth	r2, r2
 8001ce6:	2a01      	cmp	r2, #1
 8001ce8:	d106      	bne.n	8001cf8 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001cea:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001cee:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001cf0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001cf8:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cfc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b9bb      	cbnz	r3, 8001d32 <HAL_SPI_TransmitReceive+0xee>
 8001d02:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	b9a3      	cbnz	r3, 8001d32 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001d08:	f8cd 8000 	str.w	r8, [sp]
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	2201      	movs	r2, #1
 8001d10:	2102      	movs	r1, #2
 8001d12:	4620      	mov	r0, r4
 8001d14:	f7ff fe96 	bl	8001a44 <SPI_WaitFlagStateUntilTimeout>
 8001d18:	2800      	cmp	r0, #0
 8001d1a:	d135      	bne.n	8001d88 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001d1c:	4642      	mov	r2, r8
 8001d1e:	4639      	mov	r1, r7
 8001d20:	4620      	mov	r0, r4
 8001d22:	f7ff fed6 	bl	8001ad2 <SPI_CheckFlag_BSY>
 8001d26:	2800      	cmp	r0, #0
 8001d28:	d07a      	beq.n	8001e20 <HAL_SPI_TransmitReceive+0x1dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001d2e:	2001      	movs	r0, #1
 8001d30:	e02b      	b.n	8001d8a <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001d32:	f1b9 0f00 	cmp.w	r9, #0
 8001d36:	d00f      	beq.n	8001d58 <HAL_SPI_TransmitReceive+0x114>
 8001d38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	b163      	cbz	r3, 8001d58 <HAL_SPI_TransmitReceive+0x114>
 8001d3e:	6823      	ldr	r3, [r4, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	0791      	lsls	r1, r2, #30
 8001d44:	d508      	bpl.n	8001d58 <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 8001d46:	f04f 0900 	mov.w	r9, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001d4a:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001d4e:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001d50:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001d58:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	b163      	cbz	r3, 8001d78 <HAL_SPI_TransmitReceive+0x134>
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	07d2      	lsls	r2, r2, #31
 8001d64:	d508      	bpl.n	8001d78 <HAL_SPI_TransmitReceive+0x134>
        txallowed = 1U;
 8001d66:	f04f 0901 	mov.w	r9, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8001d70:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001d78:	1c78      	adds	r0, r7, #1
 8001d7a:	d0bf      	beq.n	8001cfc <HAL_SPI_TransmitReceive+0xb8>
 8001d7c:	f7ff fa10 	bl	80011a0 <HAL_GetTick>
 8001d80:	eba0 0008 	sub.w	r0, r0, r8
 8001d84:	4287      	cmp	r7, r0
 8001d86:	d8b9      	bhi.n	8001cfc <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8001d88:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001d90:	2300      	movs	r3, #0
 8001d92:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001d96:	b005      	add	sp, #20
 8001d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001d9c:	b119      	cbz	r1, 8001da6 <HAL_SPI_TransmitReceive+0x162>
 8001d9e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001da0:	b292      	uxth	r2, r2
 8001da2:	2a01      	cmp	r2, #1
 8001da4:	d106      	bne.n	8001db4 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8001da6:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001daa:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8001dac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001db4:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001db8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	b91b      	cbnz	r3, 8001dc6 <HAL_SPI_TransmitReceive+0x182>
 8001dbe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0a0      	beq.n	8001d08 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001dc6:	f1b9 0f00 	cmp.w	r9, #0
 8001dca:	d00f      	beq.n	8001dec <HAL_SPI_TransmitReceive+0x1a8>
 8001dcc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	b163      	cbz	r3, 8001dec <HAL_SPI_TransmitReceive+0x1a8>
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	0791      	lsls	r1, r2, #30
 8001dd8:	d508      	bpl.n	8001dec <HAL_SPI_TransmitReceive+0x1a8>
        txallowed = 0U;
 8001dda:	f04f 0900 	mov.w	r9, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001dde:	782a      	ldrb	r2, [r5, #0]
 8001de0:	3501      	adds	r5, #1
 8001de2:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001de4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001dec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	b16b      	cbz	r3, 8001e0e <HAL_SPI_TransmitReceive+0x1ca>
 8001df2:	6823      	ldr	r3, [r4, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	07d2      	lsls	r2, r2, #31
 8001df8:	d509      	bpl.n	8001e0e <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8001dfa:	f04f 0901 	mov.w	r9, #1
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	3601      	adds	r6, #1
 8001e02:	f806 3c01 	strb.w	r3, [r6, #-1]
        hspi->RxXferCount--;
 8001e06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001e0e:	1c7b      	adds	r3, r7, #1
 8001e10:	d0d2      	beq.n	8001db8 <HAL_SPI_TransmitReceive+0x174>
 8001e12:	f7ff f9c5 	bl	80011a0 <HAL_GetTick>
 8001e16:	eba0 0008 	sub.w	r0, r0, r8
 8001e1a:	4287      	cmp	r7, r0
 8001e1c:	d8cc      	bhi.n	8001db8 <HAL_SPI_TransmitReceive+0x174>
 8001e1e:	e7b3      	b.n	8001d88 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e20:	68a3      	ldr	r3, [r4, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1b1      	bne.n	8001d8a <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e26:	6823      	ldr	r3, [r4, #0]
 8001e28:	9003      	str	r0, [sp, #12]
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	9203      	str	r2, [sp, #12]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	9303      	str	r3, [sp, #12]
 8001e32:	9b03      	ldr	r3, [sp, #12]
 8001e34:	e7a9      	b.n	8001d8a <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8001e36:	2002      	movs	r0, #2
 8001e38:	e7a7      	b.n	8001d8a <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8001e3a:	2002      	movs	r0, #2
 8001e3c:	e7ab      	b.n	8001d96 <HAL_SPI_TransmitReceive+0x152>

08001e3e <HAL_SPI_Receive>:
{
 8001e3e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001e42:	461e      	mov	r6, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e44:	6843      	ldr	r3, [r0, #4]
{
 8001e46:	4604      	mov	r4, r0
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8001e4c:	460d      	mov	r5, r1
 8001e4e:	4690      	mov	r8, r2
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e50:	d10c      	bne.n	8001e6c <HAL_SPI_Receive+0x2e>
 8001e52:	6883      	ldr	r3, [r0, #8]
 8001e54:	b953      	cbnz	r3, 8001e6c <HAL_SPI_Receive+0x2e>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001e56:	2304      	movs	r3, #4
 8001e58:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	9600      	str	r6, [sp, #0]
 8001e60:	460a      	mov	r2, r1
 8001e62:	f7ff feef 	bl	8001c44 <HAL_SPI_TransmitReceive>
}
 8001e66:	b002      	add	sp, #8
 8001e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8001e6c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	f000 8081 	beq.w	8001f78 <HAL_SPI_Receive+0x13a>
 8001e76:	2301      	movs	r3, #1
 8001e78:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001e7c:	f7ff f990 	bl	80011a0 <HAL_GetTick>
 8001e80:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8001e82:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001e86:	b2c0      	uxtb	r0, r0
 8001e88:	2801      	cmp	r0, #1
 8001e8a:	d173      	bne.n	8001f74 <HAL_SPI_Receive+0x136>
  if((pData == NULL ) || (Size == 0U))
 8001e8c:	2d00      	cmp	r5, #0
 8001e8e:	d058      	beq.n	8001f42 <HAL_SPI_Receive+0x104>
 8001e90:	f1b8 0f00 	cmp.w	r8, #0
 8001e94:	d055      	beq.n	8001f42 <HAL_SPI_Receive+0x104>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e96:	2304      	movs	r3, #4
 8001e98:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001ea0:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8001ea2:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8001ea6:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001ea8:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001eaa:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001eac:	6463      	str	r3, [r4, #68]	; 0x44
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eae:	68a3      	ldr	r3, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001eb0:	63a5      	str	r5, [r4, #56]	; 0x38
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eb6:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferSize  = Size;
 8001eb8:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 8001ebc:	bf02      	ittt	eq
 8001ebe:	681a      	ldreq	r2, [r3, #0]
 8001ec0:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8001ec4:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001eca:	bf5e      	ittt	pl
 8001ecc:	681a      	ldrpl	r2, [r3, #0]
 8001ece:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001ed2:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001ed4:	68e3      	ldr	r3, [r4, #12]
 8001ed6:	b1cb      	cbz	r3, 8001f0c <HAL_SPI_Receive+0xce>
    while(hspi->RxXferCount > 0U)
 8001ed8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	b1d3      	cbz	r3, 8001f14 <HAL_SPI_Receive+0xd6>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	07d2      	lsls	r2, r2, #31
 8001ee4:	d53c      	bpl.n	8001f60 <HAL_SPI_Receive+0x122>
        *((uint16_t*)pData) = hspi->Instance->DR;
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 8001eec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001ef4:	e7f0      	b.n	8001ed8 <HAL_SPI_Receive+0x9a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ef6:	6823      	ldr	r3, [r4, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	07d0      	lsls	r0, r2, #31
 8001efc:	d51f      	bpl.n	8001f3e <HAL_SPI_Receive+0x100>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8001efe:	7b1b      	ldrb	r3, [r3, #12]
 8001f00:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 8001f04:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while(hspi->RxXferCount > 0U)
 8001f0c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f0      	bne.n	8001ef6 <HAL_SPI_Receive+0xb8>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f14:	6863      	ldr	r3, [r4, #4]
 8001f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f1a:	d10b      	bne.n	8001f34 <HAL_SPI_Receive+0xf6>
 8001f1c:	68a3      	ldr	r3, [r4, #8]
 8001f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f22:	d002      	beq.n	8001f2a <HAL_SPI_Receive+0xec>
 8001f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f28:	d104      	bne.n	8001f34 <HAL_SPI_Receive+0xf6>
    __HAL_SPI_DISABLE(hspi);
 8001f2a:	6822      	ldr	r2, [r4, #0]
 8001f2c:	6813      	ldr	r3, [r2, #0]
 8001f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f32:	6013      	str	r3, [r2, #0]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f34:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001f36:	3000      	adds	r0, #0
 8001f38:	bf18      	it	ne
 8001f3a:	2001      	movne	r0, #1
 8001f3c:	e001      	b.n	8001f42 <HAL_SPI_Receive+0x104>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001f3e:	b93e      	cbnz	r6, 8001f50 <HAL_SPI_Receive+0x112>
          errorcode = HAL_TIMEOUT;
 8001f40:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8001f4e:	e78a      	b.n	8001e66 <HAL_SPI_Receive+0x28>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001f50:	1c71      	adds	r1, r6, #1
 8001f52:	d0db      	beq.n	8001f0c <HAL_SPI_Receive+0xce>
 8001f54:	f7ff f924 	bl	80011a0 <HAL_GetTick>
 8001f58:	1bc0      	subs	r0, r0, r7
 8001f5a:	4286      	cmp	r6, r0
 8001f5c:	d8d6      	bhi.n	8001f0c <HAL_SPI_Receive+0xce>
 8001f5e:	e7ef      	b.n	8001f40 <HAL_SPI_Receive+0x102>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001f60:	2e00      	cmp	r6, #0
 8001f62:	d0ed      	beq.n	8001f40 <HAL_SPI_Receive+0x102>
 8001f64:	1c73      	adds	r3, r6, #1
 8001f66:	d0b7      	beq.n	8001ed8 <HAL_SPI_Receive+0x9a>
 8001f68:	f7ff f91a 	bl	80011a0 <HAL_GetTick>
 8001f6c:	1bc0      	subs	r0, r0, r7
 8001f6e:	4286      	cmp	r6, r0
 8001f70:	d8b2      	bhi.n	8001ed8 <HAL_SPI_Receive+0x9a>
 8001f72:	e7e5      	b.n	8001f40 <HAL_SPI_Receive+0x102>
    errorcode = HAL_BUSY;
 8001f74:	2002      	movs	r0, #2
 8001f76:	e7e4      	b.n	8001f42 <HAL_SPI_Receive+0x104>
  __HAL_LOCK(hspi);
 8001f78:	2002      	movs	r0, #2
 8001f7a:	e774      	b.n	8001e66 <HAL_SPI_Receive+0x28>

08001f7c <HAL_SPI_GetState>:
  return hspi->State;
 8001f7c:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8001f80:	4770      	bx	lr

08001f82 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f82:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001f84:	4604      	mov	r4, r0
 8001f86:	2800      	cmp	r0, #0
 8001f88:	d034      	beq.n	8001ff4 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001f8e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001f92:	b90b      	cbnz	r3, 8001f98 <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f94:	f001 f892 	bl	80030bc <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f98:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f9a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f9c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001fa0:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001fa2:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fa8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001faa:	6863      	ldr	r3, [r4, #4]
 8001fac:	69a2      	ldr	r2, [r4, #24]
 8001fae:	4303      	orrs	r3, r0
 8001fb0:	68e0      	ldr	r0, [r4, #12]
 8001fb2:	4303      	orrs	r3, r0
 8001fb4:	6920      	ldr	r0, [r4, #16]
 8001fb6:	4303      	orrs	r3, r0
 8001fb8:	6960      	ldr	r0, [r4, #20]
 8001fba:	4303      	orrs	r3, r0
 8001fbc:	69e0      	ldr	r0, [r4, #28]
 8001fbe:	4303      	orrs	r3, r0
 8001fc0:	6a20      	ldr	r0, [r4, #32]
 8001fc2:	4303      	orrs	r3, r0
 8001fc4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001fc6:	4303      	orrs	r3, r0
 8001fc8:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001fcc:	4303      	orrs	r3, r0
 8001fce:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001fd0:	0c12      	lsrs	r2, r2, #16
 8001fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fd4:	f002 0204 	and.w	r2, r2, #4
 8001fd8:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001fda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001fdc:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001fde:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fe0:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fe2:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fe4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fe8:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001fea:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fec:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001fee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8001ff2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ff4:	2001      	movs	r0, #1
}
 8001ff6:	bd10      	pop	{r4, pc}

08001ff8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ff8:	6803      	ldr	r3, [r0, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002000:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002002:	695a      	ldr	r2, [r3, #20]
 8002004:	f022 0201 	bic.w	r2, r2, #1
 8002008:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800200a:	2320      	movs	r3, #32
 800200c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002010:	4770      	bx	lr
	...

08002014 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002018:	6805      	ldr	r5, [r0, #0]
 800201a:	68c2      	ldr	r2, [r0, #12]
 800201c:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800201e:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002020:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002024:	4313      	orrs	r3, r2
 8002026:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002028:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 800202a:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800202c:	430b      	orrs	r3, r1
 800202e:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002030:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002034:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002038:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800203a:	4313      	orrs	r3, r2
 800203c:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800203e:	696b      	ldr	r3, [r5, #20]
 8002040:	6982      	ldr	r2, [r0, #24]
 8002042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002046:	4313      	orrs	r3, r2
 8002048:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800204a:	4b40      	ldr	r3, [pc, #256]	; (800214c <UART_SetConfig+0x138>)
{
 800204c:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 800204e:	429d      	cmp	r5, r3
 8002050:	f04f 0419 	mov.w	r4, #25
 8002054:	d146      	bne.n	80020e4 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002056:	f7ff fce5 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
 800205a:	fb04 f300 	mul.w	r3, r4, r0
 800205e:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002062:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002066:	00b6      	lsls	r6, r6, #2
 8002068:	fbb3 f3f6 	udiv	r3, r3, r6
 800206c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002070:	011e      	lsls	r6, r3, #4
 8002072:	f7ff fcd7 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
 8002076:	4360      	muls	r0, r4
 8002078:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	fbb0 f7f3 	udiv	r7, r0, r3
 8002082:	f7ff fccf 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
 8002086:	4360      	muls	r0, r4
 8002088:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002092:	fbb3 f3f8 	udiv	r3, r3, r8
 8002096:	fb08 7313 	mls	r3, r8, r3, r7
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	3332      	adds	r3, #50	; 0x32
 800209e:	fbb3 f3f8 	udiv	r3, r3, r8
 80020a2:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80020a6:	f7ff fcbd 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
 80020aa:	4360      	muls	r0, r4
 80020ac:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80020b0:	0092      	lsls	r2, r2, #2
 80020b2:	fbb0 faf2 	udiv	sl, r0, r2
 80020b6:	f7ff fcb5 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80020ba:	4360      	muls	r0, r4
 80020bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c6:	fbb3 f3f8 	udiv	r3, r3, r8
 80020ca:	fb08 a313 	mls	r3, r8, r3, sl
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	3332      	adds	r3, #50	; 0x32
 80020d2:	fbb3 f3f8 	udiv	r3, r3, r8
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	433b      	orrs	r3, r7
 80020dc:	4433      	add	r3, r6
 80020de:	60ab      	str	r3, [r5, #8]
 80020e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020e4:	f7ff fc8e 	bl	8001a04 <HAL_RCC_GetPCLK1Freq>
 80020e8:	fb04 f300 	mul.w	r3, r4, r0
 80020ec:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80020f0:	f04f 0864 	mov.w	r8, #100	; 0x64
 80020f4:	00b6      	lsls	r6, r6, #2
 80020f6:	fbb3 f3f6 	udiv	r3, r3, r6
 80020fa:	fbb3 f3f8 	udiv	r3, r3, r8
 80020fe:	011e      	lsls	r6, r3, #4
 8002100:	f7ff fc80 	bl	8001a04 <HAL_RCC_GetPCLK1Freq>
 8002104:	4360      	muls	r0, r4
 8002106:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	fbb0 f7f3 	udiv	r7, r0, r3
 8002110:	f7ff fc78 	bl	8001a04 <HAL_RCC_GetPCLK1Freq>
 8002114:	4360      	muls	r0, r4
 8002116:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002120:	fbb3 f3f8 	udiv	r3, r3, r8
 8002124:	fb08 7313 	mls	r3, r8, r3, r7
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	3332      	adds	r3, #50	; 0x32
 800212c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002130:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002134:	f7ff fc66 	bl	8001a04 <HAL_RCC_GetPCLK1Freq>
 8002138:	4360      	muls	r0, r4
 800213a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800213e:	0092      	lsls	r2, r2, #2
 8002140:	fbb0 faf2 	udiv	sl, r0, r2
 8002144:	f7ff fc5e 	bl	8001a04 <HAL_RCC_GetPCLK1Freq>
 8002148:	e7b7      	b.n	80020ba <UART_SetConfig+0xa6>
 800214a:	bf00      	nop
 800214c:	40013800 	.word	0x40013800

08002150 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002152:	4604      	mov	r4, r0
 8002154:	460e      	mov	r6, r1
 8002156:	4617      	mov	r7, r2
 8002158:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800215a:	6821      	ldr	r1, [r4, #0]
 800215c:	680b      	ldr	r3, [r1, #0]
 800215e:	ea36 0303 	bics.w	r3, r6, r3
 8002162:	d101      	bne.n	8002168 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002164:	2000      	movs	r0, #0
}
 8002166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002168:	1c6b      	adds	r3, r5, #1
 800216a:	d0f7      	beq.n	800215c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800216c:	b995      	cbnz	r5, 8002194 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800216e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002170:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002178:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800217a:	695a      	ldr	r2, [r3, #20]
 800217c:	f022 0201 	bic.w	r2, r2, #1
 8002180:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002182:	2320      	movs	r3, #32
 8002184:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002188:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800218c:	2300      	movs	r3, #0
 800218e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002194:	f7ff f804 	bl	80011a0 <HAL_GetTick>
 8002198:	1bc0      	subs	r0, r0, r7
 800219a:	4285      	cmp	r5, r0
 800219c:	d2dd      	bcs.n	800215a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800219e:	e7e6      	b.n	800216e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080021a0 <HAL_UART_Init>:
{
 80021a0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80021a2:	4604      	mov	r4, r0
 80021a4:	b340      	cbz	r0, 80021f8 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80021a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80021aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021ae:	b91b      	cbnz	r3, 80021b8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80021b0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80021b4:	f000 ffb6 	bl	8003124 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80021b8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80021ba:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80021bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80021c0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80021c2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80021c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021c8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80021ca:	f7ff ff23 	bl	8002014 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ce:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021e0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021e8:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80021ea:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ec:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80021ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80021f2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80021f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021f8:	2001      	movs	r0, #1
}
 80021fa:	bd10      	pop	{r4, pc}

080021fc <HAL_UART_Transmit>:
{
 80021fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002200:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8002202:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8002206:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8002208:	2b20      	cmp	r3, #32
{
 800220a:	460d      	mov	r5, r1
 800220c:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800220e:	d14e      	bne.n	80022ae <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8002210:	2900      	cmp	r1, #0
 8002212:	d049      	beq.n	80022a8 <HAL_UART_Transmit+0xac>
 8002214:	2a00      	cmp	r2, #0
 8002216:	d047      	beq.n	80022a8 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002218:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800221c:	2b01      	cmp	r3, #1
 800221e:	d046      	beq.n	80022ae <HAL_UART_Transmit+0xb2>
 8002220:	2301      	movs	r3, #1
 8002222:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002226:	2300      	movs	r3, #0
 8002228:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800222a:	2321      	movs	r3, #33	; 0x21
 800222c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002230:	f7fe ffb6 	bl	80011a0 <HAL_GetTick>
 8002234:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8002236:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800223a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800223e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002240:	b29b      	uxth	r3, r3
 8002242:	b96b      	cbnz	r3, 8002260 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002244:	463b      	mov	r3, r7
 8002246:	4632      	mov	r2, r6
 8002248:	2140      	movs	r1, #64	; 0x40
 800224a:	4620      	mov	r0, r4
 800224c:	f7ff ff80 	bl	8002150 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002250:	b9a8      	cbnz	r0, 800227e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8002252:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002254:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8002258:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800225c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002260:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002262:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002264:	3b01      	subs	r3, #1
 8002266:	b29b      	uxth	r3, r3
 8002268:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800226a:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800226c:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800226e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002272:	4620      	mov	r0, r4
 8002274:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002276:	d10e      	bne.n	8002296 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002278:	f7ff ff6a 	bl	8002150 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800227c:	b110      	cbz	r0, 8002284 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800227e:	2003      	movs	r0, #3
 8002280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002284:	882b      	ldrh	r3, [r5, #0]
 8002286:	6822      	ldr	r2, [r4, #0]
 8002288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800228c:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800228e:	6923      	ldr	r3, [r4, #16]
 8002290:	b943      	cbnz	r3, 80022a4 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8002292:	3502      	adds	r5, #2
 8002294:	e7d3      	b.n	800223e <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002296:	f7ff ff5b 	bl	8002150 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800229a:	2800      	cmp	r0, #0
 800229c:	d1ef      	bne.n	800227e <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800229e:	6823      	ldr	r3, [r4, #0]
 80022a0:	782a      	ldrb	r2, [r5, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	3501      	adds	r5, #1
 80022a6:	e7ca      	b.n	800223e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80022a8:	2001      	movs	r0, #1
 80022aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80022ae:	2002      	movs	r0, #2
}
 80022b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080022b4 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80022b4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d120      	bne.n	80022fe <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 80022bc:	b1e9      	cbz	r1, 80022fa <HAL_UART_Receive_IT+0x46>
 80022be:	b1e2      	cbz	r2, 80022fa <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80022c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d01a      	beq.n	80022fe <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80022c8:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80022ca:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022cc:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022ce:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022d2:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80022d6:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80022d8:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80022da:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80022dc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80022e0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80022e4:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80022e6:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 80022e8:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80022ea:	f041 0101 	orr.w	r1, r1, #1
 80022ee:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80022f0:	68d1      	ldr	r1, [r2, #12]
 80022f2:	f041 0120 	orr.w	r1, r1, #32
 80022f6:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80022f8:	4770      	bx	lr
      return HAL_ERROR;
 80022fa:	2001      	movs	r0, #1
 80022fc:	4770      	bx	lr
    return HAL_BUSY;
 80022fe:	2002      	movs	r0, #2
}
 8002300:	4770      	bx	lr

08002302 <HAL_UART_TxCpltCallback>:
 8002302:	4770      	bx	lr

08002304 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002304:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8002308:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800230a:	2b22      	cmp	r3, #34	; 0x22
 800230c:	d136      	bne.n	800237c <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800230e:	6883      	ldr	r3, [r0, #8]
 8002310:	6901      	ldr	r1, [r0, #16]
 8002312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002316:	6802      	ldr	r2, [r0, #0]
 8002318:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800231a:	d123      	bne.n	8002364 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800231c:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800231e:	b9e9      	cbnz	r1, 800235c <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002324:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002328:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 800232a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800232c:	3c01      	subs	r4, #1
 800232e:	b2a4      	uxth	r4, r4
 8002330:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002332:	b98c      	cbnz	r4, 8002358 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002334:	6803      	ldr	r3, [r0, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	f022 0220 	bic.w	r2, r2, #32
 800233c:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002344:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	f022 0201 	bic.w	r2, r2, #1
 800234c:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800234e:	2320      	movs	r3, #32
 8002350:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002354:	f000 fc80 	bl	8002c58 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8002358:	2000      	movs	r0, #0
}
 800235a:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	f823 2b01 	strh.w	r2, [r3], #1
 8002362:	e7e1      	b.n	8002328 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002364:	b921      	cbnz	r1, 8002370 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002366:	1c59      	adds	r1, r3, #1
 8002368:	6852      	ldr	r2, [r2, #4]
 800236a:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	e7dc      	b.n	800232a <UART_Receive_IT+0x26>
 8002370:	6852      	ldr	r2, [r2, #4]
 8002372:	1c59      	adds	r1, r3, #1
 8002374:	6281      	str	r1, [r0, #40]	; 0x28
 8002376:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800237a:	e7f7      	b.n	800236c <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800237c:	2002      	movs	r0, #2
 800237e:	bd10      	pop	{r4, pc}

08002380 <HAL_UART_ErrorCallback>:
 8002380:	4770      	bx	lr
	...

08002384 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002384:	6803      	ldr	r3, [r0, #0]
{
 8002386:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002388:	681a      	ldr	r2, [r3, #0]
{
 800238a:	4604      	mov	r4, r0
  if(errorflags == RESET)
 800238c:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800238e:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002390:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8002392:	d107      	bne.n	80023a4 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002394:	0696      	lsls	r6, r2, #26
 8002396:	d55a      	bpl.n	800244e <HAL_UART_IRQHandler+0xca>
 8002398:	068d      	lsls	r5, r1, #26
 800239a:	d558      	bpl.n	800244e <HAL_UART_IRQHandler+0xca>
}
 800239c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80023a0:	f7ff bfb0 	b.w	8002304 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023a4:	f015 0501 	ands.w	r5, r5, #1
 80023a8:	d102      	bne.n	80023b0 <HAL_UART_IRQHandler+0x2c>
 80023aa:	f411 7f90 	tst.w	r1, #288	; 0x120
 80023ae:	d04e      	beq.n	800244e <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023b0:	07d3      	lsls	r3, r2, #31
 80023b2:	d505      	bpl.n	80023c0 <HAL_UART_IRQHandler+0x3c>
 80023b4:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023b6:	bf42      	ittt	mi
 80023b8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80023ba:	f043 0301 	orrmi.w	r3, r3, #1
 80023be:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023c0:	0750      	lsls	r0, r2, #29
 80023c2:	d504      	bpl.n	80023ce <HAL_UART_IRQHandler+0x4a>
 80023c4:	b11d      	cbz	r5, 80023ce <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023ce:	0793      	lsls	r3, r2, #30
 80023d0:	d504      	bpl.n	80023dc <HAL_UART_IRQHandler+0x58>
 80023d2:	b11d      	cbz	r5, 80023dc <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80023d6:	f043 0304 	orr.w	r3, r3, #4
 80023da:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023dc:	0716      	lsls	r6, r2, #28
 80023de:	d504      	bpl.n	80023ea <HAL_UART_IRQHandler+0x66>
 80023e0:	b11d      	cbz	r5, 80023ea <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80023e4:	f043 0308 	orr.w	r3, r3, #8
 80023e8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d066      	beq.n	80024be <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023f0:	0695      	lsls	r5, r2, #26
 80023f2:	d504      	bpl.n	80023fe <HAL_UART_IRQHandler+0x7a>
 80023f4:	0688      	lsls	r0, r1, #26
 80023f6:	d502      	bpl.n	80023fe <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80023f8:	4620      	mov	r0, r4
 80023fa:	f7ff ff83 	bl	8002304 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023fe:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002400:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002402:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002404:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002406:	0711      	lsls	r1, r2, #28
 8002408:	d402      	bmi.n	8002410 <HAL_UART_IRQHandler+0x8c>
 800240a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800240e:	d01a      	beq.n	8002446 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002410:	f7ff fdf2 	bl	8001ff8 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	0652      	lsls	r2, r2, #25
 800241a:	d510      	bpl.n	800243e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800241c:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800241e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002424:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002426:	b150      	cbz	r0, 800243e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002428:	4b25      	ldr	r3, [pc, #148]	; (80024c0 <HAL_UART_IRQHandler+0x13c>)
 800242a:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800242c:	f7fe ff4a 	bl	80012c4 <HAL_DMA_Abort_IT>
 8002430:	2800      	cmp	r0, #0
 8002432:	d044      	beq.n	80024be <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002434:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800243a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800243c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800243e:	4620      	mov	r0, r4
 8002440:	f7ff ff9e 	bl	8002380 <HAL_UART_ErrorCallback>
 8002444:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002446:	f7ff ff9b 	bl	8002380 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800244c:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800244e:	0616      	lsls	r6, r2, #24
 8002450:	d527      	bpl.n	80024a2 <HAL_UART_IRQHandler+0x11e>
 8002452:	060d      	lsls	r5, r1, #24
 8002454:	d525      	bpl.n	80024a2 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002456:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800245a:	2a21      	cmp	r2, #33	; 0x21
 800245c:	d12f      	bne.n	80024be <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800245e:	68a2      	ldr	r2, [r4, #8]
 8002460:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002464:	6a22      	ldr	r2, [r4, #32]
 8002466:	d117      	bne.n	8002498 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002468:	8811      	ldrh	r1, [r2, #0]
 800246a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800246e:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002470:	6921      	ldr	r1, [r4, #16]
 8002472:	b979      	cbnz	r1, 8002494 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002474:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002476:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002478:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800247a:	3a01      	subs	r2, #1
 800247c:	b292      	uxth	r2, r2
 800247e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002480:	b9ea      	cbnz	r2, 80024be <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002488:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002494:	3201      	adds	r2, #1
 8002496:	e7ee      	b.n	8002476 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002498:	1c51      	adds	r1, r2, #1
 800249a:	6221      	str	r1, [r4, #32]
 800249c:	7812      	ldrb	r2, [r2, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	e7ea      	b.n	8002478 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024a2:	0650      	lsls	r0, r2, #25
 80024a4:	d50b      	bpl.n	80024be <HAL_UART_IRQHandler+0x13a>
 80024a6:	064a      	lsls	r2, r1, #25
 80024a8:	d509      	bpl.n	80024be <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024aa:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80024ac:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024b2:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80024b4:	2320      	movs	r3, #32
 80024b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80024ba:	f7ff ff22 	bl	8002302 <HAL_UART_TxCpltCallback>
 80024be:	bd70      	pop	{r4, r5, r6, pc}
 80024c0:	080024c5 	.word	0x080024c5

080024c4 <UART_DMAAbortOnError>:
{
 80024c4:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80024c6:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80024ca:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80024cc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80024ce:	f7ff ff57 	bl	8002380 <HAL_UART_ErrorCallback>
 80024d2:	bd08      	pop	{r3, pc}

080024d4 <valueChecksum>:

//........................./*Function*/........................

//Function read value checksum of data
void valueChecksum(char *array, char *readData, char *findChecksum)
{
 80024d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024d8:	4680      	mov	r8, r0
 80024da:	460c      	mov	r4, r1
 80024dc:	4617      	mov	r7, r2
	int count, dola, sao;
	unsigned int xor = 0;

	for (int k=0; k < strlen(array); k++) {
 80024de:	f7fd fe41 	bl	8000164 <strlen>
 80024e2:	2300      	movs	r3, #0
 80024e4:	4283      	cmp	r3, r0
 80024e6:	d114      	bne.n	8002512 <valueChecksum+0x3e>
		if (strncmp(&array[k], "*", 1) == 0) {
			sao = k;
			break;
		}
	}
	count = sao - dola;
 80024e8:	1b72      	subs	r2, r6, r5
	memcpy(readData, &array[dola + 1], count - 1);
 80024ea:	1c69      	adds	r1, r5, #1
 80024ec:	3a01      	subs	r2, #1
 80024ee:	4441      	add	r1, r8
 80024f0:	4620      	mov	r0, r4
 80024f2:	f000 ff13 	bl	800331c <memcpy>

	for (int i=0; i < strlen(readData); i++)
 80024f6:	4620      	mov	r0, r4
 80024f8:	f7fd fe34 	bl	8000164 <strlen>
 80024fc:	4621      	mov	r1, r4
	unsigned int xor = 0;
 80024fe:	2200      	movs	r2, #0
 8002500:	4420      	add	r0, r4
	for (int i=0; i < strlen(readData); i++)
 8002502:	4281      	cmp	r1, r0
 8002504:	d110      	bne.n	8002528 <valueChecksum+0x54>
	{
		xor ^=  readData[i];
	}

	//Convert dec to hex
	sprintf(findChecksum, "%02x", xor);
 8002506:	4638      	mov	r0, r7
}
 8002508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	sprintf(findChecksum, "%02x", xor);
 800250c:	4908      	ldr	r1, [pc, #32]	; (8002530 <valueChecksum+0x5c>)
 800250e:	f000 bf4d 	b.w	80033ac <siprintf>
		if (strncmp(&array[k], "$", 1) == 0) {
 8002512:	f818 2003 	ldrb.w	r2, [r8, r3]
 8002516:	2a24      	cmp	r2, #36	; 0x24
 8002518:	d003      	beq.n	8002522 <valueChecksum+0x4e>
		if (strncmp(&array[k], "*", 1) == 0) {
 800251a:	2a2a      	cmp	r2, #42	; 0x2a
 800251c:	d102      	bne.n	8002524 <valueChecksum+0x50>
 800251e:	461e      	mov	r6, r3
 8002520:	e7e2      	b.n	80024e8 <valueChecksum+0x14>
 8002522:	461d      	mov	r5, r3
	for (int k=0; k < strlen(array); k++) {
 8002524:	3301      	adds	r3, #1
 8002526:	e7dd      	b.n	80024e4 <valueChecksum+0x10>
		xor ^=  readData[i];
 8002528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800252c:	405a      	eors	r2, r3
 800252e:	e7e8      	b.n	8002502 <valueChecksum+0x2e>
 8002530:	08003fb0 	.word	0x08003fb0

08002534 <compareChecksum>:

KQ compareChecksum(char *array)
{
 8002534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int count, sao;
	char checksum[3];
	int result;

	memset(s.data, 0, 128);
 8002536:	4f18      	ldr	r7, [pc, #96]	; (8002598 <compareChecksum+0x64>)
{
 8002538:	4606      	mov	r6, r0
	memset(s.data, 0, 128);
 800253a:	2280      	movs	r2, #128	; 0x80
 800253c:	2100      	movs	r1, #0
 800253e:	4638      	mov	r0, r7
 8002540:	f000 fef7 	bl	8003332 <memset>
	memset(s.CheckXOR, 0, 2);
 8002544:	2400      	movs	r4, #0
 8002546:	463a      	mov	r2, r7
	memset(checksum, 0, 3);

	valueChecksum(array, s.data, s.CheckXOR);
 8002548:	4639      	mov	r1, r7
	memset(s.CheckXOR, 0, 2);
 800254a:	f822 4f80 	strh.w	r4, [r2, #128]!
	valueChecksum(array, s.data, s.CheckXOR);
 800254e:	4630      	mov	r0, r6
	memset(checksum, 0, 3);
 8002550:	f8ad 4004 	strh.w	r4, [sp, #4]
 8002554:	f88d 4006 	strb.w	r4, [sp, #6]
	valueChecksum(array, s.data, s.CheckXOR);
 8002558:	f7ff ffbc 	bl	80024d4 <valueChecksum>

	for (int k=0; k < strlen(array); k++) {
 800255c:	4630      	mov	r0, r6
 800255e:	f7fd fe01 	bl	8000164 <strlen>
 8002562:	4622      	mov	r2, r4
 8002564:	4290      	cmp	r0, r2
 8002566:	d00b      	beq.n	8002580 <compareChecksum+0x4c>
		if (array[k] == '*') {
 8002568:	5cb3      	ldrb	r3, [r6, r2]
 800256a:	2b2a      	cmp	r3, #42	; 0x2a
 800256c:	d011      	beq.n	8002592 <compareChecksum+0x5e>
			sao = k;
		}
		if (array[k] == '\r') {
 800256e:	2b0d      	cmp	r3, #13
 8002570:	d110      	bne.n	8002594 <compareChecksum+0x60>
			count = k - sao;
 8002572:	1b52      	subs	r2, r2, r5
			memcpy(checksum, &array[sao + 1], count - 1);
 8002574:	1c69      	adds	r1, r5, #1
 8002576:	3a01      	subs	r2, #1
 8002578:	4431      	add	r1, r6
 800257a:	a801      	add	r0, sp, #4
 800257c:	f000 fece 	bl	800331c <memcpy>
		}
	}

	//Compare if result = 1: Checksum true
	//If result = 0: Checksum false
	if (strcmp(checksum, s.CheckXOR) == 0) {
 8002580:	4906      	ldr	r1, [pc, #24]	; (800259c <compareChecksum+0x68>)
 8002582:	a801      	add	r0, sp, #4
 8002584:	f7fd fde4 	bl	8000150 <strcmp>
	} else {
		result = 0;
	}

	return result;
}
 8002588:	fab0 f080 	clz	r0, r0
 800258c:	0940      	lsrs	r0, r0, #5
 800258e:	b003      	add	sp, #12
 8002590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002592:	4615      	mov	r5, r2
	for (int k=0; k < strlen(array); k++) {
 8002594:	3201      	adds	r2, #1
 8002596:	e7e5      	b.n	8002564 <compareChecksum+0x30>
 8002598:	20000318 	.word	0x20000318
 800259c:	20000398 	.word	0x20000398

080025a0 <DBG_print_c>:
/*---------------------------------------------
 * Brief: send string
 *--------------------------------------------*/
void DBG_print_c(U8 c)
{
	if (DBG_printcCB != NULL)
 80025a0:	4b02      	ldr	r3, [pc, #8]	; (80025ac <DBG_print_c+0xc>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	b10a      	cbz	r2, 80025aa <DBG_print_c+0xa>
	{
		DBG_printcCB(c);
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4718      	bx	r3
 80025aa:	4770      	bx	lr
 80025ac:	2000027c 	.word	0x2000027c

080025b0 <DBG_print_u>:
}
/*---------------------------------------------
 * Brief: send number
 *--------------------------------------------*/
void DBG_print_u(U32 num, U8 len)
{
 80025b0:	2300      	movs	r3, #0
	U8 s[11];
	U8 l = 0, n = 0, i = 0;

	for (i = 0; i <= 10; i++)
	{
		s[i] = 0;
 80025b2:	461a      	mov	r2, r3
{
 80025b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b6:	b085      	sub	sp, #20
		s[i] = 0;
 80025b8:	ad01      	add	r5, sp, #4
 80025ba:	555a      	strb	r2, [r3, r5]
 80025bc:	3301      	adds	r3, #1
	for (i = 0; i <= 10; i++)
 80025be:	2b0b      	cmp	r3, #11
 80025c0:	d1fb      	bne.n	80025ba <DBG_print_u+0xa>
 80025c2:	2300      	movs	r3, #0
	}
	for (i = 0; i <= 10; i++)
	{
		n = num % 10;
 80025c4:	260a      	movs	r6, #10
 80025c6:	fbb0 f7f6 	udiv	r7, r0, r6
 80025ca:	fb06 0017 	mls	r0, r6, r7, r0
 80025ce:	1c5a      	adds	r2, r3, #1
		num /= 10;
		s[l++] = n + '0';
 80025d0:	3030      	adds	r0, #48	; 0x30
 80025d2:	54e8      	strb	r0, [r5, r3]
 80025d4:	b2d4      	uxtb	r4, r2
		if (!num)
 80025d6:	4638      	mov	r0, r7
 80025d8:	b11f      	cbz	r7, 80025e2 <DBG_print_u+0x32>
	for (i = 0; i <= 10; i++)
 80025da:	2a0b      	cmp	r2, #11
 80025dc:	4613      	mov	r3, r2
 80025de:	d1f2      	bne.n	80025c6 <DBG_print_u+0x16>
 80025e0:	4614      	mov	r4, r2
		{
			break;
		}
	}

	if (len > l)
 80025e2:	428c      	cmp	r4, r1
 80025e4:	d206      	bcs.n	80025f4 <DBG_print_u+0x44>
 80025e6:	2600      	movs	r6, #0
	{
		for (i = 0; i < (len - l); i++)
 80025e8:	1b0c      	subs	r4, r1, r4
 80025ea:	b2f3      	uxtb	r3, r6
 80025ec:	42a3      	cmp	r3, r4
 80025ee:	f106 0601 	add.w	r6, r6, #1
 80025f2:	db0b      	blt.n	800260c <DBG_print_u+0x5c>
 80025f4:	2400      	movs	r4, #0
		}
	}
	i = 10;
	while (1)
	{
		if (s[i])
 80025f6:	192b      	adds	r3, r5, r4
 80025f8:	7a98      	ldrb	r0, [r3, #10]
 80025fa:	b108      	cbz	r0, 8002600 <DBG_print_u+0x50>
		{
			DBG_print_c(s[i]);
 80025fc:	f7ff ffd0 	bl	80025a0 <DBG_print_c>
 8002600:	3c01      	subs	r4, #1
		}
		if (!i)
 8002602:	f114 0f0b 	cmn.w	r4, #11
 8002606:	d1f6      	bne.n	80025f6 <DBG_print_u+0x46>
		{
			break;
		}
		i--;
	}
}
 8002608:	b005      	add	sp, #20
 800260a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DBG_print_c('0');
 800260c:	2030      	movs	r0, #48	; 0x30
 800260e:	f7ff ffc7 	bl	80025a0 <DBG_print_c>
 8002612:	e7ea      	b.n	80025ea <DBG_print_u+0x3a>

08002614 <DBG_print_h>:
}
/*---------------------------------------------
 * Brief: send hex number
 *--------------------------------------------*/
void DBG_print_h(U8 upcase, U32 hexnum, U8 len)
{
 8002614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002616:	4605      	mov	r5, r0
 8002618:	b085      	sub	sp, #20
	U8 s[9], i = 0, tmp = 0, l = 0;

	if (!hexnum)
 800261a:	4608      	mov	r0, r1
 800261c:	b929      	cbnz	r1, 800262a <DBG_print_h+0x16>
	{
		DBG_print_u(0, len);
 800261e:	4611      	mov	r1, r2
		{
			break;
		}
		i--;
	}
}
 8002620:	b005      	add	sp, #20
 8002622:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		DBG_print_u(0, len);
 8002626:	f7ff bfc3 	b.w	80025b0 <DBG_print_u>
	memset(s, 0, 9);
 800262a:	2300      	movs	r3, #0
 800262c:	429d      	cmp	r5, r3
			s[i] = tmp - 10 + ((upcase) ? 'A' : 'a');
 800262e:	bf14      	ite	ne
 8002630:	2537      	movne	r5, #55	; 0x37
 8002632:	2557      	moveq	r5, #87	; 0x57
	memset(s, 0, 9);
 8002634:	ac01      	add	r4, sp, #4
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	6063      	str	r3, [r4, #4]
 800263a:	7223      	strb	r3, [r4, #8]
		tmp = hexnum % 16;
 800263c:	f000 010f 	and.w	r1, r0, #15
		if ((tmp >= 0) && (tmp <= 9))
 8002640:	2909      	cmp	r1, #9
			s[i] = tmp + '0';
 8002642:	bf94      	ite	ls
 8002644:	3130      	addls	r1, #48	; 0x30
			s[i] = tmp - 10 + ((upcase) ? 'A' : 'a');
 8002646:	1949      	addhi	r1, r1, r5
 8002648:	54e1      	strb	r1, [r4, r3]
	for (i = 0; i < 8; i++)
 800264a:	2b07      	cmp	r3, #7
 800264c:	f103 0101 	add.w	r1, r3, #1
		hexnum /= 16;
 8002650:	ea4f 1010 	mov.w	r0, r0, lsr #4
 8002654:	b2ce      	uxtb	r6, r1
	for (i = 0; i < 8; i++)
 8002656:	d101      	bne.n	800265c <DBG_print_h+0x48>
 8002658:	2608      	movs	r6, #8
 800265a:	e002      	b.n	8002662 <DBG_print_h+0x4e>
 800265c:	460b      	mov	r3, r1
		if (!hexnum)
 800265e:	2800      	cmp	r0, #0
 8002660:	d1ec      	bne.n	800263c <DBG_print_h+0x28>
	if (len > l)
 8002662:	42b2      	cmp	r2, r6
 8002664:	d906      	bls.n	8002674 <DBG_print_h+0x60>
 8002666:	2700      	movs	r7, #0
		for (i = 0; i < (len - l); i++)
 8002668:	1b95      	subs	r5, r2, r6
 800266a:	b2fb      	uxtb	r3, r7
 800266c:	42ab      	cmp	r3, r5
 800266e:	f107 0701 	add.w	r7, r7, #1
 8002672:	db0b      	blt.n	800268c <DBG_print_h+0x78>
 8002674:	4434      	add	r4, r6
 8002676:	f10d 0503 	add.w	r5, sp, #3
		if (s[i])
 800267a:	f814 0901 	ldrb.w	r0, [r4], #-1
 800267e:	b108      	cbz	r0, 8002684 <DBG_print_h+0x70>
			DBG_print_c(s[i]);
 8002680:	f7ff ff8e 	bl	80025a0 <DBG_print_c>
		if (!i)
 8002684:	42ac      	cmp	r4, r5
 8002686:	d1f8      	bne.n	800267a <DBG_print_h+0x66>
}
 8002688:	b005      	add	sp, #20
 800268a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DBG_print_c('0');
 800268c:	2030      	movs	r0, #48	; 0x30
 800268e:	f7ff ff87 	bl	80025a0 <DBG_print_c>
 8002692:	e7ea      	b.n	800266a <DBG_print_h+0x56>

08002694 <DBG_print_hs>:
/*---------------------------------------------
 * Brief: print hex string
 *--------------------------------------------*/
void DBG_print_hs(U8 upcase, const U8 *buf, U16 len )
{
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002696:	4607      	mov	r7, r0
 8002698:	4616      	mov	r6, r2
	U16 i = 0;

	if (buf == NULL)
 800269a:	460d      	mov	r5, r1
 800269c:	b179      	cbz	r1, 80026be <DBG_print_hs+0x2a>
 800269e:	460c      	mov	r4, r1
		DBG_print_c('?');
		return;
	}
	while (1)
	{
		DBG_print_h(upcase, *buf, 2);
 80026a0:	2202      	movs	r2, #2
 80026a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026a6:	4638      	mov	r0, r7
 80026a8:	f7ff ffb4 	bl	8002614 <DBG_print_h>
		i++;
		*buf++;
		if (!len)
 80026ac:	b966      	cbnz	r6, 80026c8 <DBG_print_hs+0x34>
		{
			if (*buf == 0)
 80026ae:	7823      	ldrb	r3, [r4, #0]
 80026b0:	b173      	cbz	r3, 80026d0 <DBG_print_hs+0x3c>
			{
				break;
			}
			else if (i >= 4096)
 80026b2:	1b63      	subs	r3, r4, r5
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ba:	d3f1      	bcc.n	80026a0 <DBG_print_hs+0xc>
 80026bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		DBG_print_c('?');
 80026be:	203f      	movs	r0, #63	; 0x3f
				break;
			}

		}
	}
}
 80026c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		DBG_print_c('?');
 80026c4:	f7ff bf6c 	b.w	80025a0 <DBG_print_c>
			if (i >= len)
 80026c8:	1b63      	subs	r3, r4, r5
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	429e      	cmp	r6, r3
 80026ce:	d8e7      	bhi.n	80026a0 <DBG_print_hs+0xc>
 80026d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080026d4 <DBG_setup>:
	while (DBGbusy);
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <DBG_setup+0x18>)
 80026d6:	781a      	ldrb	r2, [r3, #0]
 80026d8:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80026dc:	2a00      	cmp	r2, #0
 80026de:	d1fa      	bne.n	80026d6 <DBG_setup+0x2>
	DBGbusy = 1;
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
	DBG_printcCB = cb;
 80026e4:	4a02      	ldr	r2, [pc, #8]	; (80026f0 <DBG_setup+0x1c>)
 80026e6:	6010      	str	r0, [r2, #0]
	DBGbusy = 0;
 80026e8:	7019      	strb	r1, [r3, #0]
 80026ea:	4770      	bx	lr
 80026ec:	20000280 	.word	0x20000280
 80026f0:	2000027c 	.word	0x2000027c

080026f4 <DBG_print>:
 * + d: signed integer.
 * + u: unsigned integer.
 * + x: hex number.
 *--------------------------------------------*/
void DBG_print(const U8 *s, ...)
{
 80026f4:	b40f      	push	{r0, r1, r2, r3}
	va_list vl;
	U32 timepass = 0;
	U8 len = 0;

	while (DBGbusy && (timepass++ < 1000000));
 80026f6:	4a9c      	ldr	r2, [pc, #624]	; (8002968 <DBG_print+0x274>)
{
 80026f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026fc:	4690      	mov	r8, r2
 80026fe:	b08b      	sub	sp, #44	; 0x2c
 8002700:	9c14      	ldr	r4, [sp, #80]	; 0x50
	while (DBGbusy && (timepass++ < 1000000));
 8002702:	4b9a      	ldr	r3, [pc, #616]	; (800296c <DBG_print+0x278>)
 8002704:	7811      	ldrb	r1, [r2, #0]
 8002706:	b109      	cbz	r1, 800270c <DBG_print+0x18>
 8002708:	3b01      	subs	r3, #1
 800270a:	d1fb      	bne.n	8002704 <DBG_print+0x10>
	DBGbusy = 1;
 800270c:	2301      	movs	r3, #1
		if ((dbnum == 0) && step)
 800270e:	f04f 0a00 	mov.w	sl, #0
 8002712:	f04f 0b00 	mov.w	fp, #0
	DBGbusy = 1;
 8002716:	f888 3000 	strb.w	r3, [r8]
	va_start(vl, s);
 800271a:	ab15      	add	r3, sp, #84	; 0x54
 800271c:	9301      	str	r3, [sp, #4]
	//va_arg(vl, u8*);
	while(*s)
 800271e:	7823      	ldrb	r3, [r4, #0]
 8002720:	b933      	cbnz	r3, 8002730 <DBG_print+0x3c>
		DBG_PRINT_NORMAL://
		DBG_print_c(*s);
		*s++;
	}
	va_end(vl);
	DBGbusy = 0;
 8002722:	f888 3000 	strb.w	r3, [r8]
}
 8002726:	b00b      	add	sp, #44	; 0x2c
 8002728:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800272c:	b004      	add	sp, #16
 800272e:	4770      	bx	lr
		if(*s == '%')
 8002730:	2b25      	cmp	r3, #37	; 0x25
 8002732:	d11d      	bne.n	8002770 <DBG_print+0x7c>
			if ((*s >= '0') && (*s <= '9'))
 8002734:	7865      	ldrb	r5, [r4, #1]
 8002736:	3d30      	subs	r5, #48	; 0x30
 8002738:	b2eb      	uxtb	r3, r5
 800273a:	2b09      	cmp	r3, #9
				len += *s - '0';
 800273c:	bf9d      	ittte	ls
 800273e:	78a3      	ldrbls	r3, [r4, #2]
				len = (*s - '0') * 10;
 8002740:	eb05 0585 	addls.w	r5, r5, r5, lsl #2
				len += *s - '0';
 8002744:	3b30      	subls	r3, #48	; 0x30
			*s++;
 8002746:	3401      	addhi	r4, #1
				*s++;
 8002748:	bf9c      	itt	ls
 800274a:	3403      	addls	r4, #3
				len += *s - '0';
 800274c:	eb03 0545 	addls.w	r5, r3, r5, lsl #1
			switch(*s)
 8002750:	7823      	ldrb	r3, [r4, #0]
			len = 0;
 8002752:	bf8c      	ite	hi
 8002754:	2500      	movhi	r5, #0
				len += *s - '0';
 8002756:	f005 05ff 	andls.w	r5, r5, #255	; 0xff
			switch(*s)
 800275a:	2b64      	cmp	r3, #100	; 0x64
 800275c:	d05a      	beq.n	8002814 <DBG_print+0x120>
 800275e:	d815      	bhi.n	800278c <DBG_print+0x98>
 8002760:	2b58      	cmp	r3, #88	; 0x58
 8002762:	f000 80a6 	beq.w	80028b2 <DBG_print+0x1be>
 8002766:	d808      	bhi.n	800277a <DBG_print+0x86>
 8002768:	2b48      	cmp	r3, #72	; 0x48
 800276a:	f000 80f6 	beq.w	800295a <DBG_print+0x266>
					*s--;
 800276e:	3c01      	subs	r4, #1
		DBG_print_c(*s);
 8002770:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002774:	f7ff ff14 	bl	80025a0 <DBG_print_c>
 8002778:	e7d1      	b.n	800271e <DBG_print+0x2a>
			switch(*s)
 800277a:	2b62      	cmp	r3, #98	; 0x62
 800277c:	d05f      	beq.n	800283e <DBG_print+0x14a>
 800277e:	2b63      	cmp	r3, #99	; 0x63
 8002780:	d1f5      	bne.n	800276e <DBG_print+0x7a>
					DBG_print_c(va_arg(vl, U8*));
 8002782:	9b01      	ldr	r3, [sp, #4]
 8002784:	1d1a      	adds	r2, r3, #4
 8002786:	9201      	str	r2, [sp, #4]
 8002788:	7818      	ldrb	r0, [r3, #0]
 800278a:	e033      	b.n	80027f4 <DBG_print+0x100>
			switch(*s)
 800278c:	2b73      	cmp	r3, #115	; 0x73
 800278e:	d01b      	beq.n	80027c8 <DBG_print+0xd4>
 8002790:	d80d      	bhi.n	80027ae <DBG_print+0xba>
 8002792:	2b66      	cmp	r3, #102	; 0x66
 8002794:	f000 8094 	beq.w	80028c0 <DBG_print+0x1cc>
 8002798:	2b68      	cmp	r3, #104	; 0x68
 800279a:	d1e8      	bne.n	800276e <DBG_print+0x7a>
					DBG_print_hs(0, va_arg(vl, U8*), len);
 800279c:	9b01      	ldr	r3, [sp, #4]
 800279e:	2000      	movs	r0, #0
 80027a0:	1d1a      	adds	r2, r3, #4
 80027a2:	9201      	str	r2, [sp, #4]
 80027a4:	462a      	mov	r2, r5
 80027a6:	6819      	ldr	r1, [r3, #0]
					DBG_print_hs(1, va_arg(vl, U8*), len);
 80027a8:	f7ff ff74 	bl	8002694 <DBG_print_hs>
					break;
 80027ac:	e02c      	b.n	8002808 <DBG_print+0x114>
			switch(*s)
 80027ae:	2b75      	cmp	r3, #117	; 0x75
 80027b0:	d03f      	beq.n	8002832 <DBG_print+0x13e>
 80027b2:	2b78      	cmp	r3, #120	; 0x78
 80027b4:	d1db      	bne.n	800276e <DBG_print+0x7a>
					DBG_print_h(0, va_arg(vl, U32), len);
 80027b6:	9b01      	ldr	r3, [sp, #4]
 80027b8:	2000      	movs	r0, #0
 80027ba:	1d1a      	adds	r2, r3, #4
 80027bc:	9201      	str	r2, [sp, #4]
 80027be:	462a      	mov	r2, r5
 80027c0:	6819      	ldr	r1, [r3, #0]
					DBG_print_h(1, va_arg(vl, U32), len);
 80027c2:	f7ff ff27 	bl	8002614 <DBG_print_h>
					break;
 80027c6:	e01f      	b.n	8002808 <DBG_print+0x114>
					DBG_print_s(va_arg(vl, U8*), len);
 80027c8:	9b01      	ldr	r3, [sp, #4]
 80027ca:	b2ae      	uxth	r6, r5
 80027cc:	1d1a      	adds	r2, r3, #4
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	9201      	str	r2, [sp, #4]
	if (buf == NULL)
 80027d2:	b173      	cbz	r3, 80027f2 <DBG_print+0xfe>
 80027d4:	2700      	movs	r7, #0
 80027d6:	f103 39ff 	add.w	r9, r3, #4294967295
	while (*buf)
 80027da:	f819 0f01 	ldrb.w	r0, [r9, #1]!
 80027de:	b960      	cbnz	r0, 80027fa <DBG_print+0x106>
	if (len)
 80027e0:	b195      	cbz	r5, 8002808 <DBG_print+0x114>
		while (i++ < len)
 80027e2:	42be      	cmp	r6, r7
 80027e4:	d910      	bls.n	8002808 <DBG_print+0x114>
			DBG_print_c(' ');
 80027e6:	2020      	movs	r0, #32
 80027e8:	3701      	adds	r7, #1
 80027ea:	f7ff fed9 	bl	80025a0 <DBG_print_c>
 80027ee:	b2bf      	uxth	r7, r7
 80027f0:	e7f7      	b.n	80027e2 <DBG_print+0xee>
		DBG_print_c('?');
 80027f2:	203f      	movs	r0, #63	; 0x3f
					DBG_print_c(va_arg(vl, U8*));
 80027f4:	f7ff fed4 	bl	80025a0 <DBG_print_c>
					break;
 80027f8:	e006      	b.n	8002808 <DBG_print+0x114>
		i++;
 80027fa:	3701      	adds	r7, #1
		DBG_print_c(*buf);
 80027fc:	f7ff fed0 	bl	80025a0 <DBG_print_c>
		i++;
 8002800:	b2bf      	uxth	r7, r7
		if (len && (i >= len))
 8002802:	b11d      	cbz	r5, 800280c <DBG_print+0x118>
 8002804:	42be      	cmp	r6, r7
 8002806:	d8e8      	bhi.n	80027da <DBG_print+0xe6>
			*s++;
 8002808:	3401      	adds	r4, #1
			continue;
 800280a:	e788      	b.n	800271e <DBG_print+0x2a>
		else if (i >= 4096)
 800280c:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8002810:	d1e3      	bne.n	80027da <DBG_print+0xe6>
 8002812:	e7f9      	b.n	8002808 <DBG_print+0x114>
					DBG_print_d(va_arg(vl, int32_t), len);
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	681e      	ldr	r6, [r3, #0]
 8002818:	1d1a      	adds	r2, r3, #4
	if (num < 0)
 800281a:	2e00      	cmp	r6, #0
					DBG_print_d(va_arg(vl, int32_t), len);
 800281c:	9201      	str	r2, [sp, #4]
	if (num < 0)
 800281e:	da03      	bge.n	8002828 <DBG_print+0x134>
		DBG_print_c('-');
 8002820:	202d      	movs	r0, #45	; 0x2d
 8002822:	f7ff febd 	bl	80025a0 <DBG_print_c>
		num = -num;
 8002826:	4276      	negs	r6, r6
	DBG_print_u(num, len);
 8002828:	4629      	mov	r1, r5
 800282a:	4630      	mov	r0, r6
		DBG_print_u(0, len);
 800282c:	f7ff fec0 	bl	80025b0 <DBG_print_u>
 8002830:	e7ea      	b.n	8002808 <DBG_print+0x114>
					DBG_print_u(va_arg(vl, U32), len);
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	4629      	mov	r1, r5
 8002836:	1d1a      	adds	r2, r3, #4
 8002838:	9201      	str	r2, [sp, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	e7f6      	b.n	800282c <DBG_print+0x138>
					DBG_print_b(va_arg(vl, U32), len);
 800283e:	9b01      	ldr	r3, [sp, #4]
 8002840:	681f      	ldr	r7, [r3, #0]
 8002842:	1d1a      	adds	r2, r3, #4
 8002844:	9201      	str	r2, [sp, #4]
	if (!num)
 8002846:	b917      	cbnz	r7, 800284e <DBG_print+0x15a>
		DBG_print_u(0, len);
 8002848:	4629      	mov	r1, r5
 800284a:	4638      	mov	r0, r7
 800284c:	e7ee      	b.n	800282c <DBG_print+0x138>
	memset(s, 0, 32);
 800284e:	ae02      	add	r6, sp, #8
 8002850:	2220      	movs	r2, #32
 8002852:	2100      	movs	r1, #0
 8002854:	4630      	mov	r0, r6
 8002856:	f000 fd6c 	bl	8003332 <memset>
 800285a:	2300      	movs	r3, #0
		tmp = num % 2;
 800285c:	f007 0201 	and.w	r2, r7, #1
		s[i] = tmp + '0';
 8002860:	3230      	adds	r2, #48	; 0x30
 8002862:	54f2      	strb	r2, [r6, r3]
	for (i = 0; i < 32; i++)
 8002864:	2b1f      	cmp	r3, #31
 8002866:	f103 0201 	add.w	r2, r3, #1
		num /= 2;
 800286a:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800286e:	fa5f f982 	uxtb.w	r9, r2
	for (i = 0; i < 32; i++)
 8002872:	d102      	bne.n	800287a <DBG_print+0x186>
 8002874:	f04f 0920 	mov.w	r9, #32
 8002878:	e002      	b.n	8002880 <DBG_print+0x18c>
 800287a:	4613      	mov	r3, r2
		if (!num)
 800287c:	2f00      	cmp	r7, #0
 800287e:	d1ed      	bne.n	800285c <DBG_print+0x168>
	if (len > l)
 8002880:	454d      	cmp	r5, r9
 8002882:	d907      	bls.n	8002894 <DBG_print+0x1a0>
 8002884:	2700      	movs	r7, #0
		for (i = 0; i < (len - l); i++)
 8002886:	eba5 0509 	sub.w	r5, r5, r9
 800288a:	b2fb      	uxtb	r3, r7
 800288c:	42ab      	cmp	r3, r5
 800288e:	f107 0701 	add.w	r7, r7, #1
 8002892:	db0a      	blt.n	80028aa <DBG_print+0x1b6>
 8002894:	444e      	add	r6, r9
 8002896:	f10d 0507 	add.w	r5, sp, #7
		if (s[i])
 800289a:	f816 0901 	ldrb.w	r0, [r6], #-1
 800289e:	b108      	cbz	r0, 80028a4 <DBG_print+0x1b0>
			DBG_print_c(s[i]);
 80028a0:	f7ff fe7e 	bl	80025a0 <DBG_print_c>
		if (!i)
 80028a4:	42ae      	cmp	r6, r5
 80028a6:	d1f8      	bne.n	800289a <DBG_print+0x1a6>
 80028a8:	e7ae      	b.n	8002808 <DBG_print+0x114>
			DBG_print_c('0');
 80028aa:	2030      	movs	r0, #48	; 0x30
 80028ac:	f7ff fe78 	bl	80025a0 <DBG_print_c>
 80028b0:	e7eb      	b.n	800288a <DBG_print+0x196>
					DBG_print_h(1, va_arg(vl, U32), len);
 80028b2:	9b01      	ldr	r3, [sp, #4]
 80028b4:	2001      	movs	r0, #1
 80028b6:	1d1a      	adds	r2, r3, #4
 80028b8:	9201      	str	r2, [sp, #4]
 80028ba:	6819      	ldr	r1, [r3, #0]
 80028bc:	462a      	mov	r2, r5
 80028be:	e780      	b.n	80027c2 <DBG_print+0xce>
					DBG_print_f(va_arg(vl, double));
 80028c0:	9b01      	ldr	r3, [sp, #4]
 80028c2:	3307      	adds	r3, #7
 80028c4:	f023 0307 	bic.w	r3, r3, #7
 80028c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80028cc:	f103 0208 	add.w	r2, r3, #8
	integer = (int)dbnum;
 80028d0:	4639      	mov	r1, r7
 80028d2:	4630      	mov	r0, r6
					DBG_print_f(va_arg(vl, double));
 80028d4:	9201      	str	r2, [sp, #4]
	integer = (int)dbnum;
 80028d6:	f7fe f8b5 	bl	8000a44 <__aeabi_d2iz>
 80028da:	4605      	mov	r5, r0
	dbnum -= integer;
 80028dc:	f7fd fd9c 	bl	8000418 <__aeabi_i2d>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4630      	mov	r0, r6
 80028e6:	4639      	mov	r1, r7
 80028e8:	f7fd fc48 	bl	800017c <__aeabi_dsub>
	if (num < 0)
 80028ec:	2d00      	cmp	r5, #0
	dbnum -= integer;
 80028ee:	4606      	mov	r6, r0
 80028f0:	460f      	mov	r7, r1
	if (num < 0)
 80028f2:	da30      	bge.n	8002956 <DBG_print+0x262>
		DBG_print_c('-');
 80028f4:	202d      	movs	r0, #45	; 0x2d
 80028f6:	f7ff fe53 	bl	80025a0 <DBG_print_c>
		num = -num;
 80028fa:	4268      	negs	r0, r5
	DBG_print_u(num, len);
 80028fc:	2100      	movs	r1, #0
 80028fe:	f7ff fe57 	bl	80025b0 <DBG_print_u>
	DBG_print_c('.');
 8002902:	202e      	movs	r0, #46	; 0x2e
 8002904:	f7ff fe4c 	bl	80025a0 <DBG_print_c>
	for (step = 0; step < 6; step++)
 8002908:	2500      	movs	r5, #0
		dbnum *= 10;
 800290a:	2200      	movs	r2, #0
 800290c:	4b18      	ldr	r3, [pc, #96]	; (8002970 <DBG_print+0x27c>)
 800290e:	4630      	mov	r0, r6
 8002910:	4639      	mov	r1, r7
 8002912:	f7fd fde7 	bl	80004e4 <__aeabi_dmul>
 8002916:	460f      	mov	r7, r1
 8002918:	4606      	mov	r6, r0
		integer = (int)dbnum;
 800291a:	f7fe f893 	bl	8000a44 <__aeabi_d2iz>
 800291e:	4681      	mov	r9, r0
		dbnum -= integer;
 8002920:	f7fd fd7a 	bl	8000418 <__aeabi_i2d>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4630      	mov	r0, r6
 800292a:	4639      	mov	r1, r7
 800292c:	f7fd fc26 	bl	800017c <__aeabi_dsub>
		if ((dbnum == 0) && step)
 8002930:	4652      	mov	r2, sl
 8002932:	465b      	mov	r3, fp
		dbnum -= integer;
 8002934:	4606      	mov	r6, r0
 8002936:	460f      	mov	r7, r1
		if ((dbnum == 0) && step)
 8002938:	f7fe f83c 	bl	80009b4 <__aeabi_dcmpeq>
 800293c:	b110      	cbz	r0, 8002944 <DBG_print+0x250>
 800293e:	2d00      	cmp	r5, #0
 8002940:	f47f af62 	bne.w	8002808 <DBG_print+0x114>
	for (step = 0; step < 6; step++)
 8002944:	3501      	adds	r5, #1
		DBG_print_u(integer, 0);
 8002946:	2100      	movs	r1, #0
 8002948:	4648      	mov	r0, r9
	for (step = 0; step < 6; step++)
 800294a:	b2ed      	uxtb	r5, r5
		DBG_print_u(integer, 0);
 800294c:	f7ff fe30 	bl	80025b0 <DBG_print_u>
	for (step = 0; step < 6; step++)
 8002950:	2d06      	cmp	r5, #6
 8002952:	d1da      	bne.n	800290a <DBG_print+0x216>
 8002954:	e758      	b.n	8002808 <DBG_print+0x114>
	if (num < 0)
 8002956:	4628      	mov	r0, r5
 8002958:	e7d0      	b.n	80028fc <DBG_print+0x208>
					DBG_print_hs(1, va_arg(vl, U8*), len);
 800295a:	9b01      	ldr	r3, [sp, #4]
 800295c:	2001      	movs	r0, #1
 800295e:	1d1a      	adds	r2, r3, #4
 8002960:	9201      	str	r2, [sp, #4]
 8002962:	6819      	ldr	r1, [r3, #0]
 8002964:	462a      	mov	r2, r5
 8002966:	e71f      	b.n	80027a8 <DBG_print+0xb4>
 8002968:	20000280 	.word	0x20000280
 800296c:	000f4241 	.word	0x000f4241
 8002970:	40240000 	.word	0x40240000

08002974 <printchar>:
uint8_t proceed_TransmitData = 0;

uint8_t string[128] = "$TEMP,";

void printchar (uint8_t c)
{
 8002974:	b507      	push	{r0, r1, r2, lr}
 8002976:	a902      	add	r1, sp, #8
 8002978:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_UART_Transmit(&huart2, &c, 1, 1000);
 800297c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002980:	2201      	movs	r2, #1
 8002982:	4803      	ldr	r0, [pc, #12]	; (8002990 <printchar+0x1c>)
 8002984:	f7ff fc3a 	bl	80021fc <HAL_UART_Transmit>
}
 8002988:	b003      	add	sp, #12
 800298a:	f85d fb04 	ldr.w	pc, [sp], #4
 800298e:	bf00      	nop
 8002990:	200004ac 	.word	0x200004ac

08002994 <spi_write>:

//............................/*Functions Document for MAX31865*/.........................
void spi_write(uint8_t *data, uint8_t len)
{
	HAL_SPI_Transmit(&hspi1, data, len, HAL_MAX_DELAY);
 8002994:	460a      	mov	r2, r1
 8002996:	f04f 33ff 	mov.w	r3, #4294967295
 800299a:	4601      	mov	r1, r0
 800299c:	4801      	ldr	r0, [pc, #4]	; (80029a4 <spi_write+0x10>)
 800299e:	f7ff b8a8 	b.w	8001af2 <HAL_SPI_Transmit>
 80029a2:	bf00      	nop
 80029a4:	20000454 	.word	0x20000454

080029a8 <spi_read>:
}
void spi_read(uint8_t *buffer, uint8_t len)
{
	HAL_SPI_Receive(&hspi1, buffer, len, HAL_MAX_DELAY);
 80029a8:	460a      	mov	r2, r1
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295
 80029ae:	4601      	mov	r1, r0
 80029b0:	4801      	ldr	r0, [pc, #4]	; (80029b8 <spi_read+0x10>)
 80029b2:	f7ff ba44 	b.w	8001e3e <HAL_SPI_Receive>
 80029b6:	bf00      	nop
 80029b8:	20000454 	.word	0x20000454

080029bc <MAX31865_read>:
}
void MAX31865_read(uint8_t addr, uint8_t *buffer, uint8_t len)
{
 80029bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029be:	ac02      	add	r4, sp, #8
 80029c0:	f804 0d01 	strb.w	r0, [r4, #-1]!
 80029c4:	460d      	mov	r5, r1
    addr &= ~MAX31865_READ;                                     // Force read bit on address

    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_RESET);          // Enable CE
 80029c6:	480f      	ldr	r0, [pc, #60]	; (8002a04 <MAX31865_read+0x48>)
 80029c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
 80029cc:	4616      	mov	r6, r2
    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_RESET);          // Enable CE
 80029ce:	2200      	movs	r2, #0
 80029d0:	f7fe fda0 	bl	8001514 <HAL_GPIO_WritePin>
    spi_write(&addr, 1);                                        // Write addr
 80029d4:	2101      	movs	r1, #1
 80029d6:	4620      	mov	r0, r4
 80029d8:	f7ff ffdc 	bl	8002994 <spi_write>
    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80029dc:	4f0a      	ldr	r7, [pc, #40]	; (8002a08 <MAX31865_read+0x4c>)
 80029de:	4638      	mov	r0, r7
 80029e0:	f7ff facc 	bl	8001f7c <HAL_SPI_GetState>
 80029e4:	2801      	cmp	r0, #1
 80029e6:	4604      	mov	r4, r0
 80029e8:	d1f9      	bne.n	80029de <MAX31865_read+0x22>
    spi_read(buffer, len);                                      // Read data
 80029ea:	4631      	mov	r1, r6
 80029ec:	4628      	mov	r0, r5
 80029ee:	f7ff ffdb 	bl	80029a8 <spi_read>
    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_SET);         // Disable CE
 80029f2:	4622      	mov	r2, r4
 80029f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029f8:	4802      	ldr	r0, [pc, #8]	; (8002a04 <MAX31865_read+0x48>)
 80029fa:	f7fe fd8b 	bl	8001514 <HAL_GPIO_WritePin>

}
 80029fe:	b003      	add	sp, #12
 8002a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40010800 	.word	0x40010800
 8002a08:	20000454 	.word	0x20000454

08002a0c <MAX31865_write>:
void MAX31865_write(uint8_t addr, uint8_t data)
{
 8002a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    addr |= MAX31865_WRITE;                                 // Force write bit on address

    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_RESET);      // Enable CE
 8002a0e:	4d0f      	ldr	r5, [pc, #60]	; (8002a4c <MAX31865_write+0x40>)
    addr |= MAX31865_WRITE;                                 // Force write bit on address
 8002a10:	ac02      	add	r4, sp, #8
 8002a12:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8002a16:	f804 0d01 	strb.w	r0, [r4, #-1]!
    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_RESET);      // Enable CE
 8002a1a:	2200      	movs	r2, #0
{
 8002a1c:	f88d 1006 	strb.w	r1, [sp, #6]
    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_RESET);      // Enable CE
 8002a20:	4628      	mov	r0, r5
 8002a22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a26:	f7fe fd75 	bl	8001514 <HAL_GPIO_WritePin>
    spi_write(&addr, 1);                                    // Write addr
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	f7ff ffb1 	bl	8002994 <spi_write>
    spi_write(&data, 1);                                    // Write data
 8002a32:	f10d 0006 	add.w	r0, sp, #6
 8002a36:	2101      	movs	r1, #1
 8002a38:	f7ff ffac 	bl	8002994 <spi_write>
    HAL_GPIO_WritePin(GPIO_PORT_CS, GPIO_PIN_CS, GPIO_PIN_SET);     // Disable CE
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a42:	4628      	mov	r0, r5
 8002a44:	f7fe fd66 	bl	8001514 <HAL_GPIO_WritePin>
}
 8002a48:	b003      	add	sp, #12
 8002a4a:	bd30      	pop	{r4, r5, pc}
 8002a4c:	40010800 	.word	0x40010800

08002a50 <temperature>:

float  temperature(float RTDnominal, float refResistor, float data) {
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	460c      	mov	r4, r1
 8002a54:	4606      	mov	r6, r0

  float Z1, Z2, Z3, Z4, Rt, temp;

  Rt = data;
  Rt /= 32768;
 8002a56:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f7fe f998 	bl	8000d90 <__aeabi_fmul>
  Rt *= refResistor;
 8002a60:	4621      	mov	r1, r4
 8002a62:	f7fe f995 	bl	8000d90 <__aeabi_fmul>
 8002a66:	4605      	mov	r5, r0

  Z1 = -RTD_A;
  Z2 = RTD_A * RTD_A - (4 * RTD_B);
  Z3 = (4 * RTD_B) / RTDnominal;
 8002a68:	4630      	mov	r0, r6
 8002a6a:	f7fd fce7 	bl	800043c <__aeabi_f2d>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	a155      	add	r1, pc, #340	; (adr r1, 8002bc8 <temperature+0x178>)
 8002a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a78:	f7fd fe5e 	bl	8000738 <__aeabi_ddiv>
 8002a7c:	f7fe f82a 	bl	8000ad4 <__aeabi_d2f>
  Z4 = 2 * RTD_B;

  temp = Z2 + (Z3 * Rt);
 8002a80:	4629      	mov	r1, r5
 8002a82:	f7fe f985 	bl	8000d90 <__aeabi_fmul>
 8002a86:	4962      	ldr	r1, [pc, #392]	; (8002c10 <temperature+0x1c0>)
 8002a88:	f7fe f87a 	bl	8000b80 <__addsf3>
  temp = (sqrt(temp) + Z1) / Z4;
 8002a8c:	f7fd fcd6 	bl	800043c <__aeabi_f2d>
 8002a90:	f001 f964 	bl	8003d5c <sqrt>
 8002a94:	a34e      	add	r3, pc, #312	; (adr r3, 8002bd0 <temperature+0x180>)
 8002a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9a:	f7fd fb6f 	bl	800017c <__aeabi_dsub>
 8002a9e:	a34e      	add	r3, pc, #312	; (adr r3, 8002bd8 <temperature+0x188>)
 8002aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa4:	f7fd fe48 	bl	8000738 <__aeabi_ddiv>
 8002aa8:	f7fe f814 	bl	8000ad4 <__aeabi_d2f>

  if (temp >= 0) return temp;
 8002aac:	2100      	movs	r1, #0
  temp = (sqrt(temp) + Z1) / Z4;
 8002aae:	4604      	mov	r4, r0
  if (temp >= 0) return temp;
 8002ab0:	f7fe fb20 	bl	80010f4 <__aeabi_fcmpge>
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	f040 8085 	bne.w	8002bc4 <temperature+0x174>

  // ugh.
  Rt /= RTDnominal;
 8002aba:	4631      	mov	r1, r6
 8002abc:	4628      	mov	r0, r5
 8002abe:	f7fe fa1b 	bl	8000ef8 <__aeabi_fdiv>
  Rt *= 100;      // normalize to 100 ohm
 8002ac2:	4954      	ldr	r1, [pc, #336]	; (8002c14 <temperature+0x1c4>)
 8002ac4:	f7fe f964 	bl	8000d90 <__aeabi_fmul>

  float rpoly = Rt;

  temp = -242.02;
  temp += 2.2228 * rpoly;
  rpoly *= Rt;  // square
 8002ac8:	4601      	mov	r1, r0
  Rt *= 100;      // normalize to 100 ohm
 8002aca:	4604      	mov	r4, r0
  rpoly *= Rt;  // square
 8002acc:	f7fe f960 	bl	8000d90 <__aeabi_fmul>
 8002ad0:	4605      	mov	r5, r0
  temp += 2.2228 * rpoly;
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	f7fd fcb2 	bl	800043c <__aeabi_f2d>
 8002ad8:	a341      	add	r3, pc, #260	; (adr r3, 8002be0 <temperature+0x190>)
 8002ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ade:	f7fd fd01 	bl	80004e4 <__aeabi_dmul>
 8002ae2:	a341      	add	r3, pc, #260	; (adr r3, 8002be8 <temperature+0x198>)
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae8:	f7fd fb48 	bl	800017c <__aeabi_dsub>
 8002aec:	f7fd fff2 	bl	8000ad4 <__aeabi_d2f>
  temp += 2.5859e-3 * rpoly;
 8002af0:	f7fd fca4 	bl	800043c <__aeabi_f2d>
 8002af4:	4606      	mov	r6, r0
 8002af6:	4628      	mov	r0, r5
 8002af8:	460f      	mov	r7, r1
 8002afa:	f7fd fc9f 	bl	800043c <__aeabi_f2d>
 8002afe:	a33c      	add	r3, pc, #240	; (adr r3, 8002bf0 <temperature+0x1a0>)
 8002b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b04:	f7fd fcee 	bl	80004e4 <__aeabi_dmul>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4630      	mov	r0, r6
 8002b0e:	4639      	mov	r1, r7
 8002b10:	f7fd fb36 	bl	8000180 <__adddf3>
 8002b14:	4606      	mov	r6, r0
 8002b16:	460f      	mov	r7, r1
  rpoly *= Rt;  // ^3
 8002b18:	4620      	mov	r0, r4
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	f7fe f938 	bl	8000d90 <__aeabi_fmul>
  temp += 2.5859e-3 * rpoly;
 8002b20:	4639      	mov	r1, r7
  rpoly *= Rt;  // ^3
 8002b22:	4605      	mov	r5, r0
  temp += 2.5859e-3 * rpoly;
 8002b24:	4630      	mov	r0, r6
 8002b26:	f7fd ffd5 	bl	8000ad4 <__aeabi_d2f>
  temp -= 4.8260e-6 * rpoly;
 8002b2a:	f7fd fc87 	bl	800043c <__aeabi_f2d>
 8002b2e:	4606      	mov	r6, r0
 8002b30:	4628      	mov	r0, r5
 8002b32:	460f      	mov	r7, r1
 8002b34:	f7fd fc82 	bl	800043c <__aeabi_f2d>
 8002b38:	a32f      	add	r3, pc, #188	; (adr r3, 8002bf8 <temperature+0x1a8>)
 8002b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3e:	f7fd fcd1 	bl	80004e4 <__aeabi_dmul>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4630      	mov	r0, r6
 8002b48:	4639      	mov	r1, r7
 8002b4a:	f7fd fb17 	bl	800017c <__aeabi_dsub>
 8002b4e:	4606      	mov	r6, r0
 8002b50:	460f      	mov	r7, r1
  rpoly *= Rt;  // ^4
 8002b52:	4620      	mov	r0, r4
 8002b54:	4629      	mov	r1, r5
 8002b56:	f7fe f91b 	bl	8000d90 <__aeabi_fmul>
  temp -= 4.8260e-6 * rpoly;
 8002b5a:	4639      	mov	r1, r7
  rpoly *= Rt;  // ^4
 8002b5c:	4605      	mov	r5, r0
  temp -= 4.8260e-6 * rpoly;
 8002b5e:	4630      	mov	r0, r6
 8002b60:	f7fd ffb8 	bl	8000ad4 <__aeabi_d2f>
  temp -= 2.8183e-8 * rpoly;
 8002b64:	f7fd fc6a 	bl	800043c <__aeabi_f2d>
 8002b68:	4606      	mov	r6, r0
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	460f      	mov	r7, r1
 8002b6e:	f7fd fc65 	bl	800043c <__aeabi_f2d>
 8002b72:	a323      	add	r3, pc, #140	; (adr r3, 8002c00 <temperature+0x1b0>)
 8002b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b78:	f7fd fcb4 	bl	80004e4 <__aeabi_dmul>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4630      	mov	r0, r6
 8002b82:	4639      	mov	r1, r7
 8002b84:	f7fd fafa 	bl	800017c <__aeabi_dsub>
 8002b88:	4606      	mov	r6, r0
 8002b8a:	460f      	mov	r7, r1
  rpoly *= Rt;  // ^5
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	4629      	mov	r1, r5
 8002b90:	f7fe f8fe 	bl	8000d90 <__aeabi_fmul>
  temp += 1.5243e-10 * rpoly;
 8002b94:	f7fd fc52 	bl	800043c <__aeabi_f2d>
 8002b98:	a31b      	add	r3, pc, #108	; (adr r3, 8002c08 <temperature+0x1b8>)
 8002b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9e:	f7fd fca1 	bl	80004e4 <__aeabi_dmul>
 8002ba2:	4604      	mov	r4, r0
 8002ba4:	460d      	mov	r5, r1
  temp -= 2.8183e-8 * rpoly;
 8002ba6:	4630      	mov	r0, r6
 8002ba8:	4639      	mov	r1, r7
 8002baa:	f7fd ff93 	bl	8000ad4 <__aeabi_d2f>
  temp += 1.5243e-10 * rpoly;
 8002bae:	f7fd fc45 	bl	800043c <__aeabi_f2d>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	4629      	mov	r1, r5
 8002bba:	f7fd fae1 	bl	8000180 <__adddf3>
 8002bbe:	f7fd ff89 	bl	8000ad4 <__aeabi_d2f>
 8002bc2:	4604      	mov	r4, r0

  return temp;
}
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bc8:	ee19ce88 	.word	0xee19ce88
 8002bcc:	bec360af 	.word	0xbec360af
 8002bd0:	40000000 	.word	0x40000000
 8002bd4:	3f700226 	.word	0x3f700226
 8002bd8:	e0000000 	.word	0xe0000000
 8002bdc:	beb360af 	.word	0xbeb360af
 8002be0:	5dcc63f1 	.word	0x5dcc63f1
 8002be4:	4001c84b 	.word	0x4001c84b
 8002be8:	e0000000 	.word	0xe0000000
 8002bec:	406e40a3 	.word	0x406e40a3
 8002bf0:	7dc882bb 	.word	0x7dc882bb
 8002bf4:	3f652f06 	.word	0x3f652f06
 8002bf8:	c766c293 	.word	0xc766c293
 8002bfc:	3ed43de0 	.word	0x3ed43de0
 8002c00:	513156ce 	.word	0x513156ce
 8002c04:	3e5e42e2 	.word	0x3e5e42e2
 8002c08:	61e4fa3e 	.word	0x61e4fa3e
 8002c0c:	3de4f327 	.word	0x3de4f327
 8002c10:	37938317 	.word	0x37938317
 8002c14:	42c80000 	.word	0x42c80000

08002c18 <MAX31865_readTemp>:

float MAX31865_readTemp()
{
 8002c18:	b507      	push	{r0, r1, r2, lr}
	MAX31865_write(0, 0xB2);
 8002c1a:	21b2      	movs	r1, #178	; 0xb2
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f7ff fef5 	bl	8002a0c <MAX31865_write>
	HAL_Delay(100);
 8002c22:	2064      	movs	r0, #100	; 0x64
 8002c24:	f7fe fac2 	bl	80011ac <HAL_Delay>

    // Read data from max31865 data registers
    uint8_t max3[2];
    MAX31865_read(MAX31856_RTDMSB_REG, max3, 2);
 8002c28:	a901      	add	r1, sp, #4
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f7ff fec5 	bl	80029bc <MAX31865_read>
 8002c32:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002c36:	ba40      	rev16	r0, r0
    data |= max3[1];
    data >>= 1;
//  DBG_print("data=%02x \r\n",data);

    // Calculate the temperature from the measured resistance
    float temp = temperature(100, RREF, (float) data );
 8002c38:	f3c0 004e 	ubfx	r0, r0, #1, #15
 8002c3c:	f7fe f850 	bl	8000ce0 <__aeabi_ui2f>
 8002c40:	4903      	ldr	r1, [pc, #12]	; (8002c50 <MAX31865_readTemp+0x38>)
 8002c42:	4602      	mov	r2, r0
 8002c44:	4803      	ldr	r0, [pc, #12]	; (8002c54 <MAX31865_readTemp+0x3c>)
 8002c46:	f7ff ff03 	bl	8002a50 <temperature>

    return temp;
}
 8002c4a:	b003      	add	sp, #12
 8002c4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c50:	43d70000 	.word	0x43d70000
 8002c54:	42c80000 	.word	0x42c80000

08002c58 <HAL_UART_RxCpltCallback>:
uint8_t rx_buffer[128] = {0};
//uint8_t version[] = "v1.0 \r\n";

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == USART2)
 8002c58:	6802      	ldr	r2, [r0, #0]
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <HAL_UART_RxCpltCallback+0x34>)
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d110      	bne.n	8002c82 <HAL_UART_RxCpltCallback+0x2a>
	{
		if (rx_index < 128) {
 8002c60:	490b      	ldr	r1, [pc, #44]	; (8002c90 <HAL_UART_RxCpltCallback+0x38>)
 8002c62:	4a0c      	ldr	r2, [pc, #48]	; (8002c94 <HAL_UART_RxCpltCallback+0x3c>)
 8002c64:	780b      	ldrb	r3, [r1, #0]
 8002c66:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002c6a:	d104      	bne.n	8002c76 <HAL_UART_RxCpltCallback+0x1e>
			rx_buffer[rx_index++] = rx_data;
 8002c6c:	1c58      	adds	r0, r3, #1
 8002c6e:	7008      	strb	r0, [r1, #0]
 8002c70:	7810      	ldrb	r0, [r2, #0]
 8002c72:	4909      	ldr	r1, [pc, #36]	; (8002c98 <HAL_UART_RxCpltCallback+0x40>)
 8002c74:	54c8      	strb	r0, [r1, r3]
		}

		if (rx_data == '\r') {
 8002c76:	7813      	ldrb	r3, [r2, #0]
 8002c78:	2b0d      	cmp	r3, #13
			proceed_checksum = 1;
 8002c7a:	bf02      	ittt	eq
 8002c7c:	2201      	moveq	r2, #1
 8002c7e:	4b07      	ldreq	r3, [pc, #28]	; (8002c9c <HAL_UART_RxCpltCallback+0x44>)
 8002c80:	701a      	strbeq	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8002c82:	2201      	movs	r2, #1
 8002c84:	4903      	ldr	r1, [pc, #12]	; (8002c94 <HAL_UART_RxCpltCallback+0x3c>)
 8002c86:	4806      	ldr	r0, [pc, #24]	; (8002ca0 <HAL_UART_RxCpltCallback+0x48>)
 8002c88:	f7ff bb14 	b.w	80022b4 <HAL_UART_Receive_IT>
 8002c8c:	40004400 	.word	0x40004400
 8002c90:	20000305 	.word	0x20000305
 8002c94:	20000450 	.word	0x20000450
 8002c98:	20000285 	.word	0x20000285
 8002c9c:	20000283 	.word	0x20000283
 8002ca0:	200004ac 	.word	0x200004ac

08002ca4 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8002ca8:	b510      	push	{r4, lr}
 8002caa:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cac:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cae:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002cb0:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cb2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cb4:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002cb6:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cb8:	f7fe fc32 	bl	8001520 <HAL_RCC_OscConfig>
 8002cbc:	4601      	mov	r1, r0
 8002cbe:	b100      	cbz	r0, 8002cc2 <SystemClock_Config+0x1e>
 8002cc0:	e7fe      	b.n	8002cc0 <SystemClock_Config+0x1c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cc2:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cc4:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cc6:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cc8:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002cca:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002ccc:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cce:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002cd0:	f7fe fdee 	bl	80018b0 <HAL_RCC_ClockConfig>
 8002cd4:	4604      	mov	r4, r0
 8002cd6:	b100      	cbz	r0, 8002cda <SystemClock_Config+0x36>
 8002cd8:	e7fe      	b.n	8002cd8 <SystemClock_Config+0x34>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002cda:	f7fe fe8d 	bl	80019f8 <HAL_RCC_GetHCLKFreq>
 8002cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ce2:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ce6:	f7fe fac5 	bl	8001274 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002cea:	2004      	movs	r0, #4
 8002cec:	f7fe fad8 	bl	80012a0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002cf0:	4622      	mov	r2, r4
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf8:	f7fe fa7c 	bl	80011f4 <HAL_NVIC_SetPriority>
}
 8002cfc:	b010      	add	sp, #64	; 0x40
 8002cfe:	bd10      	pop	{r4, pc}

08002d00 <main>:
{
 8002d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d04:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8002d06:	f7fe fa2d 	bl	8001164 <HAL_Init>
  SystemClock_Config();
 8002d0a:	f7ff ffcb 	bl	8002ca4 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d0e:	4bab      	ldr	r3, [pc, #684]	; (8002fbc <main+0x2bc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002d10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d14:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002d16:	48aa      	ldr	r0, [pc, #680]	; (8002fc0 <main+0x2c0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d18:	f042 0220 	orr.w	r2, r2, #32
 8002d1c:	619a      	str	r2, [r3, #24]
 8002d1e:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d20:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d22:	f002 0220 	and.w	r2, r2, #32
 8002d26:	9204      	str	r2, [sp, #16]
 8002d28:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2a:	699a      	ldr	r2, [r3, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d2c:	f44f 7682 	mov.w	r6, #260	; 0x104
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d30:	f042 0204 	orr.w	r2, r2, #4
 8002d34:	619a      	str	r2, [r3, #24]
 8002d36:	699a      	ldr	r2, [r3, #24]
 8002d38:	f002 0204 	and.w	r2, r2, #4
 8002d3c:	9205      	str	r2, [sp, #20]
 8002d3e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	f042 0208 	orr.w	r2, r2, #8
 8002d46:	619a      	str	r2, [r3, #24]
 8002d48:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002d4a:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	9306      	str	r3, [sp, #24]
 8002d52:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002d54:	f7fe fbde 	bl	8001514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002d5e:	4899      	ldr	r0, [pc, #612]	; (8002fc4 <main+0x2c4>)
 8002d60:	f7fe fbd8 	bl	8001514 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d68:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d6a:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6c:	a907      	add	r1, sp, #28
 8002d6e:	4894      	ldr	r0, [pc, #592]	; (8002fc0 <main+0x2c0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d70:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d72:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d74:	f7fe faee 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d7c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d80:	4890      	ldr	r0, [pc, #576]	; (8002fc4 <main+0x2c4>)
 8002d82:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d84:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d86:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d88:	f7fe fae4 	bl	8001354 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 8002d8c:	488e      	ldr	r0, [pc, #568]	; (8002fc8 <main+0x2c8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d8e:	4b8f      	ldr	r3, [pc, #572]	; (8002fcc <main+0x2cc>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d90:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d94:	e880 0048 	stmia.w	r0, {r3, r6}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d98:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d9a:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d9c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d9e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002da0:	6103      	str	r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002da2:	2238      	movs	r2, #56	; 0x38
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002da4:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002da6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002daa:	230a      	movs	r3, #10
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002dac:	6145      	str	r5, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002dae:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 8002db0:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002db2:	f7ff f8e6 	bl	8001f82 <HAL_SPI_Init>
 8002db6:	b100      	cbz	r0, 8002dba <main+0xba>
 8002db8:	e7fe      	b.n	8002db8 <main+0xb8>
  huart2.Init.BaudRate = 9600;
 8002dba:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart2.Instance = USART2;
 8002dbe:	4c84      	ldr	r4, [pc, #528]	; (8002fd0 <main+0x2d0>)
  huart2.Init.BaudRate = 9600;
 8002dc0:	4a84      	ldr	r2, [pc, #528]	; (8002fd4 <main+0x2d4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dc2:	60a0      	str	r0, [r4, #8]
  huart2.Init.BaudRate = 9600;
 8002dc4:	e884 000c 	stmia.w	r4, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002dc8:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dca:	60e0      	str	r0, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dcc:	6120      	str	r0, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dce:	61a0      	str	r0, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dd0:	61e0      	str	r0, [r4, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dd2:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002dd4:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dd6:	f7ff f9e3 	bl	80021a0 <HAL_UART_Init>
 8002dda:	b100      	cbz	r0, 8002dde <main+0xde>
 8002ddc:	e7fe      	b.n	8002ddc <main+0xdc>
  DBG_setup(printchar);
 8002dde:	487e      	ldr	r0, [pc, #504]	; (8002fd8 <main+0x2d8>)
 8002de0:	f7ff fc78 	bl	80026d4 <DBG_setup>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8002de4:	462a      	mov	r2, r5
 8002de6:	497d      	ldr	r1, [pc, #500]	; (8002fdc <main+0x2dc>)
 8002de8:	4620      	mov	r0, r4
 8002dea:	f7ff fa63 	bl	80022b4 <HAL_UART_Receive_IT>
	uint32_t Delay = 1000;	//Default 1s
 8002dee:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		  if (temp > 0 && temp < 850) {
 8002df2:	f04f 0b00 	mov.w	fp, #0
	  DBG_print(rx_buffer);
 8002df6:	4e7a      	ldr	r6, [pc, #488]	; (8002fe0 <main+0x2e0>)
 8002df8:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8003028 <main+0x328>
	  if (proceed_checksum != 0) {
 8002dfc:	4f79      	ldr	r7, [pc, #484]	; (8002fe4 <main+0x2e4>)
	  DBG_print(rx_buffer);
 8002dfe:	4630      	mov	r0, r6
 8002e00:	f7ff fc78 	bl	80026f4 <DBG_print>
	  if (proceed_checksum != 0) {
 8002e04:	783b      	ldrb	r3, [r7, #0]
 8002e06:	4c78      	ldr	r4, [pc, #480]	; (8002fe8 <main+0x2e8>)
 8002e08:	b18b      	cbz	r3, 8002e2e <main+0x12e>
		  result = compareChecksum(rx_buffer);
 8002e0a:	4630      	mov	r0, r6
 8002e0c:	f7ff fb92 	bl	8002534 <compareChecksum>
		  if (result != 0 ) {
 8002e10:	f010 0fff 	tst.w	r0, #255	; 0xff
			  	DBG_print("Data: %s \r\n", s.data);
 8002e14:	4975      	ldr	r1, [pc, #468]	; (8002fec <main+0x2ec>)
 8002e16:	4876      	ldr	r0, [pc, #472]	; (8002ff0 <main+0x2f0>)
		  if (result != 0 ) {
 8002e18:	f000 809c 	beq.w	8002f54 <main+0x254>
			  	DBG_print("Data: %s \r\n", s.data);
 8002e1c:	f7ff fc6a 	bl	80026f4 <DBG_print>
				DBG_print(" True Data \r\n");
 8002e20:	4874      	ldr	r0, [pc, #464]	; (8002ff4 <main+0x2f4>)
 8002e22:	f7ff fc67 	bl	80026f4 <DBG_print>
				proceed_ReceiveData = 1;
 8002e26:	2301      	movs	r3, #1
 8002e28:	7023      	strb	r3, [r4, #0]
		  proceed_checksum = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	703b      	strb	r3, [r7, #0]
	  if (proceed_ReceiveData != 0) {
 8002e2e:	7823      	ldrb	r3, [r4, #0]
 8002e30:	b35b      	cbz	r3, 8002e8a <main+0x18a>
		  memset(configTime, 0, 50);
 8002e32:	2100      	movs	r1, #0
 8002e34:	2232      	movs	r2, #50	; 0x32
 8002e36:	a807      	add	r0, sp, #28
 8002e38:	f000 fa7b 	bl	8003332 <memset>
		  for (uint8_t k=0; k < strlen(rx_buffer); k++)
 8002e3c:	4630      	mov	r0, r6
 8002e3e:	f7fd f991 	bl	8000164 <strlen>
 8002e42:	2300      	movs	r3, #0
 8002e44:	4619      	mov	r1, r3
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	4290      	cmp	r0, r2
 8002e4a:	d90e      	bls.n	8002e6a <main+0x16a>
				if (rx_buffer[k] == ',') {
 8002e4c:	5cb5      	ldrb	r5, [r6, r2]
 8002e4e:	2d2c      	cmp	r5, #44	; 0x2c
 8002e50:	f000 8089 	beq.w	8002f66 <main+0x266>
				if (rx_buffer[k] == '*') {
 8002e54:	2d2a      	cmp	r5, #42	; 0x2a
 8002e56:	f040 8087 	bne.w	8002f68 <main+0x268>
					uint8_t lenNum = k - count;
 8002e5a:	1a52      	subs	r2, r2, r1
					memcpy(configTime, &rx_buffer[count + 1], lenNum - 1);
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	3101      	adds	r1, #1
 8002e60:	3a01      	subs	r2, #1
 8002e62:	4431      	add	r1, r6
 8002e64:	a807      	add	r0, sp, #28
 8002e66:	f000 fa59 	bl	800331c <memcpy>
			DBG_print("configTime: %s \r\n", configTime);
 8002e6a:	a907      	add	r1, sp, #28
 8002e6c:	4862      	ldr	r0, [pc, #392]	; (8002ff8 <main+0x2f8>)
 8002e6e:	f7ff fc41 	bl	80026f4 <DBG_print>
			Time = atol (configTime); //Doi sang kieu so nguyen
 8002e72:	a807      	add	r0, sp, #28
 8002e74:	f000 fa29 	bl	80032ca <atol>
			if (Time == 0)
 8002e78:	4605      	mov	r5, r0
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	d176      	bne.n	8002f6c <main+0x26c>
				Delay = 1000;
 8002e7e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
				proceed_flag = 0;
 8002e82:	f889 0000 	strb.w	r0, [r9]
			proceed_ReceiveData = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	7023      	strb	r3, [r4, #0]
	  if (proceed_flag != 0)
 8002e8a:	f899 3000 	ldrb.w	r3, [r9]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d055      	beq.n	8002f3e <main+0x23e>
		  float temp = MAX31865_readTemp();
 8002e92:	f7ff fec1 	bl	8002c18 <MAX31865_readTemp>
		  if (temp > 0 && temp < 850) {
 8002e96:	4659      	mov	r1, fp
		  float temp = MAX31865_readTemp();
 8002e98:	4680      	mov	r8, r0
		  if (temp > 0 && temp < 850) {
 8002e9a:	f7fe f935 	bl	8001108 <__aeabi_fcmpgt>
 8002e9e:	4f57      	ldr	r7, [pc, #348]	; (8002ffc <main+0x2fc>)
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	d06b      	beq.n	8002f7c <main+0x27c>
 8002ea4:	4956      	ldr	r1, [pc, #344]	; (8003000 <main+0x300>)
 8002ea6:	4640      	mov	r0, r8
 8002ea8:	f7fe f910 	bl	80010cc <__aeabi_fcmplt>
 8002eac:	2800      	cmp	r0, #0
 8002eae:	d065      	beq.n	8002f7c <main+0x27c>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);	//Led Do sang
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eb6:	4843      	ldr	r0, [pc, #268]	; (8002fc4 <main+0x2c4>)
 8002eb8:	f7fe fb2c 	bl	8001514 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);	//Led Xanh tat
 8002ebc:	2200      	movs	r2, #0
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);	//Led Xanh sang
 8002ebe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ec2:	4840      	ldr	r0, [pc, #256]	; (8002fc4 <main+0x2c4>)
 8002ec4:	f7fe fb26 	bl	8001514 <HAL_GPIO_WritePin>
			  proceed_TransmitData = 1;
 8002ec8:	2301      	movs	r3, #1
			  proceed_TransmitData = 0;
 8002eca:	703b      	strb	r3, [r7, #0]
		  if (proceed_TransmitData == 1) {
 8002ecc:	783b      	ldrb	r3, [r7, #0]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d133      	bne.n	8002f3a <main+0x23a>
			  memset(A.readData, 0, 128);
 8002ed2:	2280      	movs	r2, #128	; 0x80
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	484b      	ldr	r0, [pc, #300]	; (8003004 <main+0x304>)
 8002ed8:	f000 fa2b 	bl	8003332 <memset>
			  memset(A.Convert, 0, 50);
 8002edc:	2232      	movs	r2, #50	; 0x32
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4849      	ldr	r0, [pc, #292]	; (8003008 <main+0x308>)
 8002ee2:	f000 fa26 	bl	8003332 <memset>
			  memset(A.checksum, 0, 2);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	4c48      	ldr	r4, [pc, #288]	; (800300c <main+0x30c>)
			  SL_double2s(temp, sizeof(A.Convert), A.Convert);
 8002eea:	4640      	mov	r0, r8
			  memset(A.checksum, 0, 2);
 8002eec:	8023      	strh	r3, [r4, #0]
			  SL_double2s(temp, sizeof(A.Convert), A.Convert);
 8002eee:	f7fd faa5 	bl	800043c <__aeabi_f2d>
 8002ef2:	1ca3      	adds	r3, r4, #2
 8002ef4:	2232      	movs	r2, #50	; 0x32
 8002ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002efa:	f000 f95d 	bl	80031b8 <SL_double2s>
			  count1 = strlen(A.Convert);
 8002efe:	1ca0      	adds	r0, r4, #2
 8002f00:	f7fd f930 	bl	8000164 <strlen>
			  memcpy(&string[6], A.Convert, count1);
 8002f04:	f8df a124 	ldr.w	sl, [pc, #292]	; 800302c <main+0x32c>
 8002f08:	fa5f f880 	uxtb.w	r8, r0
 8002f0c:	4642      	mov	r2, r8
 8002f0e:	1ca1      	adds	r1, r4, #2
 8002f10:	f10a 0006 	add.w	r0, sl, #6
 8002f14:	f000 fa02 	bl	800331c <memcpy>
			  memcpy(&string[count1 + 6], "*", 1);
 8002f18:	232a      	movs	r3, #42	; 0x2a
			  valueChecksum(string, A.readData, A.checksum);
 8002f1a:	4622      	mov	r2, r4
 8002f1c:	4650      	mov	r0, sl
			  memcpy(&string[count1 + 6], "*", 1);
 8002f1e:	f108 0806 	add.w	r8, r8, #6
			  valueChecksum(string, A.readData, A.checksum);
 8002f22:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
			  memcpy(&string[count1 + 6], "*", 1);
 8002f26:	f80a 3008 	strb.w	r3, [sl, r8]
			  valueChecksum(string, A.readData, A.checksum);
 8002f2a:	f7ff fad3 	bl	80024d4 <valueChecksum>
			  DBG_print("$TEMP,%f*%s\r\n", temp, A.checksum);
 8002f2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f32:	9400      	str	r4, [sp, #0]
 8002f34:	4836      	ldr	r0, [pc, #216]	; (8003010 <main+0x310>)
 8002f36:	f7ff fbdd 	bl	80026f4 <DBG_print>
		  proceed_TransmitData = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	703b      	strb	r3, [r7, #0]
	  rx_index = 0;
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4b34      	ldr	r3, [pc, #208]	; (8003014 <main+0x314>)
	  memset(rx_buffer, 0, 128);
 8002f42:	2280      	movs	r2, #128	; 0x80
 8002f44:	4630      	mov	r0, r6
	  rx_index = 0;
 8002f46:	7019      	strb	r1, [r3, #0]
	  memset(rx_buffer, 0, 128);
 8002f48:	f000 f9f3 	bl	8003332 <memset>
	  HAL_Delay(Delay);
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	f7fe f92d 	bl	80011ac <HAL_Delay>
	  DBG_print(rx_buffer);
 8002f52:	e753      	b.n	8002dfc <main+0xfc>
				DBG_print("Data: %s \r\n", s.data);
 8002f54:	f7ff fbce 	bl	80026f4 <DBG_print>
				DBG_print(s.CheckXOR);
 8002f58:	482f      	ldr	r0, [pc, #188]	; (8003018 <main+0x318>)
 8002f5a:	f7ff fbcb 	bl	80026f4 <DBG_print>
				DBG_print(" False Data \r\n");
 8002f5e:	482f      	ldr	r0, [pc, #188]	; (800301c <main+0x31c>)
 8002f60:	f7ff fbc8 	bl	80026f4 <DBG_print>
 8002f64:	e761      	b.n	8002e2a <main+0x12a>
 8002f66:	4611      	mov	r1, r2
 8002f68:	3301      	adds	r3, #1
 8002f6a:	e76c      	b.n	8002e46 <main+0x146>
				proceed_flag = 1;
 8002f6c:	2301      	movs	r3, #1
				DBG_print("Delay=%d \r\n",Delay);
 8002f6e:	4601      	mov	r1, r0
 8002f70:	482b      	ldr	r0, [pc, #172]	; (8003020 <main+0x320>)
				proceed_flag = 1;
 8002f72:	f889 3000 	strb.w	r3, [r9]
				DBG_print("Delay=%d \r\n",Delay);
 8002f76:	f7ff fbbd 	bl	80026f4 <DBG_print>
 8002f7a:	e784      	b.n	8002e86 <main+0x186>
		  } else if (temp > -200 && temp < 0) {
 8002f7c:	4929      	ldr	r1, [pc, #164]	; (8003024 <main+0x324>)
 8002f7e:	4640      	mov	r0, r8
 8002f80:	f7fe f8c2 	bl	8001108 <__aeabi_fcmpgt>
 8002f84:	b160      	cbz	r0, 8002fa0 <main+0x2a0>
 8002f86:	4659      	mov	r1, fp
 8002f88:	4640      	mov	r0, r8
 8002f8a:	f7fe f89f 	bl	80010cc <__aeabi_fcmplt>
 8002f8e:	b138      	cbz	r0, 8002fa0 <main+0x2a0>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);	//Led Do tat
 8002f90:	2200      	movs	r2, #0
 8002f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f96:	480b      	ldr	r0, [pc, #44]	; (8002fc4 <main+0x2c4>)
 8002f98:	f7fe fabc 	bl	8001514 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);	//Led Xanh sang
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	e78e      	b.n	8002ebe <main+0x1be>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fa6:	4807      	ldr	r0, [pc, #28]	; (8002fc4 <main+0x2c4>)
 8002fa8:	f7fe fab4 	bl	8001514 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8002fac:	2200      	movs	r2, #0
 8002fae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fb2:	4804      	ldr	r0, [pc, #16]	; (8002fc4 <main+0x2c4>)
 8002fb4:	f7fe faae 	bl	8001514 <HAL_GPIO_WritePin>
			  proceed_TransmitData = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e786      	b.n	8002eca <main+0x1ca>
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40010800 	.word	0x40010800
 8002fc4:	40010c00 	.word	0x40010c00
 8002fc8:	20000454 	.word	0x20000454
 8002fcc:	40013000 	.word	0x40013000
 8002fd0:	200004ac 	.word	0x200004ac
 8002fd4:	40004400 	.word	0x40004400
 8002fd8:	08002975 	.word	0x08002975
 8002fdc:	20000450 	.word	0x20000450
 8002fe0:	20000285 	.word	0x20000285
 8002fe4:	20000283 	.word	0x20000283
 8002fe8:	20000281 	.word	0x20000281
 8002fec:	20000318 	.word	0x20000318
 8002ff0:	08003fb5 	.word	0x08003fb5
 8002ff4:	08003fc1 	.word	0x08003fc1
 8002ff8:	08003fde 	.word	0x08003fde
 8002ffc:	20000282 	.word	0x20000282
 8003000:	44548000 	.word	0x44548000
 8003004:	2000039c 	.word	0x2000039c
 8003008:	2000041e 	.word	0x2000041e
 800300c:	2000041c 	.word	0x2000041c
 8003010:	08003ffc 	.word	0x08003ffc
 8003014:	20000305 	.word	0x20000305
 8003018:	20000398 	.word	0x20000398
 800301c:	08003fcf 	.word	0x08003fcf
 8003020:	08003ff0 	.word	0x08003ff0
 8003024:	c3480000 	.word	0xc3480000
 8003028:	20000284 	.word	0x20000284
 800302c:	20000008 	.word	0x20000008

08003030 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003030:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <HAL_MspInit+0x84>)
{
 8003032:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003034:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003036:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003038:	f042 0201 	orr.w	r2, r2, #1
 800303c:	619a      	str	r2, [r3, #24]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	9301      	str	r3, [sp, #4]
 8003046:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003048:	f7fe f8c2 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800304c:	2200      	movs	r2, #0
 800304e:	f06f 000b 	mvn.w	r0, #11
 8003052:	4611      	mov	r1, r2
 8003054:	f7fe f8ce 	bl	80011f4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003058:	2200      	movs	r2, #0
 800305a:	f06f 000a 	mvn.w	r0, #10
 800305e:	4611      	mov	r1, r2
 8003060:	f7fe f8c8 	bl	80011f4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003064:	2200      	movs	r2, #0
 8003066:	f06f 0009 	mvn.w	r0, #9
 800306a:	4611      	mov	r1, r2
 800306c:	f7fe f8c2 	bl	80011f4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003070:	2200      	movs	r2, #0
 8003072:	f06f 0004 	mvn.w	r0, #4
 8003076:	4611      	mov	r1, r2
 8003078:	f7fe f8bc 	bl	80011f4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800307c:	2200      	movs	r2, #0
 800307e:	f06f 0003 	mvn.w	r0, #3
 8003082:	4611      	mov	r1, r2
 8003084:	f7fe f8b6 	bl	80011f4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003088:	2200      	movs	r2, #0
 800308a:	f06f 0001 	mvn.w	r0, #1
 800308e:	4611      	mov	r1, r2
 8003090:	f7fe f8b0 	bl	80011f4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003094:	2200      	movs	r2, #0
 8003096:	f04f 30ff 	mov.w	r0, #4294967295
 800309a:	4611      	mov	r1, r2
 800309c:	f7fe f8aa 	bl	80011f4 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80030a0:	4a05      	ldr	r2, [pc, #20]	; (80030b8 <HAL_MspInit+0x88>)
 80030a2:	6853      	ldr	r3, [r2, #4]
 80030a4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80030a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030ae:	b003      	add	sp, #12
 80030b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40010000 	.word	0x40010000

080030bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80030be:	6802      	ldr	r2, [r0, #0]
 80030c0:	4b15      	ldr	r3, [pc, #84]	; (8003118 <HAL_SPI_MspInit+0x5c>)
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d124      	bne.n	8003110 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030c6:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80030ca:	699a      	ldr	r2, [r3, #24]
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030cc:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030d2:	619a      	str	r2, [r3, #24]
 80030d4:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d6:	4811      	ldr	r0, [pc, #68]	; (800311c <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030dc:	9301      	str	r3, [sp, #4]
 80030de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80030e0:	2328      	movs	r3, #40	; 0x28
 80030e2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e4:	2302      	movs	r3, #2
 80030e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030e8:	2303      	movs	r3, #3
 80030ea:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ec:	f7fe f932 	bl	8001354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030f0:	2310      	movs	r3, #16
 80030f2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030f4:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f6:	a902      	add	r1, sp, #8
 80030f8:	4808      	ldr	r0, [pc, #32]	; (800311c <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030fe:	f7fe f929 	bl	8001354 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003102:	4a07      	ldr	r2, [pc, #28]	; (8003120 <HAL_SPI_MspInit+0x64>)
 8003104:	6853      	ldr	r3, [r2, #4]
 8003106:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003110:	b007      	add	sp, #28
 8003112:	f85d fb04 	ldr.w	pc, [sp], #4
 8003116:	bf00      	nop
 8003118:	40013000 	.word	0x40013000
 800311c:	40010c00 	.word	0x40010c00
 8003120:	40010000 	.word	0x40010000

08003124 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003124:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8003126:	6802      	ldr	r2, [r0, #0]
 8003128:	4b16      	ldr	r3, [pc, #88]	; (8003184 <HAL_UART_MspInit+0x60>)
{
 800312a:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 800312c:	429a      	cmp	r2, r3
 800312e:	d126      	bne.n	800317e <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003130:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003134:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003136:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8003138:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800313c:	61da      	str	r2, [r3, #28]
 800313e:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003140:	4811      	ldr	r0, [pc, #68]	; (8003188 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	9301      	str	r3, [sp, #4]
 8003148:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800314a:	2304      	movs	r3, #4
 800314c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314e:	2302      	movs	r3, #2
 8003150:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003152:	2303      	movs	r3, #3
 8003154:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003156:	f7fe f8fd 	bl	8001354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800315a:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800315c:	2400      	movs	r4, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315e:	eb0d 0103 	add.w	r1, sp, r3
 8003162:	4809      	ldr	r0, [pc, #36]	; (8003188 <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003164:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003166:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316a:	f7fe f8f3 	bl	8001354 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800316e:	2026      	movs	r0, #38	; 0x26
 8003170:	4622      	mov	r2, r4
 8003172:	4621      	mov	r1, r4
 8003174:	f7fe f83e 	bl	80011f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003178:	2026      	movs	r0, #38	; 0x26
 800317a:	f7fe f86f 	bl	800125c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800317e:	b006      	add	sp, #24
 8003180:	bd10      	pop	{r4, pc}
 8003182:	bf00      	nop
 8003184:	40004400 	.word	0x40004400
 8003188:	40010800 	.word	0x40010800

0800318c <NMI_Handler>:
 800318c:	4770      	bx	lr

0800318e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800318e:	e7fe      	b.n	800318e <HardFault_Handler>

08003190 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003190:	e7fe      	b.n	8003190 <MemManage_Handler>

08003192 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003192:	e7fe      	b.n	8003192 <BusFault_Handler>

08003194 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003194:	e7fe      	b.n	8003194 <UsageFault_Handler>

08003196 <SVC_Handler>:
 8003196:	4770      	bx	lr

08003198 <DebugMon_Handler>:
 8003198:	4770      	bx	lr

0800319a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800319a:	4770      	bx	lr

0800319c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800319c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800319e:	f7fd fff3 	bl	8001188 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80031a6:	f7fe b888 	b.w	80012ba <HAL_SYSTICK_IRQHandler>
	...

080031ac <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031ac:	4801      	ldr	r0, [pc, #4]	; (80031b4 <USART2_IRQHandler+0x8>)
 80031ae:	f7ff b8e9 	b.w	8002384 <HAL_UART_IRQHandler>
 80031b2:	bf00      	nop
 80031b4:	200004ac 	.word	0x200004ac

080031b8 <SL_double2s>:
 * 			s		|	OUT	|	output buffer 's'
 * Ret:	pointer to output buffer 's'.
 * Note: size should be larger than 11
 *----------------------------------------------------------------------------*/
U8 *SL_double2s(double input, U32 size, U8 *s)
{
 80031b8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80031bc:	4615      	mov	r5, r2
 80031be:	461c      	mov	r4, r3
 80031c0:	4689      	mov	r9, r1
 80031c2:	4680      	mov	r8, r0
	int intg = 0;
	U16 len = 0;
	U32 dec = 0;

	intg = (int)input;
 80031c4:	f7fd fc3e 	bl	8000a44 <__aeabi_d2iz>
 80031c8:	4606      	mov	r6, r0
	input -= intg;
 80031ca:	f7fd f925 	bl	8000418 <__aeabi_i2d>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4640      	mov	r0, r8
 80031d4:	4649      	mov	r1, r9
 80031d6:	f7fc ffd1 	bl	800017c <__aeabi_dsub>
	dec = (U32)(input * 1000000);
 80031da:	a313      	add	r3, pc, #76	; (adr r3, 8003228 <SL_double2s+0x70>)
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	f7fd f980 	bl	80004e4 <__aeabi_dmul>
 80031e4:	f7fd fc56 	bl	8000a94 <__aeabi_d2uiz>
	snprintf(s, size, "%d.%06lu", intg, dec);
 80031e8:	4633      	mov	r3, r6
 80031ea:	9000      	str	r0, [sp, #0]
 80031ec:	4629      	mov	r1, r5
 80031ee:	4a10      	ldr	r2, [pc, #64]	; (8003230 <SL_double2s+0x78>)
 80031f0:	4620      	mov	r0, r4
 80031f2:	f000 f8a7 	bl	8003344 <sniprintf>
	s[size - 1] = 0;
 80031f6:	1963      	adds	r3, r4, r5
 80031f8:	2500      	movs	r5, #0
	len = strlen(s);
 80031fa:	4620      	mov	r0, r4
	s[size - 1] = 0;
 80031fc:	f803 5c01 	strb.w	r5, [r3, #-1]
	len = strlen(s);
 8003200:	f7fc ffb0 	bl	8000164 <strlen>
	for (U16 i = (len - 1); i > 0; i--)
 8003204:	3801      	subs	r0, #1
 8003206:	b280      	uxth	r0, r0
 8003208:	b918      	cbnz	r0, 8003212 <SL_double2s+0x5a>
			break;
		}
		s[i] = 0;
	}
	return s;
}
 800320a:	4620      	mov	r0, r4
 800320c:	b002      	add	sp, #8
 800320e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		if (s[i - 1] == '.')
 8003212:	1823      	adds	r3, r4, r0
 8003214:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8003218:	2a2e      	cmp	r2, #46	; 0x2e
 800321a:	d0f6      	beq.n	800320a <SL_double2s+0x52>
		else if (s[i] != '0')
 800321c:	5c22      	ldrb	r2, [r4, r0]
 800321e:	2a30      	cmp	r2, #48	; 0x30
 8003220:	d1f3      	bne.n	800320a <SL_double2s+0x52>
		s[i] = 0;
 8003222:	701d      	strb	r5, [r3, #0]
 8003224:	e7ee      	b.n	8003204 <SL_double2s+0x4c>
 8003226:	bf00      	nop
 8003228:	00000000 	.word	0x00000000
 800322c:	412e8480 	.word	0x412e8480
 8003230:	0800400a 	.word	0x0800400a

08003234 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <SystemInit+0x40>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	f042 0201 	orr.w	r2, r2, #1
 800323c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	4a0d      	ldr	r2, [pc, #52]	; (8003278 <SystemInit+0x44>)
 8003242:	400a      	ands	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800324c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003250:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003258:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003260:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003262:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003266:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003268:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <SystemInit+0x48>)
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
 8003278:	f8ff0000 	.word	0xf8ff0000
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003280:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003282:	e003      	b.n	800328c <LoopCopyDataInit>

08003284 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003286:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003288:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800328a:	3104      	adds	r1, #4

0800328c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800328c:	480a      	ldr	r0, [pc, #40]	; (80032b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800328e:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003290:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003292:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003294:	d3f6      	bcc.n	8003284 <CopyDataInit>
  ldr r2, =_sbss
 8003296:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003298:	e002      	b.n	80032a0 <LoopFillZerobss>

0800329a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800329a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800329c:	f842 3b04 	str.w	r3, [r2], #4

080032a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80032a0:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80032a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80032a4:	d3f9      	bcc.n	800329a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80032a6:	f7ff ffc5 	bl	8003234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032aa:	f000 f813 	bl	80032d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032ae:	f7ff fd27 	bl	8002d00 <main>
  bx lr
 80032b2:	4770      	bx	lr
  ldr r3, =_sidata
 80032b4:	08004178 	.word	0x08004178
  ldr r0, =_sdata
 80032b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80032bc:	20000260 	.word	0x20000260
  ldr r2, =_sbss
 80032c0:	20000260 	.word	0x20000260
  ldr r3, = _ebss
 80032c4:	200004f0 	.word	0x200004f0

080032c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032c8:	e7fe      	b.n	80032c8 <ADC1_2_IRQHandler>

080032ca <atol>:
 80032ca:	220a      	movs	r2, #10
 80032cc:	2100      	movs	r1, #0
 80032ce:	f000 b911 	b.w	80034f4 <strtol>
	...

080032d4 <__libc_init_array>:
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	2500      	movs	r5, #0
 80032d8:	4e0c      	ldr	r6, [pc, #48]	; (800330c <__libc_init_array+0x38>)
 80032da:	4c0d      	ldr	r4, [pc, #52]	; (8003310 <__libc_init_array+0x3c>)
 80032dc:	1ba4      	subs	r4, r4, r6
 80032de:	10a4      	asrs	r4, r4, #2
 80032e0:	42a5      	cmp	r5, r4
 80032e2:	d109      	bne.n	80032f8 <__libc_init_array+0x24>
 80032e4:	f000 fe50 	bl	8003f88 <_init>
 80032e8:	2500      	movs	r5, #0
 80032ea:	4e0a      	ldr	r6, [pc, #40]	; (8003314 <__libc_init_array+0x40>)
 80032ec:	4c0a      	ldr	r4, [pc, #40]	; (8003318 <__libc_init_array+0x44>)
 80032ee:	1ba4      	subs	r4, r4, r6
 80032f0:	10a4      	asrs	r4, r4, #2
 80032f2:	42a5      	cmp	r5, r4
 80032f4:	d105      	bne.n	8003302 <__libc_init_array+0x2e>
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032fc:	4798      	blx	r3
 80032fe:	3501      	adds	r5, #1
 8003300:	e7ee      	b.n	80032e0 <__libc_init_array+0xc>
 8003302:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003306:	4798      	blx	r3
 8003308:	3501      	adds	r5, #1
 800330a:	e7f2      	b.n	80032f2 <__libc_init_array+0x1e>
 800330c:	08004170 	.word	0x08004170
 8003310:	08004170 	.word	0x08004170
 8003314:	08004170 	.word	0x08004170
 8003318:	08004174 	.word	0x08004174

0800331c <memcpy>:
 800331c:	b510      	push	{r4, lr}
 800331e:	1e43      	subs	r3, r0, #1
 8003320:	440a      	add	r2, r1
 8003322:	4291      	cmp	r1, r2
 8003324:	d100      	bne.n	8003328 <memcpy+0xc>
 8003326:	bd10      	pop	{r4, pc}
 8003328:	f811 4b01 	ldrb.w	r4, [r1], #1
 800332c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003330:	e7f7      	b.n	8003322 <memcpy+0x6>

08003332 <memset>:
 8003332:	4603      	mov	r3, r0
 8003334:	4402      	add	r2, r0
 8003336:	4293      	cmp	r3, r2
 8003338:	d100      	bne.n	800333c <memset+0xa>
 800333a:	4770      	bx	lr
 800333c:	f803 1b01 	strb.w	r1, [r3], #1
 8003340:	e7f9      	b.n	8003336 <memset+0x4>
	...

08003344 <sniprintf>:
 8003344:	b40c      	push	{r2, r3}
 8003346:	b530      	push	{r4, r5, lr}
 8003348:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <sniprintf+0x64>)
 800334a:	1e0c      	subs	r4, r1, #0
 800334c:	b09d      	sub	sp, #116	; 0x74
 800334e:	681d      	ldr	r5, [r3, #0]
 8003350:	da08      	bge.n	8003364 <sniprintf+0x20>
 8003352:	238b      	movs	r3, #139	; 0x8b
 8003354:	f04f 30ff 	mov.w	r0, #4294967295
 8003358:	602b      	str	r3, [r5, #0]
 800335a:	b01d      	add	sp, #116	; 0x74
 800335c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003360:	b002      	add	sp, #8
 8003362:	4770      	bx	lr
 8003364:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003368:	f8ad 3014 	strh.w	r3, [sp, #20]
 800336c:	bf0c      	ite	eq
 800336e:	4623      	moveq	r3, r4
 8003370:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003374:	9304      	str	r3, [sp, #16]
 8003376:	9307      	str	r3, [sp, #28]
 8003378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800337c:	9002      	str	r0, [sp, #8]
 800337e:	9006      	str	r0, [sp, #24]
 8003380:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003384:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003386:	ab21      	add	r3, sp, #132	; 0x84
 8003388:	a902      	add	r1, sp, #8
 800338a:	4628      	mov	r0, r5
 800338c:	9301      	str	r3, [sp, #4]
 800338e:	f000 f937 	bl	8003600 <_svfiprintf_r>
 8003392:	1c43      	adds	r3, r0, #1
 8003394:	bfbc      	itt	lt
 8003396:	238b      	movlt	r3, #139	; 0x8b
 8003398:	602b      	strlt	r3, [r5, #0]
 800339a:	2c00      	cmp	r4, #0
 800339c:	d0dd      	beq.n	800335a <sniprintf+0x16>
 800339e:	2200      	movs	r2, #0
 80033a0:	9b02      	ldr	r3, [sp, #8]
 80033a2:	701a      	strb	r2, [r3, #0]
 80033a4:	e7d9      	b.n	800335a <sniprintf+0x16>
 80033a6:	bf00      	nop
 80033a8:	2000008c 	.word	0x2000008c

080033ac <siprintf>:
 80033ac:	b40e      	push	{r1, r2, r3}
 80033ae:	f44f 7102 	mov.w	r1, #520	; 0x208
 80033b2:	b500      	push	{lr}
 80033b4:	b09c      	sub	sp, #112	; 0x70
 80033b6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80033ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033be:	9104      	str	r1, [sp, #16]
 80033c0:	9107      	str	r1, [sp, #28]
 80033c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80033c6:	ab1d      	add	r3, sp, #116	; 0x74
 80033c8:	9002      	str	r0, [sp, #8]
 80033ca:	9006      	str	r0, [sp, #24]
 80033cc:	4808      	ldr	r0, [pc, #32]	; (80033f0 <siprintf+0x44>)
 80033ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80033d2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80033d6:	6800      	ldr	r0, [r0, #0]
 80033d8:	a902      	add	r1, sp, #8
 80033da:	9301      	str	r3, [sp, #4]
 80033dc:	f000 f910 	bl	8003600 <_svfiprintf_r>
 80033e0:	2200      	movs	r2, #0
 80033e2:	9b02      	ldr	r3, [sp, #8]
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	b01c      	add	sp, #112	; 0x70
 80033e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80033ec:	b003      	add	sp, #12
 80033ee:	4770      	bx	lr
 80033f0:	2000008c 	.word	0x2000008c

080033f4 <_strtol_l.isra.0>:
 80033f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f8:	4680      	mov	r8, r0
 80033fa:	4689      	mov	r9, r1
 80033fc:	4692      	mov	sl, r2
 80033fe:	461f      	mov	r7, r3
 8003400:	468b      	mov	fp, r1
 8003402:	465d      	mov	r5, fp
 8003404:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003406:	f815 4b01 	ldrb.w	r4, [r5], #1
 800340a:	f000 f889 	bl	8003520 <__locale_ctype_ptr_l>
 800340e:	4420      	add	r0, r4
 8003410:	7846      	ldrb	r6, [r0, #1]
 8003412:	f016 0608 	ands.w	r6, r6, #8
 8003416:	d10b      	bne.n	8003430 <_strtol_l.isra.0+0x3c>
 8003418:	2c2d      	cmp	r4, #45	; 0x2d
 800341a:	d10b      	bne.n	8003434 <_strtol_l.isra.0+0x40>
 800341c:	2601      	movs	r6, #1
 800341e:	782c      	ldrb	r4, [r5, #0]
 8003420:	f10b 0502 	add.w	r5, fp, #2
 8003424:	b167      	cbz	r7, 8003440 <_strtol_l.isra.0+0x4c>
 8003426:	2f10      	cmp	r7, #16
 8003428:	d114      	bne.n	8003454 <_strtol_l.isra.0+0x60>
 800342a:	2c30      	cmp	r4, #48	; 0x30
 800342c:	d00a      	beq.n	8003444 <_strtol_l.isra.0+0x50>
 800342e:	e011      	b.n	8003454 <_strtol_l.isra.0+0x60>
 8003430:	46ab      	mov	fp, r5
 8003432:	e7e6      	b.n	8003402 <_strtol_l.isra.0+0xe>
 8003434:	2c2b      	cmp	r4, #43	; 0x2b
 8003436:	bf04      	itt	eq
 8003438:	782c      	ldrbeq	r4, [r5, #0]
 800343a:	f10b 0502 	addeq.w	r5, fp, #2
 800343e:	e7f1      	b.n	8003424 <_strtol_l.isra.0+0x30>
 8003440:	2c30      	cmp	r4, #48	; 0x30
 8003442:	d127      	bne.n	8003494 <_strtol_l.isra.0+0xa0>
 8003444:	782b      	ldrb	r3, [r5, #0]
 8003446:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800344a:	2b58      	cmp	r3, #88	; 0x58
 800344c:	d14b      	bne.n	80034e6 <_strtol_l.isra.0+0xf2>
 800344e:	2710      	movs	r7, #16
 8003450:	786c      	ldrb	r4, [r5, #1]
 8003452:	3502      	adds	r5, #2
 8003454:	2e00      	cmp	r6, #0
 8003456:	bf0c      	ite	eq
 8003458:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800345c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003460:	2200      	movs	r2, #0
 8003462:	fbb1 fef7 	udiv	lr, r1, r7
 8003466:	4610      	mov	r0, r2
 8003468:	fb07 1c1e 	mls	ip, r7, lr, r1
 800346c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003470:	2b09      	cmp	r3, #9
 8003472:	d811      	bhi.n	8003498 <_strtol_l.isra.0+0xa4>
 8003474:	461c      	mov	r4, r3
 8003476:	42a7      	cmp	r7, r4
 8003478:	dd1d      	ble.n	80034b6 <_strtol_l.isra.0+0xc2>
 800347a:	1c53      	adds	r3, r2, #1
 800347c:	d007      	beq.n	800348e <_strtol_l.isra.0+0x9a>
 800347e:	4586      	cmp	lr, r0
 8003480:	d316      	bcc.n	80034b0 <_strtol_l.isra.0+0xbc>
 8003482:	d101      	bne.n	8003488 <_strtol_l.isra.0+0x94>
 8003484:	45a4      	cmp	ip, r4
 8003486:	db13      	blt.n	80034b0 <_strtol_l.isra.0+0xbc>
 8003488:	2201      	movs	r2, #1
 800348a:	fb00 4007 	mla	r0, r0, r7, r4
 800348e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003492:	e7eb      	b.n	800346c <_strtol_l.isra.0+0x78>
 8003494:	270a      	movs	r7, #10
 8003496:	e7dd      	b.n	8003454 <_strtol_l.isra.0+0x60>
 8003498:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800349c:	2b19      	cmp	r3, #25
 800349e:	d801      	bhi.n	80034a4 <_strtol_l.isra.0+0xb0>
 80034a0:	3c37      	subs	r4, #55	; 0x37
 80034a2:	e7e8      	b.n	8003476 <_strtol_l.isra.0+0x82>
 80034a4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80034a8:	2b19      	cmp	r3, #25
 80034aa:	d804      	bhi.n	80034b6 <_strtol_l.isra.0+0xc2>
 80034ac:	3c57      	subs	r4, #87	; 0x57
 80034ae:	e7e2      	b.n	8003476 <_strtol_l.isra.0+0x82>
 80034b0:	f04f 32ff 	mov.w	r2, #4294967295
 80034b4:	e7eb      	b.n	800348e <_strtol_l.isra.0+0x9a>
 80034b6:	1c53      	adds	r3, r2, #1
 80034b8:	d108      	bne.n	80034cc <_strtol_l.isra.0+0xd8>
 80034ba:	2322      	movs	r3, #34	; 0x22
 80034bc:	4608      	mov	r0, r1
 80034be:	f8c8 3000 	str.w	r3, [r8]
 80034c2:	f1ba 0f00 	cmp.w	sl, #0
 80034c6:	d107      	bne.n	80034d8 <_strtol_l.isra.0+0xe4>
 80034c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034cc:	b106      	cbz	r6, 80034d0 <_strtol_l.isra.0+0xdc>
 80034ce:	4240      	negs	r0, r0
 80034d0:	f1ba 0f00 	cmp.w	sl, #0
 80034d4:	d00c      	beq.n	80034f0 <_strtol_l.isra.0+0xfc>
 80034d6:	b122      	cbz	r2, 80034e2 <_strtol_l.isra.0+0xee>
 80034d8:	3d01      	subs	r5, #1
 80034da:	f8ca 5000 	str.w	r5, [sl]
 80034de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034e2:	464d      	mov	r5, r9
 80034e4:	e7f9      	b.n	80034da <_strtol_l.isra.0+0xe6>
 80034e6:	2430      	movs	r4, #48	; 0x30
 80034e8:	2f00      	cmp	r7, #0
 80034ea:	d1b3      	bne.n	8003454 <_strtol_l.isra.0+0x60>
 80034ec:	2708      	movs	r7, #8
 80034ee:	e7b1      	b.n	8003454 <_strtol_l.isra.0+0x60>
 80034f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080034f4 <strtol>:
 80034f4:	4b08      	ldr	r3, [pc, #32]	; (8003518 <strtol+0x24>)
 80034f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034f8:	681c      	ldr	r4, [r3, #0]
 80034fa:	4d08      	ldr	r5, [pc, #32]	; (800351c <strtol+0x28>)
 80034fc:	6a23      	ldr	r3, [r4, #32]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	bf08      	it	eq
 8003502:	462b      	moveq	r3, r5
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	4613      	mov	r3, r2
 8003508:	460a      	mov	r2, r1
 800350a:	4601      	mov	r1, r0
 800350c:	4620      	mov	r0, r4
 800350e:	f7ff ff71 	bl	80033f4 <_strtol_l.isra.0>
 8003512:	b003      	add	sp, #12
 8003514:	bd30      	pop	{r4, r5, pc}
 8003516:	bf00      	nop
 8003518:	2000008c 	.word	0x2000008c
 800351c:	200000f0 	.word	0x200000f0

08003520 <__locale_ctype_ptr_l>:
 8003520:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003524:	4770      	bx	lr

08003526 <__ascii_mbtowc>:
 8003526:	b082      	sub	sp, #8
 8003528:	b901      	cbnz	r1, 800352c <__ascii_mbtowc+0x6>
 800352a:	a901      	add	r1, sp, #4
 800352c:	b142      	cbz	r2, 8003540 <__ascii_mbtowc+0x1a>
 800352e:	b14b      	cbz	r3, 8003544 <__ascii_mbtowc+0x1e>
 8003530:	7813      	ldrb	r3, [r2, #0]
 8003532:	600b      	str	r3, [r1, #0]
 8003534:	7812      	ldrb	r2, [r2, #0]
 8003536:	1c10      	adds	r0, r2, #0
 8003538:	bf18      	it	ne
 800353a:	2001      	movne	r0, #1
 800353c:	b002      	add	sp, #8
 800353e:	4770      	bx	lr
 8003540:	4610      	mov	r0, r2
 8003542:	e7fb      	b.n	800353c <__ascii_mbtowc+0x16>
 8003544:	f06f 0001 	mvn.w	r0, #1
 8003548:	e7f8      	b.n	800353c <__ascii_mbtowc+0x16>

0800354a <__ssputs_r>:
 800354a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800354e:	688e      	ldr	r6, [r1, #8]
 8003550:	4682      	mov	sl, r0
 8003552:	429e      	cmp	r6, r3
 8003554:	460c      	mov	r4, r1
 8003556:	4691      	mov	r9, r2
 8003558:	4698      	mov	r8, r3
 800355a:	d835      	bhi.n	80035c8 <__ssputs_r+0x7e>
 800355c:	898a      	ldrh	r2, [r1, #12]
 800355e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003562:	d031      	beq.n	80035c8 <__ssputs_r+0x7e>
 8003564:	2302      	movs	r3, #2
 8003566:	6825      	ldr	r5, [r4, #0]
 8003568:	6909      	ldr	r1, [r1, #16]
 800356a:	1a6f      	subs	r7, r5, r1
 800356c:	6965      	ldr	r5, [r4, #20]
 800356e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003572:	fb95 f5f3 	sdiv	r5, r5, r3
 8003576:	f108 0301 	add.w	r3, r8, #1
 800357a:	443b      	add	r3, r7
 800357c:	429d      	cmp	r5, r3
 800357e:	bf38      	it	cc
 8003580:	461d      	movcc	r5, r3
 8003582:	0553      	lsls	r3, r2, #21
 8003584:	d531      	bpl.n	80035ea <__ssputs_r+0xa0>
 8003586:	4629      	mov	r1, r5
 8003588:	f000 fb48 	bl	8003c1c <_malloc_r>
 800358c:	4606      	mov	r6, r0
 800358e:	b950      	cbnz	r0, 80035a6 <__ssputs_r+0x5c>
 8003590:	230c      	movs	r3, #12
 8003592:	f8ca 3000 	str.w	r3, [sl]
 8003596:	89a3      	ldrh	r3, [r4, #12]
 8003598:	f04f 30ff 	mov.w	r0, #4294967295
 800359c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035a0:	81a3      	strh	r3, [r4, #12]
 80035a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a6:	463a      	mov	r2, r7
 80035a8:	6921      	ldr	r1, [r4, #16]
 80035aa:	f7ff feb7 	bl	800331c <memcpy>
 80035ae:	89a3      	ldrh	r3, [r4, #12]
 80035b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b8:	81a3      	strh	r3, [r4, #12]
 80035ba:	6126      	str	r6, [r4, #16]
 80035bc:	443e      	add	r6, r7
 80035be:	6026      	str	r6, [r4, #0]
 80035c0:	4646      	mov	r6, r8
 80035c2:	6165      	str	r5, [r4, #20]
 80035c4:	1bed      	subs	r5, r5, r7
 80035c6:	60a5      	str	r5, [r4, #8]
 80035c8:	4546      	cmp	r6, r8
 80035ca:	bf28      	it	cs
 80035cc:	4646      	movcs	r6, r8
 80035ce:	4649      	mov	r1, r9
 80035d0:	4632      	mov	r2, r6
 80035d2:	6820      	ldr	r0, [r4, #0]
 80035d4:	f000 fabb 	bl	8003b4e <memmove>
 80035d8:	68a3      	ldr	r3, [r4, #8]
 80035da:	2000      	movs	r0, #0
 80035dc:	1b9b      	subs	r3, r3, r6
 80035de:	60a3      	str	r3, [r4, #8]
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	441e      	add	r6, r3
 80035e4:	6026      	str	r6, [r4, #0]
 80035e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ea:	462a      	mov	r2, r5
 80035ec:	f000 fb74 	bl	8003cd8 <_realloc_r>
 80035f0:	4606      	mov	r6, r0
 80035f2:	2800      	cmp	r0, #0
 80035f4:	d1e1      	bne.n	80035ba <__ssputs_r+0x70>
 80035f6:	6921      	ldr	r1, [r4, #16]
 80035f8:	4650      	mov	r0, sl
 80035fa:	f000 fac3 	bl	8003b84 <_free_r>
 80035fe:	e7c7      	b.n	8003590 <__ssputs_r+0x46>

08003600 <_svfiprintf_r>:
 8003600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003604:	b09d      	sub	sp, #116	; 0x74
 8003606:	9303      	str	r3, [sp, #12]
 8003608:	898b      	ldrh	r3, [r1, #12]
 800360a:	4680      	mov	r8, r0
 800360c:	061c      	lsls	r4, r3, #24
 800360e:	460d      	mov	r5, r1
 8003610:	4616      	mov	r6, r2
 8003612:	d50f      	bpl.n	8003634 <_svfiprintf_r+0x34>
 8003614:	690b      	ldr	r3, [r1, #16]
 8003616:	b96b      	cbnz	r3, 8003634 <_svfiprintf_r+0x34>
 8003618:	2140      	movs	r1, #64	; 0x40
 800361a:	f000 faff 	bl	8003c1c <_malloc_r>
 800361e:	6028      	str	r0, [r5, #0]
 8003620:	6128      	str	r0, [r5, #16]
 8003622:	b928      	cbnz	r0, 8003630 <_svfiprintf_r+0x30>
 8003624:	230c      	movs	r3, #12
 8003626:	f8c8 3000 	str.w	r3, [r8]
 800362a:	f04f 30ff 	mov.w	r0, #4294967295
 800362e:	e0c4      	b.n	80037ba <_svfiprintf_r+0x1ba>
 8003630:	2340      	movs	r3, #64	; 0x40
 8003632:	616b      	str	r3, [r5, #20]
 8003634:	2300      	movs	r3, #0
 8003636:	9309      	str	r3, [sp, #36]	; 0x24
 8003638:	2320      	movs	r3, #32
 800363a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800363e:	2330      	movs	r3, #48	; 0x30
 8003640:	f04f 0b01 	mov.w	fp, #1
 8003644:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003648:	4637      	mov	r7, r6
 800364a:	463c      	mov	r4, r7
 800364c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d13c      	bne.n	80036ce <_svfiprintf_r+0xce>
 8003654:	ebb7 0a06 	subs.w	sl, r7, r6
 8003658:	d00b      	beq.n	8003672 <_svfiprintf_r+0x72>
 800365a:	4653      	mov	r3, sl
 800365c:	4632      	mov	r2, r6
 800365e:	4629      	mov	r1, r5
 8003660:	4640      	mov	r0, r8
 8003662:	f7ff ff72 	bl	800354a <__ssputs_r>
 8003666:	3001      	adds	r0, #1
 8003668:	f000 80a2 	beq.w	80037b0 <_svfiprintf_r+0x1b0>
 800366c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800366e:	4453      	add	r3, sl
 8003670:	9309      	str	r3, [sp, #36]	; 0x24
 8003672:	783b      	ldrb	r3, [r7, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 809b 	beq.w	80037b0 <_svfiprintf_r+0x1b0>
 800367a:	2300      	movs	r3, #0
 800367c:	f04f 32ff 	mov.w	r2, #4294967295
 8003680:	9304      	str	r3, [sp, #16]
 8003682:	9307      	str	r3, [sp, #28]
 8003684:	9205      	str	r2, [sp, #20]
 8003686:	9306      	str	r3, [sp, #24]
 8003688:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800368c:	931a      	str	r3, [sp, #104]	; 0x68
 800368e:	2205      	movs	r2, #5
 8003690:	7821      	ldrb	r1, [r4, #0]
 8003692:	4850      	ldr	r0, [pc, #320]	; (80037d4 <_svfiprintf_r+0x1d4>)
 8003694:	f000 fa4d 	bl	8003b32 <memchr>
 8003698:	1c67      	adds	r7, r4, #1
 800369a:	9b04      	ldr	r3, [sp, #16]
 800369c:	b9d8      	cbnz	r0, 80036d6 <_svfiprintf_r+0xd6>
 800369e:	06d9      	lsls	r1, r3, #27
 80036a0:	bf44      	itt	mi
 80036a2:	2220      	movmi	r2, #32
 80036a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036a8:	071a      	lsls	r2, r3, #28
 80036aa:	bf44      	itt	mi
 80036ac:	222b      	movmi	r2, #43	; 0x2b
 80036ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036b2:	7822      	ldrb	r2, [r4, #0]
 80036b4:	2a2a      	cmp	r2, #42	; 0x2a
 80036b6:	d016      	beq.n	80036e6 <_svfiprintf_r+0xe6>
 80036b8:	2100      	movs	r1, #0
 80036ba:	200a      	movs	r0, #10
 80036bc:	9a07      	ldr	r2, [sp, #28]
 80036be:	4627      	mov	r7, r4
 80036c0:	783b      	ldrb	r3, [r7, #0]
 80036c2:	3401      	adds	r4, #1
 80036c4:	3b30      	subs	r3, #48	; 0x30
 80036c6:	2b09      	cmp	r3, #9
 80036c8:	d950      	bls.n	800376c <_svfiprintf_r+0x16c>
 80036ca:	b1c9      	cbz	r1, 8003700 <_svfiprintf_r+0x100>
 80036cc:	e011      	b.n	80036f2 <_svfiprintf_r+0xf2>
 80036ce:	2b25      	cmp	r3, #37	; 0x25
 80036d0:	d0c0      	beq.n	8003654 <_svfiprintf_r+0x54>
 80036d2:	4627      	mov	r7, r4
 80036d4:	e7b9      	b.n	800364a <_svfiprintf_r+0x4a>
 80036d6:	4a3f      	ldr	r2, [pc, #252]	; (80037d4 <_svfiprintf_r+0x1d4>)
 80036d8:	463c      	mov	r4, r7
 80036da:	1a80      	subs	r0, r0, r2
 80036dc:	fa0b f000 	lsl.w	r0, fp, r0
 80036e0:	4318      	orrs	r0, r3
 80036e2:	9004      	str	r0, [sp, #16]
 80036e4:	e7d3      	b.n	800368e <_svfiprintf_r+0x8e>
 80036e6:	9a03      	ldr	r2, [sp, #12]
 80036e8:	1d11      	adds	r1, r2, #4
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	9103      	str	r1, [sp, #12]
 80036ee:	2a00      	cmp	r2, #0
 80036f0:	db01      	blt.n	80036f6 <_svfiprintf_r+0xf6>
 80036f2:	9207      	str	r2, [sp, #28]
 80036f4:	e004      	b.n	8003700 <_svfiprintf_r+0x100>
 80036f6:	4252      	negs	r2, r2
 80036f8:	f043 0302 	orr.w	r3, r3, #2
 80036fc:	9207      	str	r2, [sp, #28]
 80036fe:	9304      	str	r3, [sp, #16]
 8003700:	783b      	ldrb	r3, [r7, #0]
 8003702:	2b2e      	cmp	r3, #46	; 0x2e
 8003704:	d10d      	bne.n	8003722 <_svfiprintf_r+0x122>
 8003706:	787b      	ldrb	r3, [r7, #1]
 8003708:	1c79      	adds	r1, r7, #1
 800370a:	2b2a      	cmp	r3, #42	; 0x2a
 800370c:	d132      	bne.n	8003774 <_svfiprintf_r+0x174>
 800370e:	9b03      	ldr	r3, [sp, #12]
 8003710:	3702      	adds	r7, #2
 8003712:	1d1a      	adds	r2, r3, #4
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	9203      	str	r2, [sp, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	bfb8      	it	lt
 800371c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003720:	9305      	str	r3, [sp, #20]
 8003722:	4c2d      	ldr	r4, [pc, #180]	; (80037d8 <_svfiprintf_r+0x1d8>)
 8003724:	2203      	movs	r2, #3
 8003726:	7839      	ldrb	r1, [r7, #0]
 8003728:	4620      	mov	r0, r4
 800372a:	f000 fa02 	bl	8003b32 <memchr>
 800372e:	b138      	cbz	r0, 8003740 <_svfiprintf_r+0x140>
 8003730:	2340      	movs	r3, #64	; 0x40
 8003732:	1b00      	subs	r0, r0, r4
 8003734:	fa03 f000 	lsl.w	r0, r3, r0
 8003738:	9b04      	ldr	r3, [sp, #16]
 800373a:	3701      	adds	r7, #1
 800373c:	4303      	orrs	r3, r0
 800373e:	9304      	str	r3, [sp, #16]
 8003740:	7839      	ldrb	r1, [r7, #0]
 8003742:	2206      	movs	r2, #6
 8003744:	4825      	ldr	r0, [pc, #148]	; (80037dc <_svfiprintf_r+0x1dc>)
 8003746:	1c7e      	adds	r6, r7, #1
 8003748:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800374c:	f000 f9f1 	bl	8003b32 <memchr>
 8003750:	2800      	cmp	r0, #0
 8003752:	d035      	beq.n	80037c0 <_svfiprintf_r+0x1c0>
 8003754:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <_svfiprintf_r+0x1e0>)
 8003756:	b9fb      	cbnz	r3, 8003798 <_svfiprintf_r+0x198>
 8003758:	9b03      	ldr	r3, [sp, #12]
 800375a:	3307      	adds	r3, #7
 800375c:	f023 0307 	bic.w	r3, r3, #7
 8003760:	3308      	adds	r3, #8
 8003762:	9303      	str	r3, [sp, #12]
 8003764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003766:	444b      	add	r3, r9
 8003768:	9309      	str	r3, [sp, #36]	; 0x24
 800376a:	e76d      	b.n	8003648 <_svfiprintf_r+0x48>
 800376c:	fb00 3202 	mla	r2, r0, r2, r3
 8003770:	2101      	movs	r1, #1
 8003772:	e7a4      	b.n	80036be <_svfiprintf_r+0xbe>
 8003774:	2300      	movs	r3, #0
 8003776:	240a      	movs	r4, #10
 8003778:	4618      	mov	r0, r3
 800377a:	9305      	str	r3, [sp, #20]
 800377c:	460f      	mov	r7, r1
 800377e:	783a      	ldrb	r2, [r7, #0]
 8003780:	3101      	adds	r1, #1
 8003782:	3a30      	subs	r2, #48	; 0x30
 8003784:	2a09      	cmp	r2, #9
 8003786:	d903      	bls.n	8003790 <_svfiprintf_r+0x190>
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ca      	beq.n	8003722 <_svfiprintf_r+0x122>
 800378c:	9005      	str	r0, [sp, #20]
 800378e:	e7c8      	b.n	8003722 <_svfiprintf_r+0x122>
 8003790:	fb04 2000 	mla	r0, r4, r0, r2
 8003794:	2301      	movs	r3, #1
 8003796:	e7f1      	b.n	800377c <_svfiprintf_r+0x17c>
 8003798:	ab03      	add	r3, sp, #12
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	462a      	mov	r2, r5
 800379e:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <_svfiprintf_r+0x1e4>)
 80037a0:	a904      	add	r1, sp, #16
 80037a2:	4640      	mov	r0, r8
 80037a4:	f3af 8000 	nop.w
 80037a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80037ac:	4681      	mov	r9, r0
 80037ae:	d1d9      	bne.n	8003764 <_svfiprintf_r+0x164>
 80037b0:	89ab      	ldrh	r3, [r5, #12]
 80037b2:	065b      	lsls	r3, r3, #25
 80037b4:	f53f af39 	bmi.w	800362a <_svfiprintf_r+0x2a>
 80037b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037ba:	b01d      	add	sp, #116	; 0x74
 80037bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037c0:	ab03      	add	r3, sp, #12
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	462a      	mov	r2, r5
 80037c6:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <_svfiprintf_r+0x1e4>)
 80037c8:	a904      	add	r1, sp, #16
 80037ca:	4640      	mov	r0, r8
 80037cc:	f000 f884 	bl	80038d8 <_printf_i>
 80037d0:	e7ea      	b.n	80037a8 <_svfiprintf_r+0x1a8>
 80037d2:	bf00      	nop
 80037d4:	08004035 	.word	0x08004035
 80037d8:	0800403b 	.word	0x0800403b
 80037dc:	0800403f 	.word	0x0800403f
 80037e0:	00000000 	.word	0x00000000
 80037e4:	0800354b 	.word	0x0800354b

080037e8 <_printf_common>:
 80037e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037ec:	4691      	mov	r9, r2
 80037ee:	461f      	mov	r7, r3
 80037f0:	688a      	ldr	r2, [r1, #8]
 80037f2:	690b      	ldr	r3, [r1, #16]
 80037f4:	4606      	mov	r6, r0
 80037f6:	4293      	cmp	r3, r2
 80037f8:	bfb8      	it	lt
 80037fa:	4613      	movlt	r3, r2
 80037fc:	f8c9 3000 	str.w	r3, [r9]
 8003800:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003804:	460c      	mov	r4, r1
 8003806:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800380a:	b112      	cbz	r2, 8003812 <_printf_common+0x2a>
 800380c:	3301      	adds	r3, #1
 800380e:	f8c9 3000 	str.w	r3, [r9]
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	0699      	lsls	r1, r3, #26
 8003816:	bf42      	ittt	mi
 8003818:	f8d9 3000 	ldrmi.w	r3, [r9]
 800381c:	3302      	addmi	r3, #2
 800381e:	f8c9 3000 	strmi.w	r3, [r9]
 8003822:	6825      	ldr	r5, [r4, #0]
 8003824:	f015 0506 	ands.w	r5, r5, #6
 8003828:	d107      	bne.n	800383a <_printf_common+0x52>
 800382a:	f104 0a19 	add.w	sl, r4, #25
 800382e:	68e3      	ldr	r3, [r4, #12]
 8003830:	f8d9 2000 	ldr.w	r2, [r9]
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	429d      	cmp	r5, r3
 8003838:	db2a      	blt.n	8003890 <_printf_common+0xa8>
 800383a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800383e:	6822      	ldr	r2, [r4, #0]
 8003840:	3300      	adds	r3, #0
 8003842:	bf18      	it	ne
 8003844:	2301      	movne	r3, #1
 8003846:	0692      	lsls	r2, r2, #26
 8003848:	d42f      	bmi.n	80038aa <_printf_common+0xc2>
 800384a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800384e:	4639      	mov	r1, r7
 8003850:	4630      	mov	r0, r6
 8003852:	47c0      	blx	r8
 8003854:	3001      	adds	r0, #1
 8003856:	d022      	beq.n	800389e <_printf_common+0xb6>
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	68e5      	ldr	r5, [r4, #12]
 800385c:	f003 0306 	and.w	r3, r3, #6
 8003860:	2b04      	cmp	r3, #4
 8003862:	bf18      	it	ne
 8003864:	2500      	movne	r5, #0
 8003866:	f8d9 2000 	ldr.w	r2, [r9]
 800386a:	f04f 0900 	mov.w	r9, #0
 800386e:	bf08      	it	eq
 8003870:	1aad      	subeq	r5, r5, r2
 8003872:	68a3      	ldr	r3, [r4, #8]
 8003874:	6922      	ldr	r2, [r4, #16]
 8003876:	bf08      	it	eq
 8003878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800387c:	4293      	cmp	r3, r2
 800387e:	bfc4      	itt	gt
 8003880:	1a9b      	subgt	r3, r3, r2
 8003882:	18ed      	addgt	r5, r5, r3
 8003884:	341a      	adds	r4, #26
 8003886:	454d      	cmp	r5, r9
 8003888:	d11b      	bne.n	80038c2 <_printf_common+0xda>
 800388a:	2000      	movs	r0, #0
 800388c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003890:	2301      	movs	r3, #1
 8003892:	4652      	mov	r2, sl
 8003894:	4639      	mov	r1, r7
 8003896:	4630      	mov	r0, r6
 8003898:	47c0      	blx	r8
 800389a:	3001      	adds	r0, #1
 800389c:	d103      	bne.n	80038a6 <_printf_common+0xbe>
 800389e:	f04f 30ff 	mov.w	r0, #4294967295
 80038a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a6:	3501      	adds	r5, #1
 80038a8:	e7c1      	b.n	800382e <_printf_common+0x46>
 80038aa:	2030      	movs	r0, #48	; 0x30
 80038ac:	18e1      	adds	r1, r4, r3
 80038ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038b8:	4422      	add	r2, r4
 80038ba:	3302      	adds	r3, #2
 80038bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038c0:	e7c3      	b.n	800384a <_printf_common+0x62>
 80038c2:	2301      	movs	r3, #1
 80038c4:	4622      	mov	r2, r4
 80038c6:	4639      	mov	r1, r7
 80038c8:	4630      	mov	r0, r6
 80038ca:	47c0      	blx	r8
 80038cc:	3001      	adds	r0, #1
 80038ce:	d0e6      	beq.n	800389e <_printf_common+0xb6>
 80038d0:	f109 0901 	add.w	r9, r9, #1
 80038d4:	e7d7      	b.n	8003886 <_printf_common+0x9e>
	...

080038d8 <_printf_i>:
 80038d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038dc:	4617      	mov	r7, r2
 80038de:	7e0a      	ldrb	r2, [r1, #24]
 80038e0:	b085      	sub	sp, #20
 80038e2:	2a6e      	cmp	r2, #110	; 0x6e
 80038e4:	4698      	mov	r8, r3
 80038e6:	4606      	mov	r6, r0
 80038e8:	460c      	mov	r4, r1
 80038ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038ec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80038f0:	f000 80bc 	beq.w	8003a6c <_printf_i+0x194>
 80038f4:	d81a      	bhi.n	800392c <_printf_i+0x54>
 80038f6:	2a63      	cmp	r2, #99	; 0x63
 80038f8:	d02e      	beq.n	8003958 <_printf_i+0x80>
 80038fa:	d80a      	bhi.n	8003912 <_printf_i+0x3a>
 80038fc:	2a00      	cmp	r2, #0
 80038fe:	f000 80c8 	beq.w	8003a92 <_printf_i+0x1ba>
 8003902:	2a58      	cmp	r2, #88	; 0x58
 8003904:	f000 808a 	beq.w	8003a1c <_printf_i+0x144>
 8003908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800390c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003910:	e02a      	b.n	8003968 <_printf_i+0x90>
 8003912:	2a64      	cmp	r2, #100	; 0x64
 8003914:	d001      	beq.n	800391a <_printf_i+0x42>
 8003916:	2a69      	cmp	r2, #105	; 0x69
 8003918:	d1f6      	bne.n	8003908 <_printf_i+0x30>
 800391a:	6821      	ldr	r1, [r4, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003922:	d023      	beq.n	800396c <_printf_i+0x94>
 8003924:	1d11      	adds	r1, r2, #4
 8003926:	6019      	str	r1, [r3, #0]
 8003928:	6813      	ldr	r3, [r2, #0]
 800392a:	e027      	b.n	800397c <_printf_i+0xa4>
 800392c:	2a73      	cmp	r2, #115	; 0x73
 800392e:	f000 80b4 	beq.w	8003a9a <_printf_i+0x1c2>
 8003932:	d808      	bhi.n	8003946 <_printf_i+0x6e>
 8003934:	2a6f      	cmp	r2, #111	; 0x6f
 8003936:	d02a      	beq.n	800398e <_printf_i+0xb6>
 8003938:	2a70      	cmp	r2, #112	; 0x70
 800393a:	d1e5      	bne.n	8003908 <_printf_i+0x30>
 800393c:	680a      	ldr	r2, [r1, #0]
 800393e:	f042 0220 	orr.w	r2, r2, #32
 8003942:	600a      	str	r2, [r1, #0]
 8003944:	e003      	b.n	800394e <_printf_i+0x76>
 8003946:	2a75      	cmp	r2, #117	; 0x75
 8003948:	d021      	beq.n	800398e <_printf_i+0xb6>
 800394a:	2a78      	cmp	r2, #120	; 0x78
 800394c:	d1dc      	bne.n	8003908 <_printf_i+0x30>
 800394e:	2278      	movs	r2, #120	; 0x78
 8003950:	496f      	ldr	r1, [pc, #444]	; (8003b10 <_printf_i+0x238>)
 8003952:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003956:	e064      	b.n	8003a22 <_printf_i+0x14a>
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800395e:	1d11      	adds	r1, r2, #4
 8003960:	6019      	str	r1, [r3, #0]
 8003962:	6813      	ldr	r3, [r2, #0]
 8003964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003968:	2301      	movs	r3, #1
 800396a:	e0a3      	b.n	8003ab4 <_printf_i+0x1dc>
 800396c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003970:	f102 0104 	add.w	r1, r2, #4
 8003974:	6019      	str	r1, [r3, #0]
 8003976:	d0d7      	beq.n	8003928 <_printf_i+0x50>
 8003978:	f9b2 3000 	ldrsh.w	r3, [r2]
 800397c:	2b00      	cmp	r3, #0
 800397e:	da03      	bge.n	8003988 <_printf_i+0xb0>
 8003980:	222d      	movs	r2, #45	; 0x2d
 8003982:	425b      	negs	r3, r3
 8003984:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003988:	4962      	ldr	r1, [pc, #392]	; (8003b14 <_printf_i+0x23c>)
 800398a:	220a      	movs	r2, #10
 800398c:	e017      	b.n	80039be <_printf_i+0xe6>
 800398e:	6820      	ldr	r0, [r4, #0]
 8003990:	6819      	ldr	r1, [r3, #0]
 8003992:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003996:	d003      	beq.n	80039a0 <_printf_i+0xc8>
 8003998:	1d08      	adds	r0, r1, #4
 800399a:	6018      	str	r0, [r3, #0]
 800399c:	680b      	ldr	r3, [r1, #0]
 800399e:	e006      	b.n	80039ae <_printf_i+0xd6>
 80039a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039a4:	f101 0004 	add.w	r0, r1, #4
 80039a8:	6018      	str	r0, [r3, #0]
 80039aa:	d0f7      	beq.n	800399c <_printf_i+0xc4>
 80039ac:	880b      	ldrh	r3, [r1, #0]
 80039ae:	2a6f      	cmp	r2, #111	; 0x6f
 80039b0:	bf14      	ite	ne
 80039b2:	220a      	movne	r2, #10
 80039b4:	2208      	moveq	r2, #8
 80039b6:	4957      	ldr	r1, [pc, #348]	; (8003b14 <_printf_i+0x23c>)
 80039b8:	2000      	movs	r0, #0
 80039ba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80039be:	6865      	ldr	r5, [r4, #4]
 80039c0:	2d00      	cmp	r5, #0
 80039c2:	60a5      	str	r5, [r4, #8]
 80039c4:	f2c0 809c 	blt.w	8003b00 <_printf_i+0x228>
 80039c8:	6820      	ldr	r0, [r4, #0]
 80039ca:	f020 0004 	bic.w	r0, r0, #4
 80039ce:	6020      	str	r0, [r4, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d13f      	bne.n	8003a54 <_printf_i+0x17c>
 80039d4:	2d00      	cmp	r5, #0
 80039d6:	f040 8095 	bne.w	8003b04 <_printf_i+0x22c>
 80039da:	4675      	mov	r5, lr
 80039dc:	2a08      	cmp	r2, #8
 80039de:	d10b      	bne.n	80039f8 <_printf_i+0x120>
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	07da      	lsls	r2, r3, #31
 80039e4:	d508      	bpl.n	80039f8 <_printf_i+0x120>
 80039e6:	6923      	ldr	r3, [r4, #16]
 80039e8:	6862      	ldr	r2, [r4, #4]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	bfde      	ittt	le
 80039ee:	2330      	movle	r3, #48	; 0x30
 80039f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039f8:	ebae 0305 	sub.w	r3, lr, r5
 80039fc:	6123      	str	r3, [r4, #16]
 80039fe:	f8cd 8000 	str.w	r8, [sp]
 8003a02:	463b      	mov	r3, r7
 8003a04:	aa03      	add	r2, sp, #12
 8003a06:	4621      	mov	r1, r4
 8003a08:	4630      	mov	r0, r6
 8003a0a:	f7ff feed 	bl	80037e8 <_printf_common>
 8003a0e:	3001      	adds	r0, #1
 8003a10:	d155      	bne.n	8003abe <_printf_i+0x1e6>
 8003a12:	f04f 30ff 	mov.w	r0, #4294967295
 8003a16:	b005      	add	sp, #20
 8003a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a1c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003a20:	493c      	ldr	r1, [pc, #240]	; (8003b14 <_printf_i+0x23c>)
 8003a22:	6822      	ldr	r2, [r4, #0]
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003a2a:	f100 0504 	add.w	r5, r0, #4
 8003a2e:	601d      	str	r5, [r3, #0]
 8003a30:	d001      	beq.n	8003a36 <_printf_i+0x15e>
 8003a32:	6803      	ldr	r3, [r0, #0]
 8003a34:	e002      	b.n	8003a3c <_printf_i+0x164>
 8003a36:	0655      	lsls	r5, r2, #25
 8003a38:	d5fb      	bpl.n	8003a32 <_printf_i+0x15a>
 8003a3a:	8803      	ldrh	r3, [r0, #0]
 8003a3c:	07d0      	lsls	r0, r2, #31
 8003a3e:	bf44      	itt	mi
 8003a40:	f042 0220 	orrmi.w	r2, r2, #32
 8003a44:	6022      	strmi	r2, [r4, #0]
 8003a46:	b91b      	cbnz	r3, 8003a50 <_printf_i+0x178>
 8003a48:	6822      	ldr	r2, [r4, #0]
 8003a4a:	f022 0220 	bic.w	r2, r2, #32
 8003a4e:	6022      	str	r2, [r4, #0]
 8003a50:	2210      	movs	r2, #16
 8003a52:	e7b1      	b.n	80039b8 <_printf_i+0xe0>
 8003a54:	4675      	mov	r5, lr
 8003a56:	fbb3 f0f2 	udiv	r0, r3, r2
 8003a5a:	fb02 3310 	mls	r3, r2, r0, r3
 8003a5e:	5ccb      	ldrb	r3, [r1, r3]
 8003a60:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a64:	4603      	mov	r3, r0
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d1f5      	bne.n	8003a56 <_printf_i+0x17e>
 8003a6a:	e7b7      	b.n	80039dc <_printf_i+0x104>
 8003a6c:	6808      	ldr	r0, [r1, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003a74:	6949      	ldr	r1, [r1, #20]
 8003a76:	d004      	beq.n	8003a82 <_printf_i+0x1aa>
 8003a78:	1d10      	adds	r0, r2, #4
 8003a7a:	6018      	str	r0, [r3, #0]
 8003a7c:	6813      	ldr	r3, [r2, #0]
 8003a7e:	6019      	str	r1, [r3, #0]
 8003a80:	e007      	b.n	8003a92 <_printf_i+0x1ba>
 8003a82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a86:	f102 0004 	add.w	r0, r2, #4
 8003a8a:	6018      	str	r0, [r3, #0]
 8003a8c:	6813      	ldr	r3, [r2, #0]
 8003a8e:	d0f6      	beq.n	8003a7e <_printf_i+0x1a6>
 8003a90:	8019      	strh	r1, [r3, #0]
 8003a92:	2300      	movs	r3, #0
 8003a94:	4675      	mov	r5, lr
 8003a96:	6123      	str	r3, [r4, #16]
 8003a98:	e7b1      	b.n	80039fe <_printf_i+0x126>
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	1d11      	adds	r1, r2, #4
 8003a9e:	6019      	str	r1, [r3, #0]
 8003aa0:	6815      	ldr	r5, [r2, #0]
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	6862      	ldr	r2, [r4, #4]
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	f000 f843 	bl	8003b32 <memchr>
 8003aac:	b108      	cbz	r0, 8003ab2 <_printf_i+0x1da>
 8003aae:	1b40      	subs	r0, r0, r5
 8003ab0:	6060      	str	r0, [r4, #4]
 8003ab2:	6863      	ldr	r3, [r4, #4]
 8003ab4:	6123      	str	r3, [r4, #16]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003abc:	e79f      	b.n	80039fe <_printf_i+0x126>
 8003abe:	6923      	ldr	r3, [r4, #16]
 8003ac0:	462a      	mov	r2, r5
 8003ac2:	4639      	mov	r1, r7
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	47c0      	blx	r8
 8003ac8:	3001      	adds	r0, #1
 8003aca:	d0a2      	beq.n	8003a12 <_printf_i+0x13a>
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	079b      	lsls	r3, r3, #30
 8003ad0:	d507      	bpl.n	8003ae2 <_printf_i+0x20a>
 8003ad2:	2500      	movs	r5, #0
 8003ad4:	f104 0919 	add.w	r9, r4, #25
 8003ad8:	68e3      	ldr	r3, [r4, #12]
 8003ada:	9a03      	ldr	r2, [sp, #12]
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	429d      	cmp	r5, r3
 8003ae0:	db05      	blt.n	8003aee <_printf_i+0x216>
 8003ae2:	68e0      	ldr	r0, [r4, #12]
 8003ae4:	9b03      	ldr	r3, [sp, #12]
 8003ae6:	4298      	cmp	r0, r3
 8003ae8:	bfb8      	it	lt
 8003aea:	4618      	movlt	r0, r3
 8003aec:	e793      	b.n	8003a16 <_printf_i+0x13e>
 8003aee:	2301      	movs	r3, #1
 8003af0:	464a      	mov	r2, r9
 8003af2:	4639      	mov	r1, r7
 8003af4:	4630      	mov	r0, r6
 8003af6:	47c0      	blx	r8
 8003af8:	3001      	adds	r0, #1
 8003afa:	d08a      	beq.n	8003a12 <_printf_i+0x13a>
 8003afc:	3501      	adds	r5, #1
 8003afe:	e7eb      	b.n	8003ad8 <_printf_i+0x200>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1a7      	bne.n	8003a54 <_printf_i+0x17c>
 8003b04:	780b      	ldrb	r3, [r1, #0]
 8003b06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b0e:	e765      	b.n	80039dc <_printf_i+0x104>
 8003b10:	08004057 	.word	0x08004057
 8003b14:	08004046 	.word	0x08004046

08003b18 <__ascii_wctomb>:
 8003b18:	b149      	cbz	r1, 8003b2e <__ascii_wctomb+0x16>
 8003b1a:	2aff      	cmp	r2, #255	; 0xff
 8003b1c:	bf8b      	itete	hi
 8003b1e:	238a      	movhi	r3, #138	; 0x8a
 8003b20:	700a      	strbls	r2, [r1, #0]
 8003b22:	6003      	strhi	r3, [r0, #0]
 8003b24:	2001      	movls	r0, #1
 8003b26:	bf88      	it	hi
 8003b28:	f04f 30ff 	movhi.w	r0, #4294967295
 8003b2c:	4770      	bx	lr
 8003b2e:	4608      	mov	r0, r1
 8003b30:	4770      	bx	lr

08003b32 <memchr>:
 8003b32:	b510      	push	{r4, lr}
 8003b34:	b2c9      	uxtb	r1, r1
 8003b36:	4402      	add	r2, r0
 8003b38:	4290      	cmp	r0, r2
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	d101      	bne.n	8003b42 <memchr+0x10>
 8003b3e:	2000      	movs	r0, #0
 8003b40:	bd10      	pop	{r4, pc}
 8003b42:	781c      	ldrb	r4, [r3, #0]
 8003b44:	3001      	adds	r0, #1
 8003b46:	428c      	cmp	r4, r1
 8003b48:	d1f6      	bne.n	8003b38 <memchr+0x6>
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	bd10      	pop	{r4, pc}

08003b4e <memmove>:
 8003b4e:	4288      	cmp	r0, r1
 8003b50:	b510      	push	{r4, lr}
 8003b52:	eb01 0302 	add.w	r3, r1, r2
 8003b56:	d803      	bhi.n	8003b60 <memmove+0x12>
 8003b58:	1e42      	subs	r2, r0, #1
 8003b5a:	4299      	cmp	r1, r3
 8003b5c:	d10c      	bne.n	8003b78 <memmove+0x2a>
 8003b5e:	bd10      	pop	{r4, pc}
 8003b60:	4298      	cmp	r0, r3
 8003b62:	d2f9      	bcs.n	8003b58 <memmove+0xa>
 8003b64:	1881      	adds	r1, r0, r2
 8003b66:	1ad2      	subs	r2, r2, r3
 8003b68:	42d3      	cmn	r3, r2
 8003b6a:	d100      	bne.n	8003b6e <memmove+0x20>
 8003b6c:	bd10      	pop	{r4, pc}
 8003b6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b72:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003b76:	e7f7      	b.n	8003b68 <memmove+0x1a>
 8003b78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b7c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003b80:	e7eb      	b.n	8003b5a <memmove+0xc>
	...

08003b84 <_free_r>:
 8003b84:	b538      	push	{r3, r4, r5, lr}
 8003b86:	4605      	mov	r5, r0
 8003b88:	2900      	cmp	r1, #0
 8003b8a:	d043      	beq.n	8003c14 <_free_r+0x90>
 8003b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b90:	1f0c      	subs	r4, r1, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	bfb8      	it	lt
 8003b96:	18e4      	addlt	r4, r4, r3
 8003b98:	f000 f8d4 	bl	8003d44 <__malloc_lock>
 8003b9c:	4a1e      	ldr	r2, [pc, #120]	; (8003c18 <_free_r+0x94>)
 8003b9e:	6813      	ldr	r3, [r2, #0]
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	b933      	cbnz	r3, 8003bb2 <_free_r+0x2e>
 8003ba4:	6063      	str	r3, [r4, #4]
 8003ba6:	6014      	str	r4, [r2, #0]
 8003ba8:	4628      	mov	r0, r5
 8003baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bae:	f000 b8ca 	b.w	8003d46 <__malloc_unlock>
 8003bb2:	42a3      	cmp	r3, r4
 8003bb4:	d90b      	bls.n	8003bce <_free_r+0x4a>
 8003bb6:	6821      	ldr	r1, [r4, #0]
 8003bb8:	1862      	adds	r2, r4, r1
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	bf01      	itttt	eq
 8003bbe:	681a      	ldreq	r2, [r3, #0]
 8003bc0:	685b      	ldreq	r3, [r3, #4]
 8003bc2:	1852      	addeq	r2, r2, r1
 8003bc4:	6022      	streq	r2, [r4, #0]
 8003bc6:	6063      	str	r3, [r4, #4]
 8003bc8:	6004      	str	r4, [r0, #0]
 8003bca:	e7ed      	b.n	8003ba8 <_free_r+0x24>
 8003bcc:	4613      	mov	r3, r2
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	b10a      	cbz	r2, 8003bd6 <_free_r+0x52>
 8003bd2:	42a2      	cmp	r2, r4
 8003bd4:	d9fa      	bls.n	8003bcc <_free_r+0x48>
 8003bd6:	6819      	ldr	r1, [r3, #0]
 8003bd8:	1858      	adds	r0, r3, r1
 8003bda:	42a0      	cmp	r0, r4
 8003bdc:	d10b      	bne.n	8003bf6 <_free_r+0x72>
 8003bde:	6820      	ldr	r0, [r4, #0]
 8003be0:	4401      	add	r1, r0
 8003be2:	1858      	adds	r0, r3, r1
 8003be4:	4282      	cmp	r2, r0
 8003be6:	6019      	str	r1, [r3, #0]
 8003be8:	d1de      	bne.n	8003ba8 <_free_r+0x24>
 8003bea:	6810      	ldr	r0, [r2, #0]
 8003bec:	6852      	ldr	r2, [r2, #4]
 8003bee:	4401      	add	r1, r0
 8003bf0:	6019      	str	r1, [r3, #0]
 8003bf2:	605a      	str	r2, [r3, #4]
 8003bf4:	e7d8      	b.n	8003ba8 <_free_r+0x24>
 8003bf6:	d902      	bls.n	8003bfe <_free_r+0x7a>
 8003bf8:	230c      	movs	r3, #12
 8003bfa:	602b      	str	r3, [r5, #0]
 8003bfc:	e7d4      	b.n	8003ba8 <_free_r+0x24>
 8003bfe:	6820      	ldr	r0, [r4, #0]
 8003c00:	1821      	adds	r1, r4, r0
 8003c02:	428a      	cmp	r2, r1
 8003c04:	bf01      	itttt	eq
 8003c06:	6811      	ldreq	r1, [r2, #0]
 8003c08:	6852      	ldreq	r2, [r2, #4]
 8003c0a:	1809      	addeq	r1, r1, r0
 8003c0c:	6021      	streq	r1, [r4, #0]
 8003c0e:	6062      	str	r2, [r4, #4]
 8003c10:	605c      	str	r4, [r3, #4]
 8003c12:	e7c9      	b.n	8003ba8 <_free_r+0x24>
 8003c14:	bd38      	pop	{r3, r4, r5, pc}
 8003c16:	bf00      	nop
 8003c18:	20000308 	.word	0x20000308

08003c1c <_malloc_r>:
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	1ccd      	adds	r5, r1, #3
 8003c20:	f025 0503 	bic.w	r5, r5, #3
 8003c24:	3508      	adds	r5, #8
 8003c26:	2d0c      	cmp	r5, #12
 8003c28:	bf38      	it	cc
 8003c2a:	250c      	movcc	r5, #12
 8003c2c:	2d00      	cmp	r5, #0
 8003c2e:	4606      	mov	r6, r0
 8003c30:	db01      	blt.n	8003c36 <_malloc_r+0x1a>
 8003c32:	42a9      	cmp	r1, r5
 8003c34:	d903      	bls.n	8003c3e <_malloc_r+0x22>
 8003c36:	230c      	movs	r3, #12
 8003c38:	6033      	str	r3, [r6, #0]
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	bd70      	pop	{r4, r5, r6, pc}
 8003c3e:	f000 f881 	bl	8003d44 <__malloc_lock>
 8003c42:	4a23      	ldr	r2, [pc, #140]	; (8003cd0 <_malloc_r+0xb4>)
 8003c44:	6814      	ldr	r4, [r2, #0]
 8003c46:	4621      	mov	r1, r4
 8003c48:	b991      	cbnz	r1, 8003c70 <_malloc_r+0x54>
 8003c4a:	4c22      	ldr	r4, [pc, #136]	; (8003cd4 <_malloc_r+0xb8>)
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	b91b      	cbnz	r3, 8003c58 <_malloc_r+0x3c>
 8003c50:	4630      	mov	r0, r6
 8003c52:	f000 f867 	bl	8003d24 <_sbrk_r>
 8003c56:	6020      	str	r0, [r4, #0]
 8003c58:	4629      	mov	r1, r5
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	f000 f862 	bl	8003d24 <_sbrk_r>
 8003c60:	1c43      	adds	r3, r0, #1
 8003c62:	d126      	bne.n	8003cb2 <_malloc_r+0x96>
 8003c64:	230c      	movs	r3, #12
 8003c66:	4630      	mov	r0, r6
 8003c68:	6033      	str	r3, [r6, #0]
 8003c6a:	f000 f86c 	bl	8003d46 <__malloc_unlock>
 8003c6e:	e7e4      	b.n	8003c3a <_malloc_r+0x1e>
 8003c70:	680b      	ldr	r3, [r1, #0]
 8003c72:	1b5b      	subs	r3, r3, r5
 8003c74:	d41a      	bmi.n	8003cac <_malloc_r+0x90>
 8003c76:	2b0b      	cmp	r3, #11
 8003c78:	d90f      	bls.n	8003c9a <_malloc_r+0x7e>
 8003c7a:	600b      	str	r3, [r1, #0]
 8003c7c:	18cc      	adds	r4, r1, r3
 8003c7e:	50cd      	str	r5, [r1, r3]
 8003c80:	4630      	mov	r0, r6
 8003c82:	f000 f860 	bl	8003d46 <__malloc_unlock>
 8003c86:	f104 000b 	add.w	r0, r4, #11
 8003c8a:	1d23      	adds	r3, r4, #4
 8003c8c:	f020 0007 	bic.w	r0, r0, #7
 8003c90:	1ac3      	subs	r3, r0, r3
 8003c92:	d01b      	beq.n	8003ccc <_malloc_r+0xb0>
 8003c94:	425a      	negs	r2, r3
 8003c96:	50e2      	str	r2, [r4, r3]
 8003c98:	bd70      	pop	{r4, r5, r6, pc}
 8003c9a:	428c      	cmp	r4, r1
 8003c9c:	bf0b      	itete	eq
 8003c9e:	6863      	ldreq	r3, [r4, #4]
 8003ca0:	684b      	ldrne	r3, [r1, #4]
 8003ca2:	6013      	streq	r3, [r2, #0]
 8003ca4:	6063      	strne	r3, [r4, #4]
 8003ca6:	bf18      	it	ne
 8003ca8:	460c      	movne	r4, r1
 8003caa:	e7e9      	b.n	8003c80 <_malloc_r+0x64>
 8003cac:	460c      	mov	r4, r1
 8003cae:	6849      	ldr	r1, [r1, #4]
 8003cb0:	e7ca      	b.n	8003c48 <_malloc_r+0x2c>
 8003cb2:	1cc4      	adds	r4, r0, #3
 8003cb4:	f024 0403 	bic.w	r4, r4, #3
 8003cb8:	42a0      	cmp	r0, r4
 8003cba:	d005      	beq.n	8003cc8 <_malloc_r+0xac>
 8003cbc:	1a21      	subs	r1, r4, r0
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	f000 f830 	bl	8003d24 <_sbrk_r>
 8003cc4:	3001      	adds	r0, #1
 8003cc6:	d0cd      	beq.n	8003c64 <_malloc_r+0x48>
 8003cc8:	6025      	str	r5, [r4, #0]
 8003cca:	e7d9      	b.n	8003c80 <_malloc_r+0x64>
 8003ccc:	bd70      	pop	{r4, r5, r6, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000308 	.word	0x20000308
 8003cd4:	2000030c 	.word	0x2000030c

08003cd8 <_realloc_r>:
 8003cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cda:	4607      	mov	r7, r0
 8003cdc:	4614      	mov	r4, r2
 8003cde:	460e      	mov	r6, r1
 8003ce0:	b921      	cbnz	r1, 8003cec <_realloc_r+0x14>
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ce8:	f7ff bf98 	b.w	8003c1c <_malloc_r>
 8003cec:	b922      	cbnz	r2, 8003cf8 <_realloc_r+0x20>
 8003cee:	f7ff ff49 	bl	8003b84 <_free_r>
 8003cf2:	4625      	mov	r5, r4
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cf8:	f000 f826 	bl	8003d48 <_malloc_usable_size_r>
 8003cfc:	4284      	cmp	r4, r0
 8003cfe:	d90f      	bls.n	8003d20 <_realloc_r+0x48>
 8003d00:	4621      	mov	r1, r4
 8003d02:	4638      	mov	r0, r7
 8003d04:	f7ff ff8a 	bl	8003c1c <_malloc_r>
 8003d08:	4605      	mov	r5, r0
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	d0f2      	beq.n	8003cf4 <_realloc_r+0x1c>
 8003d0e:	4631      	mov	r1, r6
 8003d10:	4622      	mov	r2, r4
 8003d12:	f7ff fb03 	bl	800331c <memcpy>
 8003d16:	4631      	mov	r1, r6
 8003d18:	4638      	mov	r0, r7
 8003d1a:	f7ff ff33 	bl	8003b84 <_free_r>
 8003d1e:	e7e9      	b.n	8003cf4 <_realloc_r+0x1c>
 8003d20:	4635      	mov	r5, r6
 8003d22:	e7e7      	b.n	8003cf4 <_realloc_r+0x1c>

08003d24 <_sbrk_r>:
 8003d24:	b538      	push	{r3, r4, r5, lr}
 8003d26:	2300      	movs	r3, #0
 8003d28:	4c05      	ldr	r4, [pc, #20]	; (8003d40 <_sbrk_r+0x1c>)
 8003d2a:	4605      	mov	r5, r0
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	6023      	str	r3, [r4, #0]
 8003d30:	f000 f91c 	bl	8003f6c <_sbrk>
 8003d34:	1c43      	adds	r3, r0, #1
 8003d36:	d102      	bne.n	8003d3e <_sbrk_r+0x1a>
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	b103      	cbz	r3, 8003d3e <_sbrk_r+0x1a>
 8003d3c:	602b      	str	r3, [r5, #0]
 8003d3e:	bd38      	pop	{r3, r4, r5, pc}
 8003d40:	200004ec 	.word	0x200004ec

08003d44 <__malloc_lock>:
 8003d44:	4770      	bx	lr

08003d46 <__malloc_unlock>:
 8003d46:	4770      	bx	lr

08003d48 <_malloc_usable_size_r>:
 8003d48:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	f1a0 0004 	sub.w	r0, r0, #4
 8003d52:	bfbc      	itt	lt
 8003d54:	580b      	ldrlt	r3, [r1, r0]
 8003d56:	18c0      	addlt	r0, r0, r3
 8003d58:	4770      	bx	lr
	...

08003d5c <sqrt>:
 8003d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d60:	b08b      	sub	sp, #44	; 0x2c
 8003d62:	4604      	mov	r4, r0
 8003d64:	460d      	mov	r5, r1
 8003d66:	f000 f84d 	bl	8003e04 <__ieee754_sqrt>
 8003d6a:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <sqrt+0xa0>)
 8003d6c:	4680      	mov	r8, r0
 8003d6e:	f993 a000 	ldrsb.w	sl, [r3]
 8003d72:	4689      	mov	r9, r1
 8003d74:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003d78:	d02b      	beq.n	8003dd2 <sqrt+0x76>
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	462b      	mov	r3, r5
 8003d7e:	4620      	mov	r0, r4
 8003d80:	4629      	mov	r1, r5
 8003d82:	f7fc fe49 	bl	8000a18 <__aeabi_dcmpun>
 8003d86:	4683      	mov	fp, r0
 8003d88:	bb18      	cbnz	r0, 8003dd2 <sqrt+0x76>
 8003d8a:	2600      	movs	r6, #0
 8003d8c:	2700      	movs	r7, #0
 8003d8e:	4632      	mov	r2, r6
 8003d90:	463b      	mov	r3, r7
 8003d92:	4620      	mov	r0, r4
 8003d94:	4629      	mov	r1, r5
 8003d96:	f7fc fe17 	bl	80009c8 <__aeabi_dcmplt>
 8003d9a:	b1d0      	cbz	r0, 8003dd2 <sqrt+0x76>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	4b17      	ldr	r3, [pc, #92]	; (8003e00 <sqrt+0xa4>)
 8003da2:	f8cd b020 	str.w	fp, [sp, #32]
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003dac:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003db0:	f1ba 0f00 	cmp.w	sl, #0
 8003db4:	d112      	bne.n	8003ddc <sqrt+0x80>
 8003db6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8003dba:	4668      	mov	r0, sp
 8003dbc:	f000 f8ce 	bl	8003f5c <matherr>
 8003dc0:	b1b8      	cbz	r0, 8003df2 <sqrt+0x96>
 8003dc2:	9b08      	ldr	r3, [sp, #32]
 8003dc4:	b11b      	cbz	r3, 8003dce <sqrt+0x72>
 8003dc6:	f000 f8cb 	bl	8003f60 <__errno>
 8003dca:	9b08      	ldr	r3, [sp, #32]
 8003dcc:	6003      	str	r3, [r0, #0]
 8003dce:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8003dd2:	4640      	mov	r0, r8
 8003dd4:	4649      	mov	r1, r9
 8003dd6:	b00b      	add	sp, #44	; 0x2c
 8003dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ddc:	4632      	mov	r2, r6
 8003dde:	463b      	mov	r3, r7
 8003de0:	4630      	mov	r0, r6
 8003de2:	4639      	mov	r1, r7
 8003de4:	f7fc fca8 	bl	8000738 <__aeabi_ddiv>
 8003de8:	f1ba 0f02 	cmp.w	sl, #2
 8003dec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003df0:	d1e3      	bne.n	8003dba <sqrt+0x5e>
 8003df2:	f000 f8b5 	bl	8003f60 <__errno>
 8003df6:	2321      	movs	r3, #33	; 0x21
 8003df8:	6003      	str	r3, [r0, #0]
 8003dfa:	e7e2      	b.n	8003dc2 <sqrt+0x66>
 8003dfc:	2000025c 	.word	0x2000025c
 8003e00:	08004169 	.word	0x08004169

08003e04 <__ieee754_sqrt>:
 8003e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e08:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8003f58 <__ieee754_sqrt+0x154>
 8003e0c:	4606      	mov	r6, r0
 8003e0e:	ea3e 0e01 	bics.w	lr, lr, r1
 8003e12:	460d      	mov	r5, r1
 8003e14:	4607      	mov	r7, r0
 8003e16:	460a      	mov	r2, r1
 8003e18:	460c      	mov	r4, r1
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	d10f      	bne.n	8003e3e <__ieee754_sqrt+0x3a>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	f7fc fb5f 	bl	80004e4 <__aeabi_dmul>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	f7fc f9a7 	bl	8000180 <__adddf3>
 8003e32:	4606      	mov	r6, r0
 8003e34:	460d      	mov	r5, r1
 8003e36:	4630      	mov	r0, r6
 8003e38:	4629      	mov	r1, r5
 8003e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e3e:	2900      	cmp	r1, #0
 8003e40:	dc0e      	bgt.n	8003e60 <__ieee754_sqrt+0x5c>
 8003e42:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 8003e46:	ea5e 0707 	orrs.w	r7, lr, r7
 8003e4a:	d0f4      	beq.n	8003e36 <__ieee754_sqrt+0x32>
 8003e4c:	b141      	cbz	r1, 8003e60 <__ieee754_sqrt+0x5c>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	f7fc f993 	bl	800017c <__aeabi_dsub>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	f7fc fc6d 	bl	8000738 <__aeabi_ddiv>
 8003e5e:	e7e8      	b.n	8003e32 <__ieee754_sqrt+0x2e>
 8003e60:	1512      	asrs	r2, r2, #20
 8003e62:	d10c      	bne.n	8003e7e <__ieee754_sqrt+0x7a>
 8003e64:	2c00      	cmp	r4, #0
 8003e66:	d06e      	beq.n	8003f46 <__ieee754_sqrt+0x142>
 8003e68:	2100      	movs	r1, #0
 8003e6a:	02e6      	lsls	r6, r4, #11
 8003e6c:	d56f      	bpl.n	8003f4e <__ieee754_sqrt+0x14a>
 8003e6e:	1e48      	subs	r0, r1, #1
 8003e70:	1a12      	subs	r2, r2, r0
 8003e72:	f1c1 0020 	rsb	r0, r1, #32
 8003e76:	fa23 f000 	lsr.w	r0, r3, r0
 8003e7a:	4304      	orrs	r4, r0
 8003e7c:	408b      	lsls	r3, r1
 8003e7e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003e82:	07d5      	lsls	r5, r2, #31
 8003e84:	f04f 0500 	mov.w	r5, #0
 8003e88:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003e8c:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8003e90:	bf42      	ittt	mi
 8003e92:	0064      	lslmi	r4, r4, #1
 8003e94:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 8003e98:	005b      	lslmi	r3, r3, #1
 8003e9a:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 8003e9e:	1050      	asrs	r0, r2, #1
 8003ea0:	4421      	add	r1, r4
 8003ea2:	2216      	movs	r2, #22
 8003ea4:	462c      	mov	r4, r5
 8003ea6:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	19a7      	adds	r7, r4, r6
 8003eae:	428f      	cmp	r7, r1
 8003eb0:	bfde      	ittt	le
 8003eb2:	1bc9      	suble	r1, r1, r7
 8003eb4:	19bc      	addle	r4, r7, r6
 8003eb6:	19ad      	addle	r5, r5, r6
 8003eb8:	0049      	lsls	r1, r1, #1
 8003eba:	3a01      	subs	r2, #1
 8003ebc:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8003ec0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003ec4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003ec8:	d1f0      	bne.n	8003eac <__ieee754_sqrt+0xa8>
 8003eca:	f04f 0e20 	mov.w	lr, #32
 8003ece:	4694      	mov	ip, r2
 8003ed0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003ed4:	42a1      	cmp	r1, r4
 8003ed6:	eb06 070c 	add.w	r7, r6, ip
 8003eda:	dc02      	bgt.n	8003ee2 <__ieee754_sqrt+0xde>
 8003edc:	d112      	bne.n	8003f04 <__ieee754_sqrt+0x100>
 8003ede:	429f      	cmp	r7, r3
 8003ee0:	d810      	bhi.n	8003f04 <__ieee754_sqrt+0x100>
 8003ee2:	2f00      	cmp	r7, #0
 8003ee4:	eb07 0c06 	add.w	ip, r7, r6
 8003ee8:	da34      	bge.n	8003f54 <__ieee754_sqrt+0x150>
 8003eea:	f1bc 0f00 	cmp.w	ip, #0
 8003eee:	db31      	blt.n	8003f54 <__ieee754_sqrt+0x150>
 8003ef0:	f104 0801 	add.w	r8, r4, #1
 8003ef4:	1b09      	subs	r1, r1, r4
 8003ef6:	4644      	mov	r4, r8
 8003ef8:	429f      	cmp	r7, r3
 8003efa:	bf88      	it	hi
 8003efc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8003f00:	1bdb      	subs	r3, r3, r7
 8003f02:	4432      	add	r2, r6
 8003f04:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8003f08:	f1be 0e01 	subs.w	lr, lr, #1
 8003f0c:	4439      	add	r1, r7
 8003f0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f12:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003f16:	d1dd      	bne.n	8003ed4 <__ieee754_sqrt+0xd0>
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	d006      	beq.n	8003f2a <__ieee754_sqrt+0x126>
 8003f1c:	1c54      	adds	r4, r2, #1
 8003f1e:	bf0b      	itete	eq
 8003f20:	4672      	moveq	r2, lr
 8003f22:	3201      	addne	r2, #1
 8003f24:	3501      	addeq	r5, #1
 8003f26:	f022 0201 	bicne.w	r2, r2, #1
 8003f2a:	106b      	asrs	r3, r5, #1
 8003f2c:	0852      	lsrs	r2, r2, #1
 8003f2e:	07e9      	lsls	r1, r5, #31
 8003f30:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003f34:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003f38:	bf48      	it	mi
 8003f3a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003f3e:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 8003f42:	4616      	mov	r6, r2
 8003f44:	e777      	b.n	8003e36 <__ieee754_sqrt+0x32>
 8003f46:	0adc      	lsrs	r4, r3, #11
 8003f48:	3a15      	subs	r2, #21
 8003f4a:	055b      	lsls	r3, r3, #21
 8003f4c:	e78a      	b.n	8003e64 <__ieee754_sqrt+0x60>
 8003f4e:	0064      	lsls	r4, r4, #1
 8003f50:	3101      	adds	r1, #1
 8003f52:	e78a      	b.n	8003e6a <__ieee754_sqrt+0x66>
 8003f54:	46a0      	mov	r8, r4
 8003f56:	e7cd      	b.n	8003ef4 <__ieee754_sqrt+0xf0>
 8003f58:	7ff00000 	.word	0x7ff00000

08003f5c <matherr>:
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	4770      	bx	lr

08003f60 <__errno>:
 8003f60:	4b01      	ldr	r3, [pc, #4]	; (8003f68 <__errno+0x8>)
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	2000008c 	.word	0x2000008c

08003f6c <_sbrk>:
 8003f6c:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <_sbrk+0x14>)
 8003f6e:	4602      	mov	r2, r0
 8003f70:	6819      	ldr	r1, [r3, #0]
 8003f72:	b909      	cbnz	r1, 8003f78 <_sbrk+0xc>
 8003f74:	4903      	ldr	r1, [pc, #12]	; (8003f84 <_sbrk+0x18>)
 8003f76:	6019      	str	r1, [r3, #0]
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	4402      	add	r2, r0
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	4770      	bx	lr
 8003f80:	20000310 	.word	0x20000310
 8003f84:	200004f0 	.word	0x200004f0

08003f88 <_init>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	bf00      	nop
 8003f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8e:	bc08      	pop	{r3}
 8003f90:	469e      	mov	lr, r3
 8003f92:	4770      	bx	lr

08003f94 <_fini>:
 8003f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f96:	bf00      	nop
 8003f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9a:	bc08      	pop	{r3}
 8003f9c:	469e      	mov	lr, r3
 8003f9e:	4770      	bx	lr
